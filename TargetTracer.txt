local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

local Core = nil
local UI = nil
local notify = nil

-- Конфигурация TargetESP
local Settings = {
    Enabled = false,
    TracerMode = "2D", -- "2D" или "3D"
    Tracer2DOrigin = "From Bottom", -- "From Top", "From Bottom", "From Player"
    PlayerColor = Color3.fromRGB(255, 0, 0), -- Цвет трейсера и кругов
    TracerThickness = 2,
    TracerTransparency = 0.7,
    YOffset = 0, -- Смещение начальной точки по Y
    EndYOffset = 0, -- Смещение конечной точки по Y
    CircleDiameter = 5, -- Диаметр кругов
    CircleThickness = 1, -- Толщина обводки кругов
    CircleTransparency = 0.7, -- Прозрачность обводки кругов
    CircleFilled = true, -- Заполнение кругов
    FilledTransparency = 0.7, -- Прозрачность заливки кругов
    CirclesEnabled = true -- Включение/выключение кругов
}

-- 2D трейсер (Drawing)
local tracer2D = Drawing.new("Line")
tracer2D.Thickness = Settings.TracerThickness
tracer2D.Transparency = Settings.TracerTransparency
tracer2D.Visible = false

-- 2D круги
local startCircle2D = Drawing.new("Circle")
startCircle2D.Radius = Settings.CircleDiameter / 2
startCircle2D.Thickness = Settings.CircleThickness
startCircle2D.Transparency = Settings.CircleFilled and Settings.FilledTransparency or Settings.CircleTransparency
startCircle2D.Color = Settings.PlayerColor
startCircle2D.Visible = false
startCircle2D.Filled = Settings.CircleFilled

local endCircle2D = Drawing.new("Circle")
endCircle2D.Radius = Settings.CircleDiameter / 2
endCircle2D.Thickness = Settings.CircleThickness
endCircle2D.Transparency = Settings.CircleFilled and Settings.FilledTransparency or Settings.CircleTransparency
endCircle2D.Color = Settings.PlayerColor
endCircle2D.Visible = false
endCircle2D.Filled = Settings.CircleFilled

-- 3D трейсер (Beam)
local beam = Instance.new("Beam")
beam.Color = ColorSequence.new(Settings.PlayerColor)
beam.Transparency = NumberSequence.new(Settings.TracerTransparency)
beam.Width0 = math.max(Settings.TracerThickness / 10, 0.5)
beam.Width1 = math.max(Settings.TracerThickness / 10, 0.5)
beam.Enabled = false
beam.Parent = workspace.Terrain

local startAttachment = Instance.new("Attachment")
startAttachment.Parent = workspace.Terrain
local endAttachment = Instance.new("Attachment")
endAttachment.Parent = workspace.Terrain
beam.Attachment0 = startAttachment
beam.Attachment1 = endAttachment

-- 3D круги (Drawing)
local startCircle3D = Drawing.new("Circle")
startCircle3D.Radius = Settings.CircleDiameter / 2
startCircle3D.Thickness = Settings.CircleThickness
startCircle3D.Transparency = Settings.CircleFilled and Settings.FilledTransparency or Settings.CircleTransparency
startCircle3D.Color = Settings.PlayerColor
startCircle3D.Visible = false
startCircle3D.Filled = Settings.CircleFilled

local endCircle3D = Drawing.new("Circle")
endCircle3D.Radius = Settings.CircleDiameter / 2
endCircle3D.Thickness = Settings.CircleThickness
endCircle3D.Transparency = Settings.CircleFilled and Settings.FilledTransparency or Settings.CircleTransparency
endCircle3D.Color = Settings.PlayerColor
endCircle3D.Visible = false
endCircle3D.Filled = Settings.CircleFilled

-- Получение позиции локального игрока
local function GetLocalPlayerPosition()
    local character = LocalPlayer.Character
    local rootPart = character and character:FindFirstChild("HumanoidRootPart")
    return rootPart and (rootPart.Position + Vector3.new(0, Settings.YOffset, 0)) or Camera.CFrame.Position
end

-- Получение экранной позиции локального игрока
local function GetLocalPlayerScreenPosition()
    local character = LocalPlayer.Character
    local rootPart = character and character:FindFirstChild("HumanoidRootPart")
    if rootPart then
        local screenPos, onScreen = Camera:WorldToViewportPoint(rootPart.Position + Vector3.new(0, Settings.YOffset, 0))
        return onScreen and Vector2.new(screenPos.X, screenPos.Y) or nil
    end
    return nil
end

-- Получение позиции цели
local function GetTargetPosition(targetName)
    local player = Players:FindFirstChild(targetName)
    if player and player.Character then
        local humanoidRoot = player.Character:FindFirstChild("HumanoidRootPart")
        return humanoidRoot and (humanoidRoot.Position + Vector3.new(0, Settings.EndYOffset, 0)) or nil
    end
    return nil
end

-- Вычисление радиуса круга с учетом расстояния
local function GetScaledRadius(position)
    local distance = (Camera.CFrame.Position - position).Magnitude
    local scaleFactor = 0.05 -- Увеличен для уменьшения размера кругов
    return math.clamp(Settings.CircleDiameter / 2 / (distance * scaleFactor), 1, Settings.CircleDiameter)
end

-- Обновление трейсера
local function UpdateTracer()
    if not Settings.Enabled or not Core or not Core.GunSilentTarget or not Core.GunSilentTarget.CurrentTarget then
        tracer2D.Visible = false
        startCircle2D.Visible = false
        endCircle2D.Visible = false
        beam.Enabled = false
        startCircle3D.Visible = false
        endCircle3D.Visible = false
        return
    end

    local targetName = Core.GunSilentTarget.CurrentTarget
    local targetPosition = GetTargetPosition(targetName)

    if not targetPosition then
        tracer2D.Visible = false
        startCircle2D.Visible = false
        endCircle2D.Visible = false
        beam.Enabled = false
        startCircle3D.Visible = false
        endCircle3D.Visible = false
        return
    end

    local localPosition = GetLocalPlayerPosition()

    if Settings.TracerMode == "2D" then
        local screenPos, onScreen = Camera:WorldToViewportPoint(targetPosition)
        if onScreen then
            local fromPos
            if Settings.Tracer2DOrigin == "From Top" then
                fromPos = Vector2.new(Camera.ViewportSize.X / 2, 0)
            elseif Settings.Tracer2DOrigin == "From Bottom" then
                fromPos = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
            elseif Settings.Tracer2DOrigin == "From Player" then
                fromPos = GetLocalPlayerScreenPosition()
                if not fromPos then
                    tracer2D.Visible = false
                    startCircle2D.Visible = false
                    endCircle2D.Visible = false
                    return
                end
            end
            tracer2D.From = fromPos
            tracer2D.To = Vector2.new(screenPos.X, screenPos.Y)
            tracer2D.Color = Settings.PlayerColor
            tracer2D.Thickness = Settings.TracerThickness
            tracer2D.Transparency = Settings.TracerTransparency
            tracer2D.Visible = true

            -- Круги для 2D
            if Settings.CirclesEnabled then
                endCircle2D.Position = Vector2.new(screenPos.X, screenPos.Y)
                endCircle2D.Color = Settings.PlayerColor
                endCircle2D.Radius = Settings.CircleDiameter / 2
                endCircle2D.Thickness = Settings.CircleThickness
                endCircle2D.Transparency = Settings.CircleFilled and Settings.FilledTransparency or Settings.CircleTransparency
                endCircle2D.Filled = Settings.CircleFilled
                endCircle2D.Visible = true
                if Settings.Tracer2DOrigin == "From Player" then
                    startCircle2D.Position = fromPos
                    startCircle2D.Color = Settings.PlayerColor
                    startCircle2D.Radius = Settings.CircleDiameter / 2
                    startCircle2D.Thickness = Settings.CircleThickness
                    startCircle2D.Transparency = Settings.CircleFilled and Settings.FilledTransparency or Settings.CircleTransparency
                    startCircle2D.Filled = Settings.CircleFilled
                    startCircle2D.Visible = true
                else
                    startCircle2D.Visible = false
                end
            else
                startCircle2D.Visible = false
                endCircle2D.Visible = false
            end
        else
            tracer2D.Visible = false
            startCircle2D.Visible = false
            endCircle2D.Visible = false
        end
        beam.Enabled = false
        startCircle3D.Visible = false
        endCircle3D.Visible = false
    else -- 3D
        startAttachment.Position = localPosition
        endAttachment.Position = targetPosition
        beam.Color = ColorSequence.new(Settings.PlayerColor)
        beam.Transparency = NumberSequence.new(Settings.TracerTransparency)
        beam.Width0 = math.max(Settings.TracerThickness / 10, 0.5)
        beam.Width1 = math.max(Settings.TracerThickness / 10, 0.5)
        beam.Enabled = true

        -- Круги для 3D
        if Settings.CirclesEnabled then
            local startScreenPos, startOnScreen = Camera:WorldToViewportPoint(localPosition)
            local endScreenPos, endOnScreen = Camera:WorldToViewportPoint(targetPosition)
            if startOnScreen and endOnScreen then
                startCircle3D.Position = Vector2.new(startScreenPos.X, startScreenPos.Y)
                startCircle3D.Color = Settings.PlayerColor
                startCircle3D.Radius = GetScaledRadius(localPosition)
                startCircle3D.Thickness = Settings.CircleThickness
                startCircle3D.Transparency = Settings.CircleFilled and Settings.FilledTransparency or Settings.CircleTransparency
                startCircle3D.Filled = Settings.CircleFilled
                startCircle3D.Visible = true
                endCircle3D.Position = Vector2.new(endScreenPos.X, endScreenPos.Y)
                endCircle3D.Color = Settings.PlayerColor
                endCircle3D.Radius = GetScaledRadius(targetPosition)
                endCircle3D.Thickness = Settings.CircleThickness
                endCircle3D.Transparency = Settings.CircleFilled and Settings.FilledTransparency or Settings.CircleTransparency
                endCircle3D.Filled = Settings.CircleFilled
                endCircle3D.Visible = true
            else
                startCircle3D.Visible = false
                endCircle3D.Visible = false
            end
        else
            startCircle3D.Visible = false
            endCircle3D.Visible = false
        end
        tracer2D.Visible = false
        startCircle2D.Visible = false
        endCircle2D.Visible = false
    end
end

-- Инициализация модуля
function Init(ui, core, notification)
    UI = ui
    Core = core
    notify = notification

    if not UI or not Core or not notify then
        return
    end

    -- Создание секций в UI.Tabs.Visuals (вкладка уже существует)
    UI.Sections = UI.Sections or {}
    UI.Sections.TargetTracer = UI.Tabs.Visuals:Section({ Name = "Target Tracer", Side = "Right" })
    UI.Sections.Circles = UI.Tabs.Visuals:Section({ Name = "Circles", Side = "Right" })

    -- UI элементы для Target Tracer
    UI.Sections.TargetTracer:Header({ Name = "Target Tracer" })

    UI.Sections.TargetTracer:Toggle({
        Name = "Enabled",
        Default = Settings.Enabled,
        Callback = function(value)
            Settings.Enabled = value
            local is2D = Settings.TracerMode == "2D"
            tracer2D.Visible = is2D and value and Core.GunSilentTarget.CurrentTarget ~= nil
            endCircle2D.Visible = is2D and value and Settings.CirclesEnabled and Core.GunSilentTarget.CurrentTarget ~= nil
            startCircle2D.Visible = is2D and value and Settings.CirclesEnabled and Settings.Tracer2DOrigin == "From Player" and Core.GunSilentTarget.CurrentTarget ~= nil
            beam.Enabled = not is2D and value and Core.GunSilentTarget.CurrentTarget ~= nil
            startCircle3D.Visible = not is2D and value and Settings.CirclesEnabled and Core.GunSilentTarget.CurrentTarget ~= nil
            endCircle3D.Visible = not is2D and value and Settings.CirclesEnabled and Core.GunSilentTarget.CurrentTarget ~= nil
            notify("Target Tracer", "Toggled " .. (value and "ON" or "OFF"), false)
        end
    }, "TargetTracerEnabled")

    UI.Sections.TargetTracer:Colorpicker({
        Name = "Player Color",
        Default = Settings.PlayerColor,
        Callback = function(value)
            Settings.PlayerColor = value
            tracer2D.Color = value
            startCircle2D.Color = value
            endCircle2D.Color = value
            startCircle3D.Color = value
            endCircle3D.Color = value
            beam.Color = ColorSequence.new(value)
            notify("Target Tracer", "Player Color updated", false)
        end
    }, "TargetTracerPlayerColor")

    UI.Sections.TargetTracer:Dropdown({
        Name = "Tracer Mode",
        Options = {"2D", "3D"},
        Default = Settings.TracerMode,
        MultiSelection = false,
        Callback = function(value)
            Settings.TracerMode = value
            local is2D = value == "2D"
            tracer2D.Visible = is2D and Settings.Enabled and Core.GunSilentTarget.CurrentTarget ~= nil
            endCircle2D.Visible = is2D and Settings.Enabled and Settings.CirclesEnabled and Core.GunSilentTarget.CurrentTarget ~= nil
            startCircle2D.Visible = is2D and Settings.Enabled and Settings.CirclesEnabled and Settings.Tracer2DOrigin == "From Player" and Core.GunSilentTarget.CurrentTarget ~= nil
            beam.Enabled = not is2D and Settings.Enabled and Core.GunSilentTarget.CurrentTarget ~= nil
            startCircle3D.Visible = not is2D and Settings.Enabled and Settings.CirclesEnabled and Core.GunSilentTarget.CurrentTarget ~= nil
            endCircle3D.Visible = not is2D and Settings.Enabled and Settings.CirclesEnabled and Core.GunSilentTarget.CurrentTarget ~= nil
            notify("Target Tracer", "Tracer Mode set to: " .. value, false)
        end
    }, "TargetTracerMode")

    UI.Sections.TargetTracer:Dropdown({
        Name = "2D Tracer Origin",
        Options = {"From Top", "From Bottom", "From Player"},
        Default = Settings.Tracer2DOrigin,
        MultiSelection = false,
        Callback = function(value)
            Settings.Tracer2DOrigin = value
            startCircle2D.Visible = Settings.Enabled and Settings.TracerMode == "2D" and Settings.CirclesEnabled and value == "From Player" and Core.GunSilentTarget.CurrentTarget ~= nil
            notify("Target Tracer", "2D Tracer Origin set to: " .. value, false)
        end
    }, "TargetTracer2DOrigin")

    UI.Sections.TargetTracer:Slider({
        Name = "Tracer Thickness",
        Minimum = 1,
        Maximum = 10,
        Default = Settings.TracerThickness,
        Precision = 0,
        Suffix = "px",
        Callback = function(value)
            Settings.TracerThickness = value
            tracer2D.Thickness = value
            beam.Width0 = math.max(value / 10, 0.5)
            beam.Width1 = math.max(value / 10, 0.5)
            notify("Target Tracer", "Tracer Thickness set to: " .. value .. "px", false)
        end
    }, "TargetTracerThickness")

    UI.Sections.TargetTracer:Slider({
        Name = "Tracer Transparency",
        Minimum = 0,
        Maximum = 1,
        Default = Settings.TracerTransparency,
        Precision = 2,
        Suffix = "",
        Callback = function(value)
            Settings.TracerTransparency = value
            tracer2D.Transparency = value
            beam.Transparency = NumberSequence.new(value)
            notify("Target Tracer", "Tracer Transparency set to: " .. value, false)
        end
    }, "TargetTracerTransparency")

    UI.Sections.TargetTracer:Slider({
        Name = "Y Offset",
        Minimum = -3,
        Maximum = 3,
        Default = Settings.YOffset,
        Precision = 2,
        Suffix = "",
        Callback = function(value)
            Settings.YOffset = value
            notify("Target Tracer", "Y Offset set to: " .. value, false)
        end
    }, "TargetTracerYOffset")

    UI.Sections.TargetTracer:Slider({
        Name = "End Y Offset",
        Minimum = -3,
        Maximum = 3,
        Default = Settings.EndYOffset,
        Precision = 2,
        Suffix = "",
        Callback = function(value)
            Settings.EndYOffset = value
            notify("Target Tracer", "End Y Offset set to: " .. value, false)
        end
    }, "TargetTracerEndYOffset")

    -- UI элементы для Circles
    UI.Sections.Circles:Header({ Name = "Circles" })

    UI.Sections.Circles:Toggle({
        Name = "Circles Enabled",
        Default = Settings.CirclesEnabled,
        Callback = function(value)
            Settings.CirclesEnabled = value
            startCircle2D.Visible = Settings.Enabled and Settings.TracerMode == "2D" and value and Settings.Tracer2DOrigin == "From Player" and Core.GunSilentTarget.CurrentTarget ~= nil
            endCircle2D.Visible = Settings.Enabled and Settings.TracerMode == "2D" and value and Core.GunSilentTarget.CurrentTarget ~= nil
            startCircle3D.Visible = Settings.Enabled and Settings.TracerMode == "3D" and value and Core.GunSilentTarget.CurrentTarget ~= nil
            endCircle3D.Visible = Settings.Enabled and Settings.TracerMode == "3D" and value and Core.GunSilentTarget.CurrentTarget ~= nil
            notify("Target Tracer", "Circles Enabled " .. (value and "ON" or "OFF"), false)
        end
    }, "TargetTracerCirclesEnabled")

    UI.Sections.Circles:Slider({
        Name = "Circle Diameter",
        Minimum = 2,
        Maximum = 20,
        Default = Settings.CircleDiameter,
        Precision = 0,
        Suffix = "px",
        Callback = function(value)
            Settings.CircleDiameter = value
            startCircle2D.Radius = value / 2
            endCircle2D.Radius = value / 2
            startCircle3D.Radius = value / 2
            endCircle3D.Radius = value / 2
            notify("Target Tracer", "Circle Diameter set to: " .. value .. "px", false)
        end
    }, "TargetTracerCircleDiameter")

    UI.Sections.Circles:Slider({
        Name = "Circle Thickness",
        Minimum = 1,
        Maximum = 10,
        Default = Settings.CircleThickness,
        Precision = 0,
        Suffix = "px",
        Callback = function(value)
            Settings.CircleThickness = value
            startCircle2D.Thickness = value
            endCircle2D.Thickness = value
            startCircle3D.Thickness = value
            endCircle3D.Thickness = value
            notify("Target Tracer", "Circle Thickness set to: " .. value .. "px", false)
        end
    }, "TargetTracerCircleThickness")

    UI.Sections.Circles:Slider({
        Name = "Filled Transparency",
        Minimum = 0,
        Maximum = 1,
        Default = Settings.FilledTransparency,
        Precision = 2,
        Suffix = "",
        Callback = function(value)
            Settings.FilledTransparency = value
            startCircle2D.Transparency = Settings.CircleFilled and value or Settings.CircleTransparency
            endCircle2D.Transparency = Settings.CircleFilled and value or Settings.CircleTransparency
            startCircle3D.Transparency = Settings.CircleFilled and value or Settings.CircleTransparency
            endCircle3D.Transparency = Settings.CircleFilled and value or Settings.CircleTransparency
            notify("Target Tracer", "Filled Transparency set to: " .. value, false)
        end
    }, "TargetTracerFilledTransparency")

    UI.Sections.Circles:Toggle({
        Name = "Circle Filled",
        Default = Settings.CircleFilled,
        Callback = function(value)
            Settings.CircleFilled = value
            startCircle2D.Filled = value
            endCircle2D.Filled = value
            startCircle3D.Filled = value
            endCircle3D.Filled = value
            startCircle2D.Transparency = value and Settings.FilledTransparency or Settings.CircleTransparency
            endCircle2D.Transparency = value and Settings.FilledTransparency or Settings.CircleTransparency
            startCircle3D.Transparency = value and Settings.FilledTransparency or Settings.CircleTransparency
            endCircle3D.Transparency = value and Settings.FilledTransparency or Settings.CircleTransparency
            notify("Target Tracer", "Circle Filled " .. (value and "ON" or "OFF"), false)
        end
    }, "TargetTracerCircleFilled")

    -- Обновление трейсера каждый кадр
    RunService.RenderStepped:Connect(UpdateTracer)
end

-- Очистка при телепортации
game:GetService("Players").LocalPlayer.OnTeleport:Connect(function()
    tracer2D:Remove()
    startCircle2D:Remove()
    endCircle2D:Remove()
    beam:Destroy()
    startAttachment:Destroy()
    endAttachment:Destroy()
    startCircle3D:Remove()
    endCircle3D:Remove()
end)

return {
    Init = Init
}
