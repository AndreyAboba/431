local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

local Core = nil
local UI = nil
local notify = nil

-- Конфигурация TargetESP
local Settings = {
    Enabled = false,
    TracerMode = "2D", -- "2D" или "3D"
    Tracer2DOrigin = "From Bottom", -- "From Top", "From Bottom", "From Player"
    PlayerColor = Color3.fromRGB(255, 0, 0), -- Цвет трейсера для игроков
    TracerThickness = 2,
    TracerTransparency = 0.7,
    YOffset = 0, -- Смещение по Y для "From Player" и 3D
    CircleRadius = 5, -- Радиус кругов
    CircleTransparency = 0.7
}

-- 2D трейсер (Drawing)
local tracer2D = Drawing.new("Line")
tracer2D.Thickness = Settings.TracerThickness
tracer2D.Transparency = Settings.TracerTransparency
tracer2D.Visible = false

-- 2D круги
local startCircle2D = Drawing.new("Circle")
startCircle2D.Radius = Settings.CircleRadius
startCircle2D.Thickness = 1
startCircle2D.Transparency = Settings.CircleTransparency
startCircle2D.Color = Settings.PlayerColor
startCircle2D.Visible = false
startCircle2D.Filled = true

local endCircle2D = Drawing.new("Circle")
endCircle2D.Radius = Settings.CircleRadius
endCircle2D.Thickness = 1
endCircle2D.Transparency = Settings.CircleTransparency
endCircle2D.Color = Settings.PlayerColor
endCircle2D.Visible = false
endCircle2D.Filled = true

-- 3D трейсер (Beam)
local beam = Instance.new("Beam")
beam.Color = ColorSequence.new(Settings.PlayerColor)
beam.Transparency = NumberSequence.new(Settings.TracerTransparency)
beam.Width0 = Settings.TracerThickness / 10
beam.Width1 = Settings.TracerThickness / 10
beam.Enabled = false
beam.Parent = workspace.Terrain

local startAttachment = Instance.new("Attachment")
startAttachment.Parent = workspace.Terrain
local endAttachment = Instance.new("Attachment")
endAttachment.Parent = workspace.Terrain
beam.Attachment0 = startAttachment
beam.Attachment1 = endAttachment

-- 3D круги (Part с Spherical формами)
local startSphere = Instance.new("Part")
startSphere.Size = Vector3.new(0.2, 0.2, 0.2)
startSphere.Shape = Enum.PartType.Ball
startSphere.Anchored = true
startSphere.CanCollide = false
startSphere.Transparency = Settings.CircleTransparency
startSphere.Color = Settings.PlayerColor
startSphere.Parent = workspace.Terrain

local endSphere = Instance.new("Part")
endSphere.Size = Vector3.new(0.2, 0.2, 0.2)
endSphere.Shape = Enum.PartType.Ball
endSphere.Anchored = true
endSphere.CanCollide = false
endSphere.Transparency = Settings.CircleTransparency
endSphere.Color = Settings.PlayerColor
endSphere.Parent = workspace.Terrain

-- Функция для вывода отладочных сообщений
local function DebugPrint(message)
    print("[TargetESP Debug] " .. os.date("%H:%M:%S", os.time()) .. ": " .. message)
end

-- Получение позиции локального игрока
local function GetLocalPlayerPosition()
    local character = LocalPlayer.Character
    local rootPart = character and character:FindFirstChild("HumanoidRootPart")
    return rootPart and (rootPart.Position + Vector3.new(0, Settings.YOffset, 0)) or Camera.CFrame.Position
end

-- Получение экранной позиции локального игрока
local function GetLocalPlayerScreenPosition()
    local character = LocalPlayer.Character
    local rootPart = character and character:FindFirstChild("HumanoidRootPart")
    if rootPart then
        local screenPos, onScreen = Camera:WorldToViewportPoint(rootPart.Position + Vector3.new(0, Settings.YOffset, 0))
        return onScreen and Vector2.new(screenPos.X, screenPos.Y) or nil
    end
    return nil
end

-- Получение позиции цели
local function GetTargetPosition(targetName)
    local player = Players:FindFirstChild(targetName)
    if player and player.Character then
        local humanoidRoot = player.Character:FindFirstChild("HumanoidRootPart")
        return humanoidRoot and (humanoidRoot.Position + Vector3.new(0, Settings.YOffset, 0)) or nil
    end
    DebugPrint("No valid player position for " .. tostring(targetName))
    return nil
end

-- Обновление трейсера
local function UpdateTracer()
    if not Settings.Enabled or not Core or not Core.GunSilentTarget or not Core.GunSilentTarget.CurrentTarget then
        tracer2D.Visible = false
        startCircle2D.Visible = false
        endCircle2D.Visible = false
        beam.Enabled = false
        startSphere.Transparency = 1
        endSphere.Transparency = 1
        return
    end

    local targetName = Core.GunSilentTarget.CurrentTarget
    local targetPosition = GetTargetPosition(targetName)

    if not targetPosition then
        tracer2D.Visible = false
        startCircle2D.Visible = false
        endCircle2D.Visible = false
        beam.Enabled = false
        startSphere.Transparency = 1
        endSphere.Transparency = 1
        DebugPrint("No valid target position for " .. tostring(targetName))
        return
    end

    local localPosition = GetLocalPlayerPosition()

    if Settings.TracerMode == "2D" then
        local screenPos, onScreen = Camera:WorldToViewportPoint(targetPosition)
        if onScreen then
            local fromPos
            if Settings.Tracer2DOrigin == "From Top" then
                fromPos = Vector2.new(Camera.ViewportSize.X / 2, 0)
            elseif Settings.Tracer2DOrigin == "From Bottom" then
                fromPos = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
            elseif Settings.Tracer2DOrigin == "From Player" then
                fromPos = GetLocalPlayerScreenPosition()
                if not fromPos then
                    tracer2D.Visible = false
                    startCircle2D.Visible = false
                    endCircle2D.Visible = false
                    beam.Enabled = false
                    startSphere.Transparency = 1
                    endSphere.Transparency = 1
                    DebugPrint("No valid player screen position")
                    return
                end
            end
            tracer2D.From = fromPos
            tracer2D.To = Vector2.new(screenPos.X, screenPos.Y)
            tracer2D.Color = Settings.PlayerColor
            tracer2D.Thickness = Settings.TracerThickness
            tracer2D.Transparency = Settings.TracerTransparency
            tracer2D.Visible = true

            -- Круги для 2D
            endCircle2D.Position = Vector2.new(screenPos.X, screenPos.Y)
            endCircle2D.Color = Settings.PlayerColor
            endCircle2D.Visible = true
            if Settings.Tracer2DOrigin == "From Player" then
                startCircle2D.Position = fromPos
                startCircle2D.Color = Settings.PlayerColor
                startCircle2D.Visible = true
            else
                startCircle2D.Visible = false
            end
        else
            tracer2D.Visible = false
            startCircle2D.Visible = false
            endCircle2D.Visible = false
        end
        beam.Enabled = false
        startSphere.Transparency = 1
        endSphere.Transparency = 1
    else -- 3D
        startAttachment.Position = localPosition
        endAttachment.Position = targetPosition
        beam.Color = ColorSequence.new(Settings.PlayerColor)
        beam.Transparency = NumberSequence.new(Settings.TracerTransparency)
        beam.Width0 = Settings.TracerThickness / 10
        beam.Width1 = Settings.TracerThickness / 10
        beam.Enabled = true

        -- Сферы для 3D
        startSphere.Position = localPosition
        startSphere.Color = Settings.PlayerColor
        startSphere.Transparency = Settings.CircleTransparency
        endSphere.Position = targetPosition
        endSphere.Color = Settings.PlayerColor
        endSphere.Transparency = Settings.CircleTransparency

        tracer2D.Visible = false
        startCircle2D.Visible = false
        endCircle2D.Visible = false
    end
end

-- Инициализация модуля
function Init(ui, core, notification)
    UI = ui
    Core = core
    notify = notification

    DebugPrint("TargetESP module initializing with Core: " .. tostring(Core))
    if not UI or not Core or not notify then
        DebugPrint("Warning: UI, Core, or notification is nil during initialization")
        return
    end

    -- Создание секции в UI.Tabs.Visuals
    UI.TabGroups = UI.TabGroups or { Main = UI.Window:TabGroup() }
    UI.Tabs = UI.Tabs or {}
    UI.Tabs.Visuals = UI.Tabs.Visuals or UI.TabGroups.Main:Tab({ Name = "Visuals", Image = "rbxassetid://12809023371" })
    UI.Sections = UI.Sections or {}
    UI.Sections.TargetTracer = UI.Tabs.Visuals:Section({ Name = "Target Tracer", Side = "Right" })

    -- UI элементы
    UI.Sections.TargetTracer:Header({ Name = "Target Tracer" })

    UI.Sections.TargetTracer:Toggle({
        Name = "Enabled",
        Default = Settings.Enabled,
        Callback = function(value)
            Settings.Enabled = value
            local is2D = Settings.TracerMode == "2D"
            tracer2D.Visible = is2D and value and Core.GunSilentTarget.CurrentTarget ~= nil
            endCircle2D.Visible = is2D and value and Core.GunSilentTarget.CurrentTarget ~= nil
            startCircle2D.Visible = is2D and value and Settings.Tracer2DOrigin == "From Player" and Core.GunSilentTarget.CurrentTarget ~= nil
            beam.Enabled = not is2D and value and Core.GunSilentTarget.CurrentTarget ~= nil
            startSphere.Transparency = not is2D and value and Core.GunSilentTarget.CurrentTarget ~= nil and Settings.CircleTransparency or 1
            endSphere.Transparency = not is2D and value and Core.GunSilentTarget.CurrentTarget ~= nil and Settings.CircleTransparency or 1
            notify("Target Tracer", "Toggled " .. (value and "ON" or "OFF"), false)
        end
    }, "TargetTracerEnabled")

    UI.Sections.TargetTracer:Colorpicker({
        Name = "Player Color",
        Default = Settings.PlayerColor,
        Callback = function(value)
            Settings.PlayerColor = value
            notify("Target Tracer", "Player Color updated", false)
        end
    }, "TargetTracerPlayerColor")

    UI.Sections.TargetTracer:Dropdown({
        Name = "Tracer Mode",
        Options = {"2D", "3D"},
        Default = Settings.TracerMode,
        MultiSelection = false,
        Callback = function(value)
            Settings.TracerMode = value
            local is2D = value == "2D"
            tracer2D.Visible = is2D and Settings.Enabled and Core.GunSilentTarget.CurrentTarget ~= nil
            endCircle2D.Visible = is2D and Settings.Enabled and Core.GunSilentTarget.CurrentTarget ~= nil
            startCircle2D.Visible = is2D and Settings.Enabled and Settings.Tracer2DOrigin == "From Player" and Core.GunSilentTarget.CurrentTarget ~= nil
            beam.Enabled = not is2D and Settings.Enabled and Core.GunSilentTarget.CurrentTarget ~= nil
            startSphere.Transparency = not is2D and Settings.Enabled and Core.GunSilentTarget.CurrentTarget ~= nil and Settings.CircleTransparency or 1
            endSphere.Transparency = not is2D and Settings.Enabled and Core.GunSilentTarget.CurrentTarget ~= nil and Settings.CircleTransparency or 1
            notify("Target Tracer", "Tracer Mode set to: " .. value, false)
        end
    }, "TargetTracerMode")

    UI.Sections.TargetTracer:Dropdown({
        Name = "2D Tracer Origin",
        Options = {"From Top", "From Bottom", "From Player"},
        Default = Settings.Tracer2DOrigin,
        MultiSelection = false,
        Callback = function(value)
            Settings.Tracer2DOrigin = value
            startCircle2D.Visible = Settings.Enabled and Settings.TracerMode == "2D" and value == "From Player" and Core.GunSilentTarget.CurrentTarget ~= nil
            notify("Target Tracer", "2D Tracer Origin set to: " .. value, false)
        end
    }, "TargetTracer2DOrigin")

    UI.Sections.TargetTracer:Slider({
        Name = "Tracer Thickness",
        Minimum = 1,
        Maximum = 10,
        Default = Settings.TracerThickness,
        Precision = 0,
        Suffix = "px",
        Callback = function(value)
            Settings.TracerThickness = value
            tracer2D.Thickness = value
            beam.Width0 = value / 10
            beam.Width1 = value / 10
            notify("Target Tracer", "Tracer Thickness set to: " .. value .. "px", false)
        end
    }, "TargetTracerThickness")

    UI.Sections.TargetTracer:Slider({
        Name = "Tracer Transparency",
        Minimum = 0,
        Maximum = 1,
        Default = Settings.TracerTransparency,
        Precision = 2,
        Suffix = "",
        Callback = function(value)
            Settings.TracerTransparency = value
            tracer2D.Transparency = value
            beam.Transparency = NumberSequence.new(value)
            notify("Target Tracer", "Tracer Transparency set to: " .. value, false)
        end
    }, "TargetTracerTransparency")

    UI.Sections.TargetTracer:Slider({
        Name = "Y Offset",
        Minimum = -3,
        Maximum = 3,
        Default = Settings.YOffset,
        Precision = 2,
        Suffix = "studs",
        Callback = function(value)
            Settings.YOffset = value
            notify("Target Tracer", "Y Offset set to: " .. value .. " studs", false)
        end
    }, "TargetTracerYOffset")

    -- Обновление трейсера каждый кадр
    RunService.RenderStepped:Connect(UpdateTracer)

    DebugPrint("TargetESP module initialized successfully")
end

-- Очистка при телепортации
game:GetService("Players").LocalPlayer.OnTeleport:Connect(function()
    tracer2D:Remove()
    startCircle2D:Remove()
    endCircle2D:Remove()
    beam:Destroy()
    startAttachment:Destroy()
    endAttachment:Destroy()
    startSphere:Destroy()
    endSphere:Destroy()
end)

return {
    Init = Init
}
