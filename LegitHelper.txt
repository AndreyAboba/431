local LegitHelper = {}

function LegitHelper.Init(UI, Core, notify)
    local Players = game:GetService("Players")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local RunService = game:GetService("RunService")
    local LocalPlayer = Players.LocalPlayer
    local lastNotificationTime = 0
    local notificationDelay = 5

    local State = {
        LegitHelper = {
            ToolExploit = {
                Enabled = { Value = false, Default = false }
            }
        }
    }

    local originalSettings = {} -- Хранит исходные настройки для каждого оружия
    local currentWeapon = nil -- Текущее оружие для отслеживания изменений

    -- Получение настроек текущего оружия
    local function getLocalWeaponSettings()
        local character = LocalPlayer.Character
        if not character then
            return nil, nil
        end
        local weapon
        for _, child in pairs(character:GetChildren()) do
            if child:IsA("Tool") then
                weapon = child
                break
            end
        end
        if not weapon then
            return nil, nil
        end
        local settingsModule = weapon:FindFirstChild("Settings")
        if not settingsModule then
            return nil, nil
        end
        local success, settings = pcall(require, settingsModule)
        if not success or not settings or not settings.Type then
            warn("Failed to load weapon settings for " .. weapon.Name)
            return nil, nil
        end
        return settings, weapon
    end

    -- Сохранение исходных настроек оружия
    local function saveOriginalSettings(settings, weapon)
        if settings and weapon then
            originalSettings[weapon.Name] = {
                Damage = settings.Damage,
                Windup = settings.Windup,
                Release = settings.Release,
                Recovery = settings.Recovery,
                MissCost = settings.MissCost,
                StamDrain = settings.StamDrain,
                StamNegate = settings.StamNegate,
                Lunge = settings.Lunge
            }
            warn("Saved original settings for " .. weapon.Name)
        end
    end

    -- Восстановление исходных настроек
    local function restoreOriginalSettings(weapon)
        if weapon and originalSettings[weapon.Name] then
            local settingsModule = weapon:FindFirstChild("Settings")
            if settingsModule then
                local settings = require(settingsModule)
                for key, value in pairs(originalSettings[weapon.Name]) do
                    settings[key] = value
                end
                warn("Restored original settings for " .. weapon.Name)
            end
        end
    end

    -- Обновление Label в UI
    local function updateWeaponSettingsLabels()
        local settings, weapon = getLocalWeaponSettings()
        if not settings or not weapon or not UI.Sections.LegitHelper then
            if UI.Sections.LegitHelper then
                UI.Sections.LegitHelper.WeaponName:SetVisibility(false)
                UI.Sections.LegitHelper.SettingsLabel:SetVisibility(false)
            end
            return
        end

        -- Сохраняем настройки при смене оружия
        if weapon ~= currentWeapon then
            saveOriginalSettings(settings, weapon)
            currentWeapon = weapon
        end

        -- Формируем строку для всех характеристик
        local settingsText = string.format(
            "Damage: %s\nWindup: %s\nRelease: %s\nRecovery: %s\nMissCost: %s\nStamDrain: %s\nStamNegate: %s\nLunge: %s",
            tostring(settings.Damage or "not found"),
            tostring(settings.Windup or "not found"),
            tostring(settings.Release or "not found"),
            tostring(settings.Recovery or "not found"),
            tostring(settings.MissCost or "not found"),
            tostring(settings.StamDrain or "not found"),
            tostring(settings.StamNegate or "not found"),
            tostring(settings.Lunge or "not found")
        )

        -- Обновляем текст и видимость Label
        UI.Sections.LegitHelper.WeaponName:UpdateName("Weapon name: " .. weapon.Name)
        UI.Sections.LegitHelper.WeaponName:SetVisibility(true)
        UI.Sections.LegitHelper.SettingsLabel:UpdateName(settingsText)
        UI.Sections.LegitHelper.SettingsLabel:SetVisibility(true)
    end

    -- Мониторинг текущего оружия
    local function runWeaponSettingsMonitor()
        while true do
            RunService.Heartbeat:Wait()
            updateWeaponSettingsLabels()
            if not State.LegitHelper.ToolExploit.Enabled.Value and currentWeapon then
                restoreOriginalSettings(currentWeapon)
            end
        end
    end

    -- Проверка существования секции LegitHelper
    wait(1)
    if not UI.Tabs or not UI.Tabs.Combat or not UI.Sections.LegitHelper then
        warn("LegitHelper section not found in UI.Tabs.Combat. Please ensure it is initialized.")
        return
    end

    -- Настройка UI
    UI.Sections.LegitHelper:Header({ Name = "Tool Exploit" })
    UI.Sections.LegitHelper:Toggle({
        Name = "Enabled",
        Default = State.LegitHelper.ToolExploit.Enabled.Default,
        Callback = function(value)
            State.LegitHelper.ToolExploit.Enabled.Value = value
            local settings, weapon = getLocalWeaponSettings()
            if not value and weapon then
                restoreOriginalSettings(weapon)
            end
            if tick() - lastNotificationTime >= notificationDelay then
                lastNotificationTime = tick()
                notify("ToolExploit", "Tool Exploit " .. (value and "Enabled" or "Disabled"), true)
            end
        end,
    }, "ToolExploitEnabledLH" )
    UI.Sections.LegitHelper:Divider()
    UI.Sections.LegitHelper:Header({ Name = "Weapon Settings" })
    UI.Sections.LegitHelper.WeaponName = UI.Sections.LegitHelper:Label({ Text = "Weapon name: None" }, "WeaponNameLH")
    UI.Sections.LegitHelper.SettingsLabel = UI.Sections.LegitHelper:Label({ Text = "No settings available" }, "SettingsLabelLH")

    task.spawn(runWeaponSettingsMonitor)
end

return LegitHelper
