-- ... (Остальной код без изменений до Cache)
-- Кэш для оптимизации
local Cache = {
    PlayerFriendCache = {},
    FriendsListVersion = 0
}

-- Функция для вывода сообщений с задержкой (без изменений)
local function DelayedPrint(message)
    local currentTime = tick()
    if currentTime - lastPrintTime >= Settings.PrintDelay then
        print("[SilentAim Debug] " .. os.date("%H:%M:%S", os.time()) .. ": " .. message)
        lastPrintTime = currentTime
    end
end

-- ... (Функции IsVisible, IsInSafezone, HasProtectionBubble, HasLasso без изменений)

-- Функция проверки возможности атаки
local function CanAttack(player)
    if not player then
        DelayedPrint("CanAttack: No player provided")
        return false
    end
    
    if HasLasso(player) then
        DelayedPrint("CanAttack: Player " .. player.Name .. " has Lasso")
        return false
    end
    
    if not Settings.TeamCheck then
        DelayedPrint("CanAttack: TeamCheck disabled, allowing attack on " .. player.Name)
        return true
    end
    
    local myTeam = LocalPlayer.Team and LocalPlayer.Team.Name
    local theirTeam = player.Team and player.Team.Name
    
    if not myTeam or not theirTeam then
        DelayedPrint("CanAttack: Team data missing, allowing attack on " .. player.Name)
        return true
    end
    
    if HasProtectionBubble(player) then
        DelayedPrint("CanAttack: Player " .. player.Name .. " has ProtectionBubble")
        return false
    end
    
    local targetPart = player.Character and player.Character:FindFirstChild(Settings.TargetPart)
    if targetPart and IsInSafezone(targetPart.Position) then
        if theirTeam == "Wizards" or theirTeam == "Royal Wizards" then
            DelayedPrint("CanAttack: Player " .. player.Name .. " in safezone and is Wizard/Royal Wizard")
            return false
        end
        DelayedPrint("CanAttack: Player " .. player.Name .. " in safezone, allowing attack")
        return true
    end
    
    if myTeam == "Shadow Wizards" then
        DelayedPrint("CanAttack: LocalPlayer is Shadow Wizard, allowing attack on " .. player.Name)
        return true
    elseif myTeam == "Wizards" or myTeam == "Royal Wizards" then
        if theirTeam == "Wizards" or theirTeam == "Royal Wizards" then
            DelayedPrint("Cannot attack player " .. player.Name .. ", same team (Wizard/Royal Wizard)")
            return false
        end
        DelayedPrint("CanAttack: Allowing attack on " .. player.Name .. " (different team)")
        return true
    end
    
    -- Проверка FriendsList
    if Core and Core.Services and Core.Services.FriendsList then
        local playerNameLower = player.Name:lower()
        local isFriend = Cache.PlayerFriendCache[player]
        if isFriend == nil then
            isFriend = Core.Services.FriendsList[playerNameLower] == true
            Cache.PlayerFriendCache[player] = isFriend
            DelayedPrint("CanAttack: Updated friend cache for " .. player.Name .. ": " .. tostring(isFriend))
        end
        if isFriend then
            DelayedPrint("CanAttack: Blocked attack on friend " .. player.Name)
            return false
        end
        DelayedPrint("CanAttack: Player " .. player.Name .. " is not a friend")
    else
        DelayedPrint("CanAttack: Warning: Core.Services.FriendsList is unavailable")
    end
    
    return true
end

-- ... (Функции GetToolListener, GetClosestTarget, SilentShot, CheckToolEquipped без изменений)

-- Функция для проверки и логирования FriendsList
local function UpdateFriendsCheck()
    local currentTime = tick()
    if currentTime - lastLogTime >= Settings.LogInterval then
        if Core and Core.Services and Core.Services.FriendsList then
            local count = 0
            local friends = {}
            for name, isFriend in pairs(Core.Services.FriendsList) do
                if isFriend then
                    count = count + 1
                    table.insert(friends, name)
                end
            end
            DelayedPrint("FriendsList check: Valid, Count: " .. tostring(count) .. ", Friends: " .. table.concat(friends, ", "))
        else
            DelayedPrint("Error: Core or FriendsList is nil - Core: " .. tostring(Core) .. ", Services: " .. tostring(Core and Core.Services))
        end
        lastLogTime = currentTime
    end
end

-- Инициализация модуля
function Init(ui, core, notification)
    UI = ui
    Core = core
    notify = notification

    DelayedPrint("SilentAim module initializing with Core: " .. tostring(Core))
    if not UI or not Core or not notify then
        DelayedPrint("Warning: UI, Core, or notification is nil during initialization")
        return
    end

    -- Начальная проверка
    UpdateFriendsCheck()

    -- Создание нового таба Combat
    UI.TabGroups = UI.TabGroups or { Main = UI.Window:TabGroup() }
    UI.Tabs = UI.Tabs or {}
    UI.Tabs.Combat = UI.TabGroups.Main:Tab({ Name = "Combat", Image = "rbxassetid://4391741881" })

    -- Создание секции SilentAim
    UI.Sections = UI.Sections or {}
    UI.Sections.SilentAim = UI.Tabs.Combat:Section({ Name = "Silent Aim", Side = "Left" })

    -- Заголовок
    UI.Sections.SilentAim:Header({ Name = "Silent Aim" })

    -- Настройки Silent Aim (без изменений)
    UI.Sections.SilentAim:Toggle({
        Name = "Enabled",
        Default = Settings.Enabled,
        Callback = function(value)
            Settings.Enabled = value
            fovCircle.Visible = value
            notify("Silent Aim", "Toggled " .. (value and "ON" or "OFF"), true)
        end
    }, "SilentEnabled")

    UI.Sections.SilentAim:Slider({
        Name = "FOV",
        Minimum = 50,
        Maximum = 500,
        Default = Settings.FOV,
        Precision = 0,
        Suffix = " studs",
        Callback = function(value)
            Settings.FOV = value
            fovCircle.Radius = value
        end
    }, "SilentFOV")

    UI.Sections.SilentAim:Slider({
        Name = "Hit Chance",
        Minimum = 0,
        Maximum = 100,
        Default = Settings.HitChance,
        Precision = 0,
        Suffix = "%",
        Callback = function(value)
            Settings.HitChance = value
        end
    }, "SilentHitChance")

    UI.Sections.SilentAim:Dropdown({
        Name = "Target Part",
        Options = {"Head", "Torso", "LeftLeg", "RightLeg"},
        Default = Settings.TargetPart,
        MultiSelection = false,
        Callback = function(value)
            Settings.TargetPart = value
            notify("Silent Aim", "Target Part set to: " .. value, true)
        end
    }, "SilentTargetPart")

    UI.Sections.SilentAim:Toggle({
        Name = "Team Check",
        Default = Settings.TeamCheck,
        Callback = function(value)
            Settings.TeamCheck = value
        end
    }, "SilentTeamCheck")

    UI.Sections.SilentAim:Toggle({
        Name = "Visibility Check",
        Default = Settings.VisibilityCheck,
        Callback = function(value)
            Settings.VisibilityCheck = value
        end
    }, "SilentVisibilityCheck")

    UI.Sections.SilentAim:Slider({
        Name = "Print Delay",
        Minimum = 0.1,
        Maximum = 5,
        Default = Settings.PrintDelay,
        Precision = 1,
        Suffix = "s",
        Callback = function(value)
            Settings.PrintDelay = value
        end
    }, "SilentPrintDelay")

    UI.Sections.SilentAim:Slider({
        Name = "Fire Delay",
        Minimum = 0.1,
        Maximum = 2,
        Default = Settings.FireDelay,
        Precision = 1,
        Suffix = "s",
        Callback = function(value)
            Settings.FireDelay = value
        end
    }, "SilentFireDelay")

    UI.Sections.SilentAim:Dropdown({
        Name = "Sort Method",
        Options = {"Distance", "Health", "Crosshair", "Auto"},
        Default = Settings.SortMethod,
        MultiSelection = false,
        Callback = function(value)
            Settings.SortMethod = value
        end
    }, "SilentSortMethod")

    -- Инициализация FriendsList и подписка на обновления
    if Core and Core.Services then
        Core.Services.FriendsList = Core.Services.FriendsList or {}
        Cache.FriendsListVersion = Cache.FriendsListVersion + 1
        Cache.PlayerFriendCache = {} -- Сброс кэша при инициализации
        DelayedPrint("Subscribed to FriendsList updates, version: " .. Cache.FriendsListVersion)
        
        -- Подписка на обновления FriendsList через проверку изменений
        local lastFriendsList = Core.Services.FriendsList
        RunService.Heartbeat:Connect(function()
            if Core.Services.FriendsList ~= lastFriendsList then
                Cache.FriendsListVersion = Cache.FriendsListVersion + 1
                Cache.PlayerFriendCache = {}
                lastFriendsList = Core.Services.FriendsList
                DelayedPrint("FriendsList updated, resetting cache, new version: " .. Cache.FriendsListVersion)
            end
        end)
    end

    DelayedPrint("SilentAim module initialized successfully")
end

-- ... (Остальной код без изменений: RenderStepped, InputBegan, OnTeleport)

return {
    Init = Init
}
