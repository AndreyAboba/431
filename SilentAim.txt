local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local Core = nil
local UI = nil
local notify = nil

-- Конфигурация Silent Aim
local Settings = {
    Enabled = false,
    FOV = 300,
    HitChance = 100,
    TargetPart = "Head",
    TeamCheck = true,
    VisibilityCheck = true,
    PrintDelay = 0.2,
    FireDelay = 0.5,
    Method = "Packet",
    SortMethod = "Auto",
    LogInterval = 0.05,
    DistanceLimit = 1000,
    SmartHitbox = false,
    FOVColor = Color3.fromRGB(0, 255, 0),
    Keybind = nil,
    NPCSupport = false,
    SelectedTarget = "QuestAI"
}

local lastPrintTime = 0
local lastFireTime = 0
local currentTarget = nil
local isToolEquipped = false
local currentTool = nil
local lastLogTime = 0

-- Кэш для FriendsList
local Cache = {
    PlayerFriendCache = {},
    FriendsListVersion = 0
}

-- Создание FOV Circle
local fovCircle = Drawing.new("Circle")
fovCircle.Thickness = 2
fovCircle.Color = Settings.FOVColor
fovCircle.Transparency = 0.7
fovCircle.Radius = Settings.FOV
fovCircle.Visible = Settings.Enabled
fovCircle.Filled = false

-- Функция для вывода сообщений с задержкой
local function DelayedPrint(message)
    local currentTime = tick()
    if currentTime - lastPrintTime >= Settings.PrintDelay then
        print("[SilentAim Debug] " .. os.date("%H:%M:%S", os.time()) .. ": " .. message)
        lastPrintTime = currentTime
    end
end

-- Проверка видимости цели
local function IsVisible(targetPart)
    if not Settings.VisibilityCheck then return true end
    
    local character = LocalPlayer.Character
    local rootPart = character and character:FindFirstChild("HumanoidRootPart")
    if not rootPart then return false end
    
    local rayOrigin = rootPart.Position
    local rayDirection = (targetPart.Position - rayOrigin).Unit * 1000
    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {character}
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
    
    local raycastResult = workspace:Raycast(rayOrigin, rayDirection, raycastParams)
    if raycastResult and raycastResult.Instance:IsDescendantOf(targetPart.Parent) then
        DelayedPrint("Visible: Main ray hit " .. targetPart.Parent.Name .. " (" .. targetPart.Name .. ")")
        return true
    end
    
    local offsetDirections = {
        rayDirection + Vector3.new(0.1, 0, 0),
        rayDirection + Vector3.new(-0.1, 0, 0),
        rayDirection + Vector3.new(0, 0.1, 0),
        rayDirection + Vector3.new(0, -0.1, 0)
    }
    for _, offsetDir in pairs(offsetDirections) do
        local offsetRay = workspace:Raycast(rayOrigin, offsetDir.Unit * 1000, raycastParams)
        if offsetRay and offsetRay.Instance:IsDescendantOf(targetPart.Parent) then
            DelayedPrint("Visible: Offset ray hit " .. targetPart.Parent.Name .. " (" .. targetPart.Name .. ")")
            return true
        end
    end
    
    DelayedPrint("Not visible: Raycast blocked for " .. targetPart.Parent.Name .. " (" .. targetPart.Name .. ")")
    return false
end

-- Проверка нахождения в безопасной зоне
local function IsInSafezone(position)
    local safezone = workspace:FindFirstChild("MapProps") and workspace.MapProps:FindFirstChild("Police") and workspace.MapProps.Police:FindFirstChild("Safezone")
    if not safezone then return false end
    
    local safezonePos = safezone.Position
    local safezoneSize = safezone.Size / 2
    
    local relativePos = position - safezonePos
    return math.abs(relativePos.X) <= safezoneSize.X and
           math.abs(relativePos.Y) <= safezoneSize.Y and
           math.abs(relativePos.Z) <= safezoneSize.Z
end

-- Проверка защиты (ProtectionBubble)
local function HasProtectionBubble(player)
    if not player or not player.Character then return false end
    
    local protectionBubble = workspace:FindFirstChild("Entities") and workspace.Entities:FindFirstChild("ProtectionBubble")
    if not protectionBubble then return false end
    
    local targetPart = player.Character:FindFirstChild(Settings.TargetPart)
    if not targetPart then return false end
    
    local distance = (protectionBubble.Position - targetPart.Position).Magnitude
    return distance < 10
end

-- Проверка наличия Lasso
local function HasLasso(player)
    if not player then return false end
    
    local charactersFolder = workspace:FindFirstChild("Characters")
    if not charactersFolder then return false end
    
    local playerName = player.Name
    if not playerName then return false end
    
    local playerContainer = charactersFolder:FindFirstChild(playerName)
    if not playerContainer then return false end
    
    local fakeLimbs = playerContainer:FindFirstChild("FakeLimbs")
    return fakeLimbs ~= nil
end

-- Проверка возможности атаки
local function CanAttack(player)
    if not player then
        DelayedPrint("CanAttack: No player provided")
        return false
    end
    
    if HasLasso(player) then
        DelayedPrint("CanAttack: Player " .. player.Name .. " has Lasso")
        return false
    end
    
    if not Settings.TeamCheck then
        DelayedPrint("CanAttack: TeamCheck disabled, allowing attack on " .. player.Name)
        return true
    end
    
    local myTeam = LocalPlayer.Team and LocalPlayer.Team.Name
    local theirTeam = player.Team and player.Team.Name
    
    if not myTeam or not theirTeam then
        DelayedPrint("CanAttack: Team data missing, allowing attack on " .. player.Name)
        return true
    end
    
    if HasProtectionBubble(player) then
        DelayedPrint("CanAttack: Player " .. player.Name .. " has ProtectionBubble")
        return false
    end
    
    local targetPart = player.Character and player.Character:FindFirstChild(Settings.TargetPart)
    if targetPart and IsInSafezone(targetPart.Position) then
        if theirTeam == "Wizards" or theirTeam == "Royal Wizards" then
            DelayedPrint("CanAttack: Player " .. player.Name .. " in safezone and is Wizard/Royal Wizard")
            return false
        end
        DelayedPrint("CanAttack: Player " .. player.Name .. " in safezone, allowing attack")
        return true
    end
    
    if myTeam == "Shadow Wizards" then
        DelayedPrint("CanAttack: LocalPlayer is Shadow Wizard, allowing attack on " .. player.Name)
        return true
    elseif myTeam == "Wizards" or myTeam == "Royal Wizards" then
        if theirTeam == "Wizards" or theirTeam == "Royal Wizards" then
            DelayedPrint("CanAttack: Cannot attack player " .. player.Name .. ", same team (Wizard/Royal Wizard)")
            return false
        end
        DelayedPrint("CanAttack: Allowing attack on " .. player.Name .. " (different team)")
        return true
    end
    
    DelayedPrint("CanAttack: Allowing attack on " .. player.Name)
    return true
end

-- Поиск ToolListener и PistolConfig
local function GetToolListener()
    local toolListener = nil
    local wand = nil
    
    local character = LocalPlayer.Character
    if not character then
        DelayedPrint("GetToolListener: No character found")
        return nil, nil
    end

    for _, item in pairs(character:GetChildren()) do
        if item.ClassName == "Tool" then
            wand = item
            toolListener = wand:FindFirstChild("ToolListnerEvent")
            break
        end
    end
    
    if not toolListener or not wand then
        DelayedPrint("GetToolListener: Could not find ToolListnerEvent or wand")
        return nil, nil
    end
    
    local playerContainer = workspace:FindFirstChild("Characters") and workspace.Characters:FindFirstChild(LocalPlayer.Name)
    local pistolConfig = playerContainer and playerContainer:FindFirstChild(wand.Name) and playerContainer[wand.Name]:FindFirstChild("PistolConfig")
    if not pistolConfig then
        DelayedPrint("GetToolListener: PistolConfig not found for " .. (wand and wand.Name or "Unknown"))
        return toolListener, nil
    end
    
    DelayedPrint("GetToolListener: Found ToolListnerEvent and PistolConfig for " .. wand.Name)
    return toolListener, pistolConfig
end

-- Поиск ближайшей цели (игроки)
local function GetClosestTarget()
    local mousePos = UserInputService:GetMouseLocation()
    local validTargets = {}
    local possibleParts = {"Head", "Torso", "LeftLeg", "RightLeg"}
    
    for _, player in pairs(Players:GetPlayers()) do
        if player == LocalPlayer or not player.Character then
            continue
        end
        
        local playerNameLower = player.Name:lower()
        local isFriend = Cache.PlayerFriendCache[playerNameLower]
        if isFriend == nil and Core and Core.Services and Core.Services.FriendsList then
            isFriend = Core.Services.FriendsList[playerNameLower] == true
            Cache.PlayerFriendCache[playerNameLower] = isFriend
            DelayedPrint("GetClosestTarget: Updated friend cache for " .. player.Name .. ": " .. tostring(isFriend))
        end
        if isFriend then
            DelayedPrint("GetClosestTarget: Excluded friend " .. player.Name .. " from targets")
            continue
        end
        
        local humanoid = player.Character:FindFirstChild("Humanoid")
        local humanoidRoot = player.Character:FindFirstChild("HumanoidRootPart")
        if not humanoidRoot then
            DelayedPrint("GetClosestTarget: Excluded " .. player.Name .. " due to missing HumanoidRootPart")
            continue
        end
        if humanoid and humanoid.Health <= 0 then
            DelayedPrint("GetClosestTarget: Excluded " .. player.Name .. " due to zero health")
            continue
        end
        
        local distance = (Camera.CFrame.Position - humanoidRoot.Position).Magnitude
        if distance > Settings.DistanceLimit then
            DelayedPrint("GetClosestTarget: Excluded " .. player.Name .. " due to distance (" .. math.floor(distance) .. " > " .. Settings.DistanceLimit .. ")")
            continue
        end
        
        local targetPart = player.Character:FindFirstChild(Settings.TargetPart)
        if not targetPart and Settings.SmartHitbox then
            for _, partName in ipairs(possibleParts) do
                targetPart = player.Character:FindFirstChild(partName)
                if targetPart then
                    break
                end
            end
        end
        
        if not targetPart then
            DelayedPrint("GetClosestTarget: No valid hitbox found for " .. player.Name)
            continue
        end
        
        if CanAttack(player) and IsVisible(targetPart) then
            local screenPos = Camera:WorldToViewportPoint(targetPart.Position)
            local mouseDistance = (Vector2.new(screenPos.X, screenPos.Y) - mousePos).Magnitude
            if mouseDistance <= Settings.FOV then
                table.insert(validTargets, {
                    Player = player,
                    MouseDistance = mouseDistance,
                    Health = humanoid and humanoid.Health or 100,
                    TargetPart = targetPart
                })
            end
        end
    end
    
    table.sort(validTargets, function(a, b)
        if Settings.SortMethod == "Distance" then
            return (Camera.CFrame.Position - a.Player.Character[a.TargetPart.Name].Position).Magnitude <
                   (Camera.CFrame.Position - b.Player.Character[b.TargetPart.Name].Position).Magnitude
        elseif Settings.SortMethod == "Health" then
            return (a.Health or 100) < (b.Health or 100)
        elseif Settings.SortMethod == "Crosshair" then
            return a.MouseDistance < b.MouseDistance
        elseif Settings.SortMethod == "Auto" then
            local aScore = (a.Health or 100) * 0.7 + a.MouseDistance * 0.3
            local bScore = (b.Health or 100) * 0.7 + b.MouseDistance * 0.3
            return aScore < bScore
        end
        return a.MouseDistance < b.MouseDistance
    end)
    
    local target = validTargets[1] and validTargets[1].Player
    local selectedPart = validTargets[1] and validTargets[1].TargetPart
    if target then
        DelayedPrint("Targeting: " .. target.Name .. " (Hitbox: " .. selectedPart.Name .. ", Distance: " .. math.floor(validTargets[1].MouseDistance) .. "px)")
        return target, selectedPart
    end
    DelayedPrint("No valid player target found, checking for NPCs")
    return nil, nil
end

-- Поиск ближайшего NPC
local function GetClosestMob()
    if not Settings.NPCSupport or Settings.SelectedTarget ~= "QuestAI" then
        return nil, nil
    end

    local missions = workspace:FindFirstChild("Missions")
    if not missions then
        DelayedPrint("GetClosestMob: Missions not found")
        return nil, nil
    end

    local mousePos = UserInputService:GetMouseLocation()
    local mobTypes = {
        "Poacher", "Poacher Mage", "Poacher Gunner", "Poacher Rifleman", "Imperial",
        "Imperial Mage", "Nightfall Spitter Spider", "Nightfall Blink Spider"
    }

    for _, mission in pairs(missions:GetChildren()) do
        local aiSpawners = mission:FindFirstChild("AISpawners")
        if aiSpawners then
            for _, spawner in pairs(aiSpawners:GetChildren()) do
                for _, mobType in pairs(mobTypes) do
                    local mob = spawner:FindFirstChild(mobType)
                    if mob and mob.Parent then
                        local humanoid = mob:FindFirstChild("Humanoid")
                        if humanoid and humanoid.Health > 0 then
                            local targetPart = mob:FindFirstChild(Settings.TargetPart) or mob:FindFirstChild("HumanoidRootPart") or mob:FindFirstChild("UpperTorso")
                            if targetPart then
                                local distance = (Camera.CFrame.Position - targetPart.Position).Magnitude
                                if distance <= 400 and not IsInSafezone(targetPart.Position) then
                                    local screenPos = Camera:WorldToViewportPoint(targetPart.Position)
                                    local mouseDistance = (Vector2.new(screenPos.X, screenPos.Y) - mousePos).Magnitude
                                    if mouseDistance <= Settings.FOV and IsVisible(targetPart) then
                                        DelayedPrint("Targeting: " .. mob.Name .. " (Hitbox: " .. targetPart.Name .. ", Distance: " .. math.floor(mouseDistance) .. "px)")
                                        return mob, targetPart
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end

    DelayedPrint("No valid mob target found")
    return nil, nil
end

-- Отправка выстрела через RemoteEvent
local function SilentShot(target, targetPart)
    if not target or not targetPart then
        DelayedPrint("SilentShot: No target or targetPart")
        return
    end

    if not Settings.Enabled then
        DelayedPrint("SilentShot: Silent Aim disabled")
        return
    end
    
    local isPlayer = Players:GetPlayerFromCharacter(target)
    if not isPlayer and not target.Parent then
        DelayedPrint("SilentShot: Target has no parent (invalid NPC)")
        return
    end
    
    local currentTime = tick()
    if currentTime - lastFireTime < Settings.FireDelay then
        DelayedPrint("SilentShot: Fire delay not met (" .. string.format("%.4f", currentTime - lastFireTime) .. " < " .. Settings.FireDelay .. ")")
        return
    end
    
    if math.random(1, 100) > Settings.HitChance then
        DelayedPrint("SilentShot: Hit chance failed (" .. Settings.HitChance .. "%)")
        return
    end
    
    local humanoid = isPlayer and target.Character:FindFirstChild("Humanoid") or target:FindFirstChild("Humanoid")
    if not humanoid then
        DelayedPrint("SilentShot: Humanoid not found for " .. (target.Name or "Unknown"))
        return
    end
    
    local toolListener, pistolConfig = GetToolListener()
    if not toolListener then
        DelayedPrint("SilentShot: ToolListener not found")
        return
    end
    
    local originPosition = Camera.CFrame.Position
    local targetPosition = targetPart.Position
    local direction = (targetPosition - originPosition).Unit
    local hitPosition = targetPosition - direction * 1
    
    local args = {
        [1] = "Activate",
        [2] = originPosition,
        [3] = targetPosition,
        [4] = pistolConfig or game:GetService("Players").LocalPlayer:WaitForChild("PistolConfig"),
        [5] = { hitPosition },
        [6] = {
            [1] = {
                [1] = targetPart,
                [2] = hitPosition,
                [3] = direction,
                [4] = "Humanoid"
            }
        },
        [7] = { humanoid },
        [8] = {}
    }
    
    DelayedPrint("SilentShot: Attempting to fire at " .. (target.Name or "Unknown") .. " (Hitbox: " .. targetPart.Name .. ") with args: " .. tostring(args))
    local success, err = pcall(function()
        toolListener:FireServer(unpack(args))
    end)
    
    if success then
        DelayedPrint("SilentShot: Successfully fired at " .. (target.Name or "Unknown") .. " (" .. targetPart.Name .. ")")
        lastFireTime = currentTime
        Core.GunSilentTarget.CurrentTarget = target.Name
    else
        DelayedPrint("SilentShot: Failed to fire - Error: " .. tostring(err))
    end
end

-- Проверка экипировки инструмента
local function CheckToolEquipped()
    local character = LocalPlayer.Character
    if not character then
        if isToolEquipped then
            isToolEquipped = false
            currentTool = nil
            DelayedPrint("Tool is unequipped (no character)")
        end
        return false
    end

    for _, item in pairs(character:GetChildren()) do
        if item.ClassName == "Tool" then
            if not isToolEquipped then
                isToolEquipped = true
                currentTool = item
                DelayedPrint("Tool " .. (item.Name or "Unknown") .. " is equipped")
            end
            return true
        end
    end

    if isToolEquipped then
        isToolEquipped = false
        currentTool = nil
        DelayedPrint("Tool is unequipped")
    end
    return false
end

-- Обновление списка друзей
local function UpdateFriendsCheck()
    local currentTime = tick()
    if currentTime - lastLogTime >= Settings.LogInterval then
        if Core and Core.Services and Core.Services.FriendsList then
            local count = 0
            local friends = {}
            for name, isFriend in pairs(Core.Services.FriendsList) do
                if isFriend then
                    count = count + 1
                    table.insert(friends, name)
                end
            end
            DelayedPrint("FriendsList check: Valid, Count: " .. tostring(count) .. ", Friends: " .. (#friends > 0 and table.concat(friends, ", ") or "None"))
        else
            DelayedPrint("Error: Core or FriendsList is nil - Core: " .. tostring(Core) .. ", Services: " .. tostring(Core and Core.Services))
        end
        lastLogTime = currentTime
    end
end

-- Инициализация модуля
function Init(ui, core, notification)
    UI = ui
    Core = core
    notify = notification

    DelayedPrint("SilentAim module initializing with Core: " .. tostring(Core))
    if not UI or not Core or not notify then
        DelayedPrint("Warning: UI, Core, or notification is nil during initialization")
        return
    end

    if Core and Core.Services then
        Core.Services.FriendsList = Core.Services.FriendsList or {}
        Cache.FriendsListVersion = Cache.FriendsListVersion + 1
        Cache.PlayerFriendCache = {}
        DelayedPrint("Initialized FriendsList, version: " .. Cache.FriendsListVersion)
    end

    UpdateFriendsCheck()

    UI.TabGroups = UI.TabGroups or { Main = UI.Window:TabGroup() }
    UI.Tabs = UI.Tabs or {}
    UI.Tabs.Combat = UI.TabGroups.Main:Tab({ Name = "Combat", Image = "rbxassetid://4391741881" })

    UI.Sections = UI.Sections or {}
    UI.Sections.SilentAim = UI.Tabs.Combat:Section({ Name = "Silent Aim", Side = "Left" })

    UI.Sections.SilentAim:Header({ Name = "Silent Aim" })

    UI.Sections.SilentAim:Toggle({
        Name = "Enabled",
        Default = Settings.Enabled,
        Callback = function(value)
            Settings.Enabled = value
            fovCircle.Visible = value
            notify("Silent Aim", "Toggled " .. (value and "ON" or "OFF"), false)
        end
    }, "SilentEnabled")

    UI.Sections.SilentAim:Keybind({
        Name = "Toggle Keybind",
        Default = Settings.Keybind,
        Callback = function(key)
            Settings.Keybind = key
            notify("Silent Aim", "Keybind set to: " .. (key and key.Name or "None"), false)
        end
    }, "SilentKeybind")

    UI.Sections.SilentAim:Slider({
        Name = "FOV",
        Minimum = 50,
        Maximum = 500,
        Default = Settings.FOV,
        Precision = 0,
        Suffix = "s",
        Callback = function(value)
            Settings.FOV = value
            fovCircle.Radius = value
            notify("Silent Aim", "FOV set to: " .. value .. " studs", false)
        end
    }, "SilentFOV")

    UI.Sections.SilentAim:Colorpicker({
        Name = "FOV Circle Color",
        Default = Settings.FOVColor,
        Callback = function(value)
            Settings.FOVColor = value
            fovCircle.Color = value
            notify("Silent Aim", "FOV Circle color updated", false)
        end
    }, "SilentFOVColor")

    UI.Sections.SilentAim:Slider({
        Name = "Hit Chance",
        Minimum = 0,
        Maximum = 100,
        Default = Settings.HitChance,
        Precision = 0,
        Suffix = "%",
        Callback = function(value)
            Settings.HitChance = value
            notify("Silent Aim", "Hit Chance set to: " .. value .. "%", false)
        end
    }, "SilentHitChance")

    UI.Sections.SilentAim:Dropdown({
        Name = "Target Part",
        Options = {"Head", "Torso", "LeftLeg", "RightLeg", "RightUpperLeg"},
        Default = Settings.TargetPart,
        MultiSelection = false,
        Callback = function(value)
            Settings.TargetPart = value
            notify("Silent Aim", "Target Part set to: " .. value, false)
        end
    }, "SilentTargetPart")

    UI.Sections.SilentAim:Toggle({
        Name = "Smart Hitbox",
        Default = Settings.SmartHitbox,
        Callback = function(value)
            Settings.SmartHitbox = value
            notify("Silent Aim", "Smart Hitbox " .. (value and "ON" or "OFF"), false)
        end
    }, "SilentSmartHitbox")

    UI.Sections.SilentAim:Toggle({
        Name = "Team Check",
        Default = Settings.TeamCheck,
        Callback = function(value)
            Settings.TeamCheck = value
            notify("Silent Aim", "Team Check " .. (value and "ON" or "OFF"), false)
        end
    }, "SilentTeamCheck")

    UI.Sections.SilentAim:Toggle({
        Name = "Visibility Check",
        Default = Settings.VisibilityCheck,
        Callback = function(value)
            Settings.VisibilityCheck = value
            notify("Silent Aim", "Visibility Check " .. (value and "ON" or "OFF"), false)
        end
    }, "SilentVisibilityCheck")

    UI.Sections.SilentAim:Slider({
        Name = "Distance Limit",
        Minimum = 50,
        Maximum = 1000,
        Default = Settings.DistanceLimit,
        Precision = 0,
        Suffix = "s",
        Callback = function(value)
            Settings.DistanceLimit = value
            notify("Silent Aim", "Distance Limit set to: " .. value .. " studs", false)
        end
    }, "SilentDistanceLimit")

    UI.Sections.SilentAim:Slider({
        Name = "Fire Delay",
        Minimum = 0.001,
        Maximum = 2,
        Default = Settings.FireDelay,
        Precision = 2,
        Suffix = "s",
        Callback = function(value)
            Settings.FireDelay = value
            notify("Silent Aim", "Fire Delay set to: " .. value .. "s", false)
        end
    }, "SilentFireDelay")

    UI.Sections.SilentAim:Dropdown({
        Name = "Sort Method",
        Options = {"Distance", "Health", "Crosshair", "Auto"},
        Default = Settings.SortMethod,
        MultiSelection = false,
        Callback = function(value)
            Settings.SortMethod = value
            notify("Silent Aim", "Sort Method set to: " .. value, false)
        end
    }, "SilentSortMethod")

    UI.Sections.SilentAim:Toggle({
        Name = "NPC Support",
        Default = Settings.NPCSupport,
        Callback = function(value)
            Settings.NPCSupport = value
            notify("Silent Aim", "NPC Support " .. (value and "ON" or "OFF"), false)
        end
    }, "SilentNPCSupport")

    UI.Sections.SilentAim:Dropdown({
        Name = "Entities",
        Options = {"QuestAI"},
        Default = Settings.SelectedTarget,
        MultiSelection = false,
        Callback = function(value)
            Settings.SelectedTarget = value
            notify("Silent Aim", "Selected Target set to: " .. value, false)
        end
    }, "SilentEntities")

    if Core and Core.Services then
        local lastFriendsList = Core.Services.FriendsList
        RunService.Heartbeat:Connect(function()
            if Core.Services.FriendsList ~= lastFriendsList then
                Cache.FriendsListVersion = Cache.FriendsListVersion + 1
                Cache.PlayerFriendCache = {}
                lastFriendsList = Core.Services.FriendsList
                DelayedPrint("FriendsList updated, resetting cache, new version: " .. Cache.FriendsListVersion)
            end
        end)
    end

    UserInputService.InputBegan:Connect(function(input)
        if Settings.Keybind and input.KeyCode == Settings.Keybind then
            Settings.Enabled = not Settings.Enabled
            fovCircle.Visible = Settings.Enabled
            notify("Silent Aim", "Toggled " .. (Settings.Enabled and "ON" or "OFF"), false)
        end
    end)

    DelayedPrint("SilentAim module initialized successfully")
end

-- Обновление FOV Circle и логика Silent Aim
RunService.RenderStepped:Connect(function()
    if not UI or not Core then
        DelayedPrint("Warning: UI or Core is nil during RenderStepped")
        return
    end

    local mousePos = UserInputService:GetMouseLocation()
    fovCircle.Position = Vector2.new(mousePos.X, mousePos.Y)

    if not CheckToolEquipped() then
        currentTarget = nil
        Core.GunSilentTarget.CurrentTarget = nil
        return
    end

    UpdateFriendsCheck()

    local target, targetPart = GetClosestTarget()
    if not target and Settings.NPCSupport then
        target, targetPart = GetClosestMob()
        if target then
            DelayedPrint("Switched to NPC target: " .. target.Name)
        end
    end
    currentTarget = target
    
    if target and targetPart then
        SilentShot(target, targetPart)
    else
        Core.GunSilentTarget.CurrentTarget = nil
    end
end)

-- Очистка при телепортации
game:GetService("Players").LocalPlayer.OnTeleport:Connect(function()
    fovCircle:Remove()
end)

return {
    Init = Init
}
