local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local CoreGui = game:GetService("CoreGui")
local Workspace = game:GetService("Workspace")

local Core = nil
local UI = nil
local notify = nil

-- Конфигурация VisualsInfo
local Settings = {
    Enabled = true,
    barSegments = 12,
    LineScale = 0.2,
    Scale = 0.8,
    HudSize = Vector2.new(225, 90),
    HudPosition = UDim2.new(0, 400, 0, 250),
    HudBackgroundColor = Color3.fromRGB(20, 30, 50),
    HudBackgroundTransparency = 0.3,
    HudGradientStart = Color3.fromRGB(20, 30, 50),
    HudGradientEnd = Color3.fromRGB(40, 60, 100),
    ImageAssetId = "rbxassetid://2030338156",
    ImageSize = Vector2.new(20, 20),
    ImageBackgroundColor = Color3.fromRGB(10, 20, 30),
    ImageBackgroundTransparency = 0.5,
    ImageBackgroundSize = Vector2.new(225, 30),
    ShieldBarSize = Vector2.new(150, 15),
    ShieldBarPosition = UDim2.new(0, 10, 0, 30),
    SecondShieldBarPosition = UDim2.new(0, 10, 0, 50),
    TimerSize = Vector2.new(35, 15),
    TimerOffset = 5,
    PlayerNameSize = Vector2.new(150, 15),
    PlayerNamePosition = UDim2.new(0, (225 - 150) / 2, 0, 70),
    TextColor = Color3.fromRGB(200, 200, 200),
    TextSize = 15,
    StatusIndicatorSize = Vector2.new(10, 10),
    StatusIndicatorPosition = UDim2.new(1, -15, 1, -15),
    shieldDuration = 3.95,
    DelayedPizda = 0,
    positionTolerance = 5,
    detectionRadius = 150,
    cornerRadius = 10,
    elementCornerRadius = 5
}

-- Состояние модуля
local State = {
    IsShieldActive = false,
    IsSecondShieldActive = false,
    ShieldTimerConnection = nil,
    SecondShieldTimerConnection = nil,
    Dragging = false,
    DragStart = nil,
    StartPos = nil,
    LastPosition = Settings.HudPosition,
    DragConnection = nil
}

-- Элементы интерфейса
local Elements = {}

-- Вспомогательная функция для интерполяции цветов
local function lerpColor(color1, color2, t)
    return Color3.new(
        color1.R + (color2.R - color1.R) * t,
        color1.G + (color2.G - color1.G) * t,
        color1.B + (color2.B - color1.B) * t
    )
end

-- Инициализация элементов интерфейса
local function initElements()
    local currentPosition = State.LastPosition

    for _, element in pairs(Elements) do
        if typeof(element) == "Instance" then
            pcall(function() element:Destroy() end)
        elseif type(element) == "table" then
            for _, subElement in ipairs(element) do
                pcall(function() subElement:Destroy() end)
            end
        end
    end
    table.clear(Elements)

    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "VisualsInfoGui"
    screenGui.ResetOnSpawn = false
    screenGui.IgnoreGuiInset = true
    screenGui.Parent = CoreGui
    Elements.ScreenGui = screenGui

    local mainFrame = Instance.new("Frame")
    mainFrame.Size = UDim2.new(0, Settings.HudSize.X * Settings.Scale, 0, Settings.HudSize.Y * Settings.Scale)
    mainFrame.Position = UDim2.new(0, currentPosition.X.Offset * Settings.Scale, 0, currentPosition.Y.Offset * Settings.Scale)
    mainFrame.BackgroundColor3 = Settings.HudBackgroundColor
    mainFrame.BackgroundTransparency = Settings.HudBackgroundTransparency
    mainFrame.BorderSizePixel = 0
    mainFrame.Visible = Settings.Enabled
    mainFrame.Active = true
    mainFrame.Parent = screenGui
    Elements.MainFrame = mainFrame

    local hudCorner = Instance.new("UICorner")
    hudCorner.CornerRadius = UDim.new(0, Settings.cornerRadius * Settings.Scale)
    hudCorner.Parent = mainFrame

    local hudGradient = Instance.new("UIGradient")
    hudGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Settings.HudGradientStart),
        ColorSequenceKeypoint.new(1, Settings.HudGradientEnd)
    })
    hudGradient.Rotation = 45
    hudGradient.Parent = mainFrame

    local hudStroke = Instance.new("UIStroke")
    hudStroke.Color = Color3.fromRGB(0, 0, 0)
    hudStroke.Thickness = 2
    hudStroke.Transparency = 0.5
    hudStroke.Parent = mainFrame

    local imageBackground = Instance.new("Frame")
    imageBackground.Size = UDim2.new(0, Settings.ImageBackgroundSize.X * Settings.Scale, 0, Settings.ImageBackgroundSize.Y * Settings.Scale)
    imageBackground.Position = UDim2.new(0.5, (-Settings.ImageBackgroundSize.X / 2) * Settings.Scale, 0, 0)
    imageBackground.BackgroundColor3 = Settings.ImageBackgroundColor
    imageBackground.BackgroundTransparency = Settings.ImageBackgroundTransparency
    imageBackground.BorderSizePixel = 0
    imageBackground.Parent = mainFrame
    Elements.ImageBackground = imageBackground

    local imageBackgroundCorner = Instance.new("UICorner")
    imageBackgroundCorner.CornerRadius = UDim.new(0, Settings.elementCornerRadius * Settings.Scale)
    imageBackgroundCorner.Parent = imageBackground

    local imageLabel = Instance.new("ImageLabel")
    imageLabel.Size = UDim2.new(0, Settings.ImageSize.X * Settings.Scale, 0, Settings.ImageSize.Y * Settings.Scale)
    imageLabel.Position = UDim2.new(0.5, (-Settings.ImageSize.X / 2) * Settings.Scale, 0, 5 * Settings.Scale)
    imageLabel.BackgroundTransparency = 1
    imageLabel.Image = Settings.ImageAssetId
    imageLabel.ImageColor3 = Settings.TextColor
    imageLabel.Parent = mainFrame
    Elements.ImageLabel = imageLabel

    local shieldBackground = Instance.new("Frame")
    shieldBackground.Size = UDim2.new(0, Settings.ShieldBarSize.X * Settings.Scale, 0, Settings.ShieldBarSize.Y * Settings.Scale)
    shieldBackground.Position = UDim2.new(0, Settings.ShieldBarPosition.X.Offset * Settings.Scale, 0, Settings.ShieldBarPosition.Y.Offset * Settings.Scale)
    shieldBackground.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    shieldBackground.BackgroundTransparency = 0.5
    shieldBackground.BorderSizePixel = 0
    shieldBackground.Parent = mainFrame
    Elements.ShieldBackground = shieldBackground

    local shieldBackgroundCorner = Instance.new("UICorner")
    shieldBackgroundCorner.CornerRadius = UDim.new(0, Settings.elementCornerRadius * Settings.Scale)
    shieldBackgroundCorner.Parent = shieldBackground

    local shieldBarContainer = Instance.new("Frame")
    shieldBarContainer.Size = UDim2.new(1, 0, 1, 0)
    shieldBarContainer.BackgroundTransparency = 1
    shieldBarContainer.Parent = shieldBackground
    Elements.ShieldBarContainer = shieldBarContainer

    local timerBackground = Instance.new("Frame")
    timerBackground.Size = UDim2.new(0, Settings.TimerSize.X * Settings.Scale, 0, Settings.TimerSize.Y * Settings.Scale)
    timerBackground.Position = UDim2.new(0, (Settings.ShieldBarSize.X + Settings.TimerOffset) * Settings.Scale, 0, 0)
    timerBackground.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    timerBackground.BackgroundTransparency = 0.5
    timerBackground.BorderSizePixel = 0
    timerBackground.Parent = shieldBackground
    Elements.TimerBackground = timerBackground

    local timerBackgroundCorner = Instance.new("UICorner")
    timerBackgroundCorner.CornerRadius = UDim.new(0, Settings.elementCornerRadius * Settings.Scale)
    timerBackgroundCorner.Parent = timerBackground

    local timerText = Instance.new("TextLabel")
    timerText.Size = UDim2.new(1, 0, 1, 0)
    timerText.BackgroundTransparency = 1
    timerText.Text = "-"
    timerText.TextColor3 = Settings.TextColor
    timerText.TextSize = Settings.TextSize * Settings.Scale
    timerText.Font = Enum.Font.SourceSans
    timerText.TextStrokeTransparency = 1
    timerText.Parent = timerBackground
    Elements.TimerText = timerText

    local secondShieldBackground = Instance.new("Frame")
    secondShieldBackground.Size = UDim2.new(0, Settings.ShieldBarSize.X * Settings.Scale, 0, Settings.ShieldBarSize.Y * Settings.Scale)
    secondShieldBackground.Position = UDim2.new(0, Settings.SecondShieldBarPosition.X.Offset * Settings.Scale, 0, Settings.SecondShieldBarPosition.Y.Offset * Settings.Scale)
    secondShieldBackground.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    secondShieldBackground.BackgroundTransparency = 0.5
    secondShieldBackground.BorderSizePixel = 0
    secondShieldBackground.Parent = mainFrame
    Elements.SecondShieldBackground = secondShieldBackground

    local secondShieldBackgroundCorner = Instance.new("UICorner")
    secondShieldBackgroundCorner.CornerRadius = UDim.new(0, Settings.elementCornerRadius * Settings.Scale)
    secondShieldBackgroundCorner.Parent = secondShieldBackground

    local secondShieldBarContainer = Instance.new("Frame")
    secondShieldBarContainer.Size = UDim2.new(1, 0, 1, 0)
    secondShieldBarContainer.BackgroundTransparency = 1
    secondShieldBarContainer.Parent = secondShieldBackground
    Elements.SecondShieldBarContainer = secondShieldBarContainer

    local secondTimerBackground = Instance.new("Frame")
    secondTimerBackground.Size = UDim2.new(0, Settings.TimerSize.X * Settings.Scale, 0, Settings.TimerSize.Y * Settings.Scale)
    secondTimerBackground.Position = UDim2.new(0, (Settings.ShieldBarSize.X + Settings.TimerOffset) * Settings.Scale, 0, 0)
    secondTimerBackground.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    secondTimerBackground.BackgroundTransparency = 0.5
    secondTimerBackground.BorderSizePixel = 0
    secondTimerBackground.Parent = secondShieldBackground
    Elements.SecondTimerBackground = secondTimerBackground

    local secondTimerBackgroundCorner = Instance.new("UICorner")
    secondTimerBackgroundCorner.CornerRadius = UDim.new(0, Settings.elementCornerRadius * Settings.Scale)
    secondTimerBackgroundCorner.Parent = secondTimerBackground

    local secondTimerText = Instance.new("TextLabel")
    secondTimerText.Size = UDim2.new(1, 0, 1, 0)
    secondTimerText.BackgroundTransparency = 1
    secondTimerText.Text = "-"
    secondTimerText.TextColor3 = Settings.TextColor
    secondTimerText.TextSize = Settings.TextSize * Settings.Scale
    secondTimerText.Font = Enum.Font.SourceSans
    secondTimerText.TextStrokeTransparency = 1
    secondTimerText.Parent = secondTimerBackground
    Elements.SecondTimerText = secondTimerText

    local playerNameBackground = Instance.new("Frame")
    playerNameBackground.Size = UDim2.new(0, Settings.PlayerNameSize.X * Settings.Scale, 0, Settings.PlayerNameSize.Y * Settings.Scale)
    playerNameBackground.Position = UDim2.new(0, Settings.PlayerNamePosition.X.Offset * Settings.Scale, 0, Settings.PlayerNamePosition.Y.Offset * Settings.Scale)
    playerNameBackground.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    playerNameBackground.BackgroundTransparency = 0.5
    playerNameBackground.BorderSizePixel = 0
    playerNameBackground.Parent = mainFrame
    Elements.PlayerNameBackground = playerNameBackground

    local playerNameBackgroundCorner = Instance.new("UICorner")
    playerNameBackgroundCorner.CornerRadius = UDim.new(0, Settings.elementCornerRadius * Settings.Scale)
    playerNameBackgroundCorner.Parent = playerNameBackground

    local playerNameText = Instance.new("TextLabel")
    playerNameText.Size = UDim2.new(1, 0, 1, 0)
    playerNameText.BackgroundTransparency = 1
    playerNameText.Text = "-"
    playerNameText.TextColor3 = Settings.TextColor
    playerNameText.TextSize = Settings.TextSize * Settings.Scale
    playerNameText.Font = Enum.Font.SourceSans
    playerNameText.TextStrokeTransparency = 1
    playerNameText.Parent = playerNameBackground
    Elements.PlayerNameText = playerNameText

    local statusIndicator = Instance.new("Frame")
    statusIndicator.Size = UDim2.new(0, Settings.StatusIndicatorSize.X * Settings.Scale, 0, Settings.StatusIndicatorSize.Y * Settings.Scale)
    statusIndicator.Position = UDim2.new(Settings.StatusIndicatorPosition.X.Scale, Settings.StatusIndicatorPosition.X.Offset * Settings.Scale, Settings.StatusIndicatorPosition.Y.Scale, Settings.StatusIndicatorPosition.Y.Offset * Settings.Scale)
    statusIndicator.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    statusIndicator.BackgroundTransparency = 0
    statusIndicator.BorderSizePixel = 0
    statusIndicator.Parent = mainFrame
    Elements.StatusIndicator = statusIndicator

    local statusCorner = Instance.new("UICorner")
    statusCorner.CornerRadius = UDim.new(1, 0)
    statusCorner.Parent = statusIndicator

    Elements.ShieldBarLines = {}
    Elements.SecondShieldBarLines = {}
    local numLines = math.ceil(Settings.barSegments / Settings.LineScale)
    local lineWidth = 1 / numLines
    for i = 1, numLines do
        local line = Instance.new("Frame")
        line.Size = UDim2.new(lineWidth, 0, 1, 0)
        line.Position = UDim2.new((i - 1) * lineWidth, 0, 0, 0)
        line.BackgroundTransparency = 1
        line.BorderSizePixel = 0
        line.Parent = shieldBarContainer
        table.insert(Elements.ShieldBarLines, line)

        local secondLine = Instance.new("Frame")
        secondLine.Size = UDim2.new(lineWidth, 0, 1, 0)
        secondLine.Position = UDim2.new((i - 1) * lineWidth, 0, 0, 0)
        secondLine.BackgroundTransparency = 1
        secondLine.BorderSizePixel = 0
        secondLine.Parent = secondShieldBarContainer
        table.insert(Elements.SecondShieldBarLines, secondLine)
    end
end

-- Анимация появления
local function animateAppearance()
    if not Elements.MainFrame then return end
    local scale = Settings.Scale
    Elements.MainFrame.Position = UDim2.new(0, State.LastPosition.X.Offset * scale, 0, (State.LastPosition.Y.Offset - 50) * scale)
    local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    TweenService:Create(Elements.MainFrame, tweenInfo, {Position = UDim2.new(0, State.LastPosition.X.Offset * scale, 0, State.LastPosition.Y.Offset * scale)}):Play()
end

-- Обновление прогресс-бара первого щита
local function updateShieldBar(progress)
    if not Settings.Enabled or not State.IsShieldActive then
        for _, line in ipairs(Elements.ShieldBarLines or {}) do
            line.BackgroundTransparency = 1
        end
        return
    end
    local numLines = math.ceil(Settings.barSegments / Settings.LineScale)
    for i, line in ipairs(Elements.ShieldBarLines or {}) do
        local t = (i - 1) / numLines
        if t <= progress then
            line.BackgroundTransparency = 0
            local colorProgress = (progress + t) % 1
            local color1 = Core and Core.GradientColors and Core.GradientColors.Color1.Value or Color3.fromRGB(0, 0, 255)
            local color2 = Core and Core.GradientColors and Core.GradientColors.Color2.Value or Color3.fromRGB(173, 216, 230)
            line.BackgroundColor3 = colorProgress < 0.5 and lerpColor(color1, color2, colorProgress * 2) or lerpColor(color2, color1, (colorProgress - 0.5) * 2)
        else
            line.BackgroundTransparency = 1
        end
    end
end

-- Обновление прогресс-бара второго щита
local function updateSecondShieldBar(progress)
    if not Settings.Enabled or not State.IsSecondShieldActive then
        for _, line in ipairs(Elements.SecondShieldBarLines or {}) do
            line.BackgroundTransparency = 1
        end
        return
    end
    local numLines = math.ceil(Settings.barSegments / Settings.LineScale)
    for i, line in ipairs(Elements.SecondShieldBarLines or {}) do
        local t = (i - 1) / numLines
        if t <= progress then
            line.BackgroundTransparency = 0
            local colorProgress = (progress + t) % 1
            local color1 = Core and Core.GradientColors and Core.GradientColors.Color1.Value or Color3.fromRGB(0, 0, 255)
            local color2 = Core and Core.GradientColors and Core.GradientColors.Color2.Value or Color3.fromRGB(173, 216, 230)
            line.BackgroundColor3 = colorProgress < 0.5 and lerpColor(color1, color2, colorProgress * 2) or lerpColor(color2, color1, (colorProgress - 0.5) * 2)
        else
            line.BackgroundTransparency = 1
        end
    end
end

-- Обновление статусного индикатора
local function updateStatusIndicator()
    if not Elements.StatusIndicator then return end
    Elements.StatusIndicator.BackgroundColor3 = (State.IsShieldActive or State.IsSecondShieldActive) and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
end

-- Таймеры для щитов
local function startShieldTimer()
    if not Settings.Enabled then return end
    if State.ShieldTimerConnection then
        State.ShieldTimerConnection:Disconnect()
        State.ShieldTimerConnection = nil
    end
    local startTime = tick()
    State.IsShieldActive = true
    State.ShieldTimerConnection = RunService.RenderStepped:Connect(function()
        if not Settings.Enabled then
            if State.ShieldTimerConnection then
                State.ShieldTimerConnection:Disconnect()
                State.ShieldTimerConnection = nil
            end
            State.IsShieldActive = false
            for _, line in ipairs(Elements.ShieldBarLines or {}) do
                line.BackgroundTransparency = 1
            end
            if Elements.TimerText then
                Elements.TimerText.Text = "-"
            end
            if not State.IsSecondShieldActive and Elements.PlayerNameText then
                Elements.PlayerNameText.Text = "-"
            end
            return
        end
        local elapsed = tick() - startTime
        local progress = elapsed / Settings.shieldDuration
        if Elements.TimerText then
            Elements.TimerText.Text = string.format("%.2f", math.max(0, Settings.shieldDuration - elapsed))
        end
        if progress >= 1 then
            progress = 1
            if State.ShieldTimerConnection then
                State.ShieldTimerConnection:Disconnect()
                State.ShieldTimerConnection = nil
            end
            State.IsShieldActive = false
            delay(Settings.DelayedPizda, function()
                for _, line in ipairs(Elements.ShieldBarLines or {}) do
                    line.BackgroundTransparency = 1
                end
                if Elements.TimerText then
                    Elements.TimerText.Text = "-"
                end
                if not State.IsSecondShieldActive and Elements.PlayerNameText then
                    Elements.PlayerNameText.Text = "-"
                end
            end)
        end
        updateShieldBar(progress)
        updateStatusIndicator()
    end)
end

local function startSecondShieldTimer()
    if not Settings.Enabled then return end
    if State.SecondShieldTimerConnection then
        State.SecondShieldTimerConnection:Disconnect()
        State.SecondShieldTimerConnection = nil
    end
    local startTime = tick()
    State.IsSecondShieldActive = true
    State.SecondShieldTimerConnection = RunService.RenderStepped:Connect(function()
        if not Settings.Enabled then
            if State.SecondShieldTimerConnection then
                State.SecondShieldTimerConnection:Disconnect()
                State.SecondShieldTimerConnection = nil
            end
            State.IsSecondShieldActive = false
            for _, line in ipairs(Elements.SecondShieldBarLines or {}) do
                line.BackgroundTransparency = 1
            end
            if Elements.SecondTimerText then
                Elements.SecondTimerText.Text = "-"
            end
            if not State.IsShieldActive and Elements.PlayerNameText then
                Elements.PlayerNameText.Text = "-"
            end
            return
        end
        local elapsed = tick() - startTime
        local progress = elapsed / Settings.shieldDuration
        if Elements.SecondTimerText then
            Elements.SecondTimerText.Text = string.format("%.2f", math.max(0, Settings.shieldDuration - elapsed))
        end
        if progress >= 1 then
            progress = 1
            if State.SecondShieldTimerConnection then
                State.SecondShieldTimerConnection:Disconnect()
                State.SecondShieldTimerConnection = nil
            end
            State.IsSecondShieldActive = false
            delay(Settings.DelayedPizda, function()
                for _, line in ipairs(Elements.SecondShieldBarLines or {}) do
                    line.BackgroundTransparency = 1
                end
                if Elements.SecondTimerText then
                    Elements.SecondTimerText.Text = "-"
                end
                if not State.IsShieldActive and Elements.PlayerNameText then
                    Elements.PlayerNameText.Text = "-"
                end
            end)
        end
        updateSecondShieldBar(progress)
        updateStatusIndicator()
    end)
end

-- Управление видимостью
local function startVisualsInfo()
    if not Settings.Enabled then
        if Elements.ScreenGui then
            Elements.ScreenGui.Enabled = false
        end
        return
    end
    if Elements.ScreenGui then
        Elements.ScreenGui.Enabled = true
    end
end

-- Перетаскивание интерфейса
local function setupDragging()
    local mainFrame = Elements.MainFrame
    if not mainFrame then return end

    if State.DragConnection then
        State.DragConnection:Disconnect()
        State.DragConnection = nil
    end

    mainFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            State.Dragging = true
            State.DragStart = UserInputService:GetMouseLocation()
            State.StartPos = Vector2.new(State.LastPosition.X.Offset, State.LastPosition.Y.Offset)
        end
    end)

    State.DragConnection = UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement and State.Dragging then
            local mousePos = UserInputService:GetMouseLocation()
            local delta = mousePos - State.DragStart
            State.LastPosition = UDim2.new(0, State.StartPos.X + delta.X, 0, State.StartPos.Y + delta.Y)
            mainFrame.Position = UDim2.new(0, State.LastPosition.X.Offset * Settings.Scale, 0, State.LastPosition.Y.Offset * Settings.Scale)
        end
    end)

    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            State.Dragging = false
        end
    end)
end

-- Детекция щитов
local function isLocalPlayerShield(part)
    local playerPos = Players.LocalPlayer.Character and Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and Players.LocalPlayer.Character.HumanoidRootPart.Position
    return playerPos and (playerPos - part.Position).Magnitude <= Settings.positionTolerance
end

local function findNearestPlayerToShield(shieldPos)
    local nearestPlayer, nearestDistance = nil, Settings.detectionRadius
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= Players.LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local distance = (shieldPos - player.Character.HumanoidRootPart.Position).Magnitude
            if distance < nearestDistance then
                nearestPlayer, nearestDistance = player, distance
            end
        end
    end
    return nearestPlayer
end

if Workspace:FindFirstChild("Entities") then
    Workspace.Entities.ChildAdded:Connect(function(child)
        if Settings.Enabled and child:IsA("Part") and child.Name == "ProtectionBubble" then
            if isLocalPlayerShield(child) then
                startShieldTimer()
                if Elements.PlayerNameText then
                    Elements.PlayerNameText.Text = Players.LocalPlayer.Name
                end
            else
                local nearestPlayer = findNearestPlayerToShield(child.Position)
                if nearestPlayer and Elements.PlayerNameText then
                    Elements.PlayerNameText.Text = nearestPlayer.Name
                    startSecondShieldTimer()
                end
            end
        end
    end)
else
    warn("[VisualsInfo] Workspace.Entities not found. Shield detection disabled.")
end

-- Инициализация модуля
function Init(ui, core, notification)
    UI = ui
    Core = core
    notify = notification

    if not UI or not Core or not notify then
        return
    end

    initElements()
    setupDragging()
    animateAppearance()

    UI.Sections = UI.Sections or {}
    UI.Sections.ShieldInfo = UI.Tabs.Visuals:Section({ Name = "ShieldInfo", Side = "Left" })

    UI.Sections.ShieldInfo:Header({ Name = "Shield Info" })

    UI.Sections.ShieldInfo:Toggle({
        Name = "Enabled",
        Default = Settings.Enabled,
        Callback = function(value)
            Settings.Enabled = value
            startVisualsInfo()
            notify("Shield Info", "Toggled " .. (value and "ON" or "OFF"), false)
        end
    }, "ShieldInfoEnabled")

    UI.Sections.ShieldInfo:Slider({
        Name = "Bar Segments",
        Minimum = 1,
        Maximum = 20,
        Default = Settings.barSegments,
        Precision = 0,
        Suffix = "segments",
        Callback = function(value)
            Settings.barSegments = value
            initElements()
            setupDragging()
            Elements.MainFrame.Position = UDim2.new(0, State.LastPosition.X.Offset * Settings.Scale, 0, State.LastPosition.Y.Offset * Settings.Scale)
            notify("Shield Info", "Bar Segments set to: " .. value .. " segments", false)
        end
    }, "ShieldInfoBarSegments")

    UI.Sections.ShieldInfo:Slider({
        Name = "Line Scale",
        Minimum = 0.05,
        Maximum = 0.5,
        Default = Settings.LineScale,
        Precision = 2,
        Suffix = "",
        Callback = function(value)
            Settings.LineScale = value
            initElements()
            setupDragging()
            Elements.MainFrame.Position = UDim2.new(0, State.LastPosition.X.Offset * Settings.Scale, 0, State.LastPosition.Y.Offset * Settings.Scale)
            notify("Shield Info", "Line Scale set to: " .. value, false)
        end
    }, "ShieldInfoLineScale")

    UI.Sections.ShieldInfo:Slider({
        Name = "Scale",
        Minimum = 0.5,
        Maximum = 2,
        Default = Settings.Scale,
        Precision = 2,
        Suffix = "",
        Callback = function(value)
            Settings.Scale = value
            Elements.MainFrame.Size = UDim2.new(0, Settings.HudSize.X * value, 0, Settings.HudSize.Y * value)
            Elements.MainFrame.Position = UDim2.new(0, State.LastPosition.X.Offset * value, 0, State.LastPosition.Y.Offset * value)
            local hudCorner = Elements.MainFrame:FindFirstChildOfClass("UICorner")
            if hudCorner then
                hudCorner.CornerRadius = UDim.new(0, Settings.cornerRadius * value)
            end
            Elements.ImageBackground.Size = UDim2.new(0, Settings.ImageBackgroundSize.X * value, 0, Settings.ImageBackgroundSize.Y * value)
            Elements.ImageBackground.Position = UDim2.new(0.5, (-Settings.ImageBackgroundSize.X / 2) * value, 0, 0)
            local imageBackgroundCorner = Elements.ImageBackground:FindFirstChildOfClass("UICorner")
            if imageBackgroundCorner then
                imageBackgroundCorner.CornerRadius = UDim.new(0, Settings.elementCornerRadius * value)
            end
            Elements.ImageLabel.Size = UDim2.new(0, Settings.ImageSize.X * value, 0, Settings.ImageSize.Y * value)
            Elements.ImageLabel.Position = UDim2.new(0.5, (-Settings.ImageSize.X / 2) * value, 0, 5 * value)
            Elements.ShieldBackground.Size = UDim2.new(0, Settings.ShieldBarSize.X * value, 0, Settings.ShieldBarSize.Y * value)
            Elements.ShieldBackground.Position = UDim2.new(0, Settings.ShieldBarPosition.X.Offset * value, 0, Settings.ShieldBarPosition.Y.Offset * value)
            local shieldBackgroundCorner = Elements.ShieldBackground:FindFirstChildOfClass("UICorner")
            if shieldBackgroundCorner then
                shieldBackgroundCorner.CornerRadius = UDim.new(0, Settings.elementCornerRadius * value)
            end
            Elements.TimerBackground.Size = UDim2.new(0, Settings.TimerSize.X * value, 0, Settings.TimerSize.Y * value)
            Elements.TimerBackground.Position = UDim2.new(0, (Settings.ShieldBarSize.X + Settings.TimerOffset) * value, 0, 0)
            local timerBackgroundCorner = Elements.TimerBackground:FindFirstChildOfClass("UICorner")
            if timerBackgroundCorner then
                timerBackgroundCorner.CornerRadius = UDim.new(0, Settings.elementCornerRadius * value)
            end
            Elements.TimerText.TextSize = Settings.TextSize * value
            Elements.SecondShieldBackground.Size = UDim2.new(0, Settings.ShieldBarSize.X * value, 0, Settings.ShieldBarSize.Y * value)
            Elements.SecondShieldBackground.Position = UDim2.new(0, Settings.SecondShieldBarPosition.X.Offset * value, 0, Settings.SecondShieldBarPosition.Y.Offset * value)
            local secondShieldBackgroundCorner = Elements.SecondShieldBackground:FindFirstChildOfClass("UICorner")
            if secondShieldBackgroundCorner then
                secondShieldBackgroundCorner.CornerRadius = UDim.new(0, Settings.elementCornerRadius * value)
            end
            Elements.SecondTimerBackground.Size = UDim2.new(0, Settings.TimerSize.X * value, 0, Settings.TimerSize.Y * value)
            Elements.SecondTimerBackground.Position = UDim2.new(0, (Settings.ShieldBarSize.X + Settings.TimerOffset) * value, 0, 0)
            local secondTimerBackgroundCorner = Elements.SecondTimerBackground:FindFirstChildOfClass("UICorner")
            if secondTimerBackgroundCorner then
                secondTimerBackgroundCorner.CornerRadius = UDim.new(0, Settings.elementCornerRadius * value)
            end
            Elements.SecondTimerText.TextSize = Settings.TextSize * value
            Elements.PlayerNameBackground.Size = UDim2.new(0, Settings.PlayerNameSize.X * value, 0, Settings.PlayerNameSize.Y * value)
            Elements.PlayerNameBackground.Position = UDim2.new(0, Settings.PlayerNamePosition.X.Offset * value, 0, Settings.PlayerNamePosition.Y.Offset * value)
            local playerNameBackgroundCorner = Elements.PlayerNameBackground:FindFirstChildOfClass("UICorner")
            if playerNameBackgroundCorner then
                playerNameBackgroundCorner.CornerRadius = UDim.new(0, Settings.elementCornerRadius * value)
            end
            Elements.PlayerNameText.TextSize = Settings.TextSize * value
            Elements.StatusIndicator.Size = UDim2.new(0, Settings.StatusIndicatorSize.X * value, 0, Settings.StatusIndicatorSize.Y * value)
            Elements.StatusIndicator.Position = UDim2.new(Settings.StatusIndicatorPosition.X.Scale, Settings.StatusIndicatorPosition.X.Offset * value, Settings.StatusIndicatorPosition.Y.Scale, Settings.StatusIndicatorPosition.Y.Offset * value)
            local numLines = math.ceil(Settings.barSegments / Settings.LineScale)
            local lineWidth = 1 / numLines
            for i, line in ipairs(Elements.ShieldBarLines or {}) do
                if i <= numLines then
                    line.Size = UDim2.new(lineWidth, 0, 1, 0)
                    line.Position = UDim2.new((i - 1) * lineWidth, 0, 0, 0)
                else
                    line:Destroy()
                end
            end
            for i, line in ipairs(Elements.SecondShieldBarLines or {}) do
                if i <= numLines then
                    line.Size = UDim2.new(lineWidth, 0, 1, 0)
                    line.Position = UDim2.new((i - 1) * lineWidth, 0, 0, 0)
                else
                    line:Destroy()
                end
            end
            notify("Shield Info", "Scale set to: " .. value, false)
        end
    }, "ShieldInfoScale")

    RunService.RenderStepped:Connect(function()
        startVisualsInfo()
        updateStatusIndicator()
    end)

    startShieldTimer()
    if Elements.PlayerNameText then
        Elements.PlayerNameText.Text = Players.LocalPlayer.Name
    end
end

-- Очистка при телепортации
game:GetService("Players").LocalPlayer.OnTeleport:Connect(function()
    if Elements.ScreenGui then
        Elements.ScreenGui:Destroy()
    end
    if State.ShieldTimerConnection then
        State.ShieldTimerConnection:Disconnect()
    end
    if State.SecondShieldTimerConnection then
        State.SecondShieldTimerConnection:Disconnect()
    end
    if State.DragConnection then
        State.DragConnection:Disconnect()
    end
end)

return {
    Init = Init
}
