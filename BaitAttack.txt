local BaitAttack = {}

function BaitAttack.Init(UI, Core, notify)
    local Players = game:GetService("Players")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local UserInputService = game:GetService("UserInputService")
    local Animation = game:GetService("Animation")
    local TextChatService = game:GetService("TextChatService")

    local LocalPlayer = Players.LocalPlayer
    local localCharacter = LocalPlayer.Character
    local localHumanoid = localCharacter and localCharacter:FindFirstChild("Humanoid")
    local defaultWalkSpeed = game:GetService("StarterPlayer").StarterHumanoid.WalkSpeed
    local swingWalkSpeed = defaultWalkSpeed * 0.75

    local State = {
        BaitAttack = {
            FakeParry = { Value = false, Default = false },
            FakeRiposte = { Value = false, Default = false },
            FakeAttack = { Value = false, Default = false },
            FakeParryKey = { Value = nil, Default = nil },
            FakeRiposteKey = { Value = nil, Default = nil },
            FakeAttackKey = { Value = nil, Default = nil },
            ForceStopKey = { Value = nil, Default = nil },
            Cooldown = { Value = 0.5, Default = 0.5 },
            CheckStance = { Value = false, Default = false },
            ParryHold = { Value = false, Default = false },
            ParryAutoHold = { Value = 2, Default = 2 },
            ForceStopEnabled = { Value = false, Default = false }
        }
    }

    local lastActionTime = 0
    local isPerformingAction = false
    local parryAnimationTrack = nil
    local parryHoldConnection = nil

    local function getLocalWeaponSettings()
        if not localCharacter then
            return nil, nil
        end
        local weapon
        for _, child in pairs(localCharacter:GetChildren()) do
            if child:IsA("Tool") then
                weapon = child
                break
            end
        end
        if not weapon then
            return nil, nil
        end
        local settingsModule = weapon:FindFirstChild("Settings")
        if not settingsModule then
            return nil, nil
        end
        local settings = require(settingsModule)
        if not settings or type(settings) ~= "table" or not settings.Type then
            return nil, nil
        end
        return settings, weapon
    end

    local function getCurrentStance()
        if not localCharacter then
            return nil
        end
        local stanceValue = localCharacter:FindFirstChild("Stance", true)
        return stanceValue and stanceValue.Value or "Idle"
    end

    local function playAnimation(action)
        if isPerformingAction or tick() - lastActionTime < State.BaitAttack.Cooldown.Value then
            return false
        end
        if not (localCharacter and localHumanoid and localHumanoid.Health > 0) then
            return false
        end
        if State.BaitAttack.CheckStance.Value then
            local currentStance = getCurrentStance()
            if currentStance ~= "Idle" and currentStance ~= "Recovery" then
                return false
            end
        end
        isPerformingAction = true
        local settings, weapon = getLocalWeaponSettings()
        if not settings or not settings.Type then
            isPerformingAction = false
            return false
        end
        local animationsModule = ReplicatedStorage:FindFirstChild("ClientModule") and ReplicatedStorage.ClientModule:FindFirstChild("WeaponAnimations")
        if not animationsModule then
            isPerformingAction = false
            return false
        end
        local animations = require(animationsModule)[settings.Type]
        if not animations then
            isPerformingAction = false
            return false
        end
        local animationId
        if action == "FakeAttack" then
            local swingAnimations = {animations.RightSwing, animations.LeftSwing}
            animationId = swingAnimations[math.random(1, #swingAnimations)]
        else
            animationId = animations[action]
        end
        if not animationId then
            isPerformingAction = false
            return false
        end
        local animation = Instance.new("Animation")
        animation.AnimationId = "rbxassetid://" .. animationId
        local animationTrack = localHumanoid:LoadAnimation(animation)
        
        if action == "Parry" then
            parryAnimationTrack = animationTrack
            animationTrack:Play(0.1)
            animationTrack:AdjustSpeed(1)
            localHumanoid.WalkSpeed = 7
            if not State.BaitAttack.ParryHold.Value then
                task.spawn(function()
                    task.wait(State.BaitAttack.ParryAutoHold.Value)
                    if animationTrack and animationTrack.IsPlaying then
                        animationTrack:Stop(0.2)
                        animationTrack:Destroy()
                        parryAnimationTrack = nil
                    end
                    localHumanoid.WalkSpeed = defaultWalkSpeed
                    isPerformingAction = false
                    lastActionTime = tick()
                end)
            end
        elseif action == "Riposte" then
            animationTrack:Play(0.1)
            animationTrack:AdjustSpeed(0)
            localHumanoid.WalkSpeed = 1
            task.spawn(function()
                task.wait(0.5)
                if animationTrack and animationTrack.IsPlaying and animationTrack.TimePosition == 0 then
                    animationTrack:Stop(0.7)
                    animationTrack:Destroy()
                end
                localHumanoid.WalkSpeed = defaultWalkSpeed
                isPerformingAction = false
                lastActionTime = tick()
            end)
        elseif action == "FakeAttack" then
            animationTrack:Play(settings.Windup or 0.3)
            animationTrack:AdjustSpeed(0)
            localHumanoid.WalkSpeed = swingWalkSpeed
            task.spawn(function()
                task.wait(settings.Windup or 0.3)
                if animationTrack and animationTrack.IsPlaying then
                    animationTrack:AdjustSpeed((animationTrack.Length / (settings.Release or 0.3)) * 2)
                    task.wait(settings.Release or 0.3)
                    if animationTrack and animationTrack.IsPlaying then
                        animationTrack:Stop(settings.Recovery or 0.45)
                        animationTrack:Destroy()
                    end
                    localHumanoid.WalkSpeed = defaultWalkSpeed
                    isPerformingAction = false
                    lastActionTime = tick()
                end
            end)
        elseif action == "Idle" then
            animationTrack:Play(0.1)
            animationTrack.Priority = Enum.AnimationPriority.Movement
            localHumanoid.WalkSpeed = defaultWalkSpeed
            task.spawn(function()
                task.wait(0.1)
                isPerformingAction = false
                lastActionTime = tick()
            end)
        end
        return true
    end

    local function forceStop()
        if not (localCharacter and localHumanoid and localHumanoid.Health > 0) then
            return false
        end
        local settings, weapon = getLocalWeaponSettings()
        if not settings or not settings.Type then
            return false
        end
        local animationsModule = ReplicatedStorage:FindFirstChild("ClientModule") and ReplicatedStorage.ClientModule:FindFirstChild("WeaponAnimations")
        if not animationsModule then
            return false
        end
        local animations = require(animationsModule)[settings.Type]
        if not animations or not animations.Idle then
            return false
        end
        local stanceValue = localCharacter:FindFirstChild("Stance", true)
        if stanceValue then
            stanceValue.Value = "Idle"
        end
        if parryAnimationTrack and parryAnimationTrack.IsPlaying then
            parryAnimationTrack:Stop(0.2)
            parryAnimationTrack:Destroy()
            parryAnimationTrack = nil
        end
        return playAnimation("Idle")
    end

    local function isPlayerTyping()
        return TextChatService.ChatInputBarConfiguration and TextChatService.ChatInputBarConfiguration.Enabled
    end

    local function onInputBegan(input, gameProcessedEvent)
        if gameProcessedEvent or isPlayerTyping() or not localCharacter or not localHumanoid or localHumanoid.Health <= 0 then
            return
        end
        if input.KeyCode == State.BaitAttack.FakeParryKey.Value and not State.BaitAttack.FakeParry.Value then
            State.BaitAttack.FakeParry.Value = true
            if playAnimation("Parry") then
                notify("BaitAttack", "Fake Parry Activated", true)
                Core.BulwarkTarget.CombatState = "BaitAttack (FakeParry)"
                if State.BaitAttack.ParryHold.Value then
                    parryHoldConnection = UserInputService.InputEnded:Connect(function(endInput)
                        if endInput.KeyCode == State.BaitAttack.FakeParryKey.Value then
                            if parryAnimationTrack and parryAnimationTrack.IsPlaying then
                                parryAnimationTrack:Stop(0.2)
                                parryAnimationTrack:Destroy()
                                parryAnimationTrack = nil
                            end
                            localHumanoid.WalkSpeed = defaultWalkSpeed
                            isPerformingAction = false
                            lastActionTime = tick()
                            State.BaitAttack.FakeParry.Value = false
                            Core.BulwarkTarget.CombatState = nil
                            if parryHoldConnection then
                                parryHoldConnection:Disconnect()
                                parryHoldConnection = nil
                            end
                        end
                    end)
                end
                if not State.BaitAttack.ParryHold.Value then
                    task.spawn(function()
                        task.wait(State.BaitAttack.ParryAutoHold.Value)
                        State.BaitAttack.FakeParry.Value = false
                        Core.BulwarkTarget.CombatState = nil
                    end)
                end
            else
                State.BaitAttack.FakeParry.Value = false
            end
        elseif input.KeyCode == State.BaitAttack.FakeRiposteKey.Value and not State.BaitAttack.FakeRiposte.Value then
            State.BaitAttack.FakeRiposte.Value = true
            if playAnimation("Riposte") then
                notify("BaitAttack", "Fake Riposte Activated", true)
                Core.BulwarkTarget.CombatState = "BaitAttack (FakeRiposte)"
                task.spawn(function()
                    task.wait(State.BaitAttack.Cooldown.Value)
                    State.BaitAttack.FakeRiposte.Value = false
                    Core.BulwarkTarget.CombatState = nil
                end)
            else
                State.BaitAttack.FakeRiposte.Value = false
            end
        elseif input.KeyCode == State.BaitAttack.FakeAttackKey.Value and not State.BaitAttack.FakeAttack.Value then
            State.BaitAttack.FakeAttack.Value = true
            if playAnimation("FakeAttack") then
                notify("BaitAttack", "Fake Attack Activated", true)
                Core.BulwarkTarget.CombatState = "BaitAttack (FakeAttack)"
                task.spawn(function()
                    task.wait(State.BaitAttack.Cooldown.Value)
                    State.BaitAttack.FakeAttack.Value = false
                    Core.BulwarkTarget.CombatState = nil
                end)
            else
                State.BaitAttack.FakeAttack.Value = false
            end
        elseif input.KeyCode == State.BaitAttack.ForceStopKey.Value and State.BaitAttack.ForceStopEnabled.Value then
            if forceStop() then
                notify("BaitAttack", "Force Stop Activated", true)
                Core.BulwarkTarget.CombatState = "Idle"
            end
        end
    end

    LocalPlayer.CharacterAdded:Connect(function(character)
        localCharacter = character
        localHumanoid = character:WaitForChild("Humanoid", 5)
    end)

    if UI.Tabs and UI.Tabs.Combat then
        UI.Sections.BaitAttack = UI.Sections.BaitAttack or UI.Tabs.Combat:Section({ Name = "Bait Attack", Side = "Left" })
        UI.Sections.BaitAttack:Header({ Name = "Bait Attack" })
        UI.Sections.BaitAttack:SubLabel({ Text = "Plays fake Parry/Riposte/Attack animations without server interaction" })
        UI.Sections.BaitAttack:Keybind({
            Name = "Fake Parry Key",
            Default = State.BaitAttack.FakeParryKey.Default,
            Callback = function(value)
                State.BaitAttack.FakeParryKey.Value = value
                notify("BaitAttack", "Fake Parry Key set to: " .. tostring(value), true)
            end,
            'FakeParryKeyBA'
        })
        UI.Sections.BaitAttack:Keybind({
            Name = "Fake Riposte Key",
            Default = State.BaitAttack.FakeRiposteKey.Default,
            Callback = function(value)
                State.BaitAttack.FakeRiposteKey.Value = value
                notify("BaitAttack", "Fake Riposte Key set to: " .. tostring(value), true)
            end,
            'FakeRiposteKeyBA'
        })
        UI.Sections.BaitAttack:Keybind({
            Name = "Fake Attack Key",
            Default = State.BaitAttack.FakeAttackKey.Default,
            Callback = function(value)
                State.BaitAttack.FakeAttackKey.Value = value
                notify("BaitAttack", "Fake Attack Key set to: " .. tostring(value), true)
            end,
            'FakeAttackKeyBA'
        })
        UI.Sections.BaitAttack:Divider()
        UI.Sections.BaitAttack:Slider({
            Name = "Cooldown",
            Minimum = 0.1,
            Maximum = 1.0,
            Default = State.BaitAttack.Cooldown.Default,
            Precision = 2,
            Callback = function(value)
                State.BaitAttack.Cooldown.Value = value
                notify("BaitAttack", "Cooldown set to: " .. value)
            end,
            'CooldownBA'
        })
        UI.Sections.BaitAttack:Toggle({
            Name = "Check Stance",
            Default = State.BaitAttack.CheckStance.Default,
            Callback = function(value)
                State.BaitAttack.CheckStance.Value = value
                notify("BaitAttack", "Check Stance: " .. (value and "Enabled" or "Disabled"))
            end,
            'CheckStanceBA'
        })
        UI.Sections.BaitAttack:SubLabel({ Text = "Prevents bait animations if player's Stance is not Idle or Recovery" })
        UI.Sections.BaitAttack:Divider()
        UI.Sections.BaitAttack:SubLabel({ Text = "Parry" })
        UI.Sections.BaitAttack:Toggle({
            Name = "Hold",
            Default = State.BaitAttack.ParryHold.Default,
            Callback = function(value)
                State.BaitAttack.ParryHold.Value = value
                notify("BaitAttack", "Parry Hold: " .. (value and "Enabled" or "Disabled"))
                if not value and parryAnimationTrack and parryAnimationTrack.IsPlaying then
                    parryAnimationTrack:Stop(0.2)
                    parryAnimationTrack:Destroy()
                    parryAnimationTrack = nil
                    localHumanoid.WalkSpeed = defaultWalkSpeed
                    isPerformingAction = false
                    lastActionTime = tick()
                    State.BaitAttack.FakeParry.Value = false
                    Core.BulwarkTarget.CombatState = nil
                end
            end,
            'ParryHoldBA'
        })
        UI.Sections.BaitAttack:Slider({
            Name = "Auto Hold Duration",
            Minimum = 2,
            Maximum = 10,
            Default = State.BaitAttack.ParryAutoHold.Default,
            Precision = 1,
            Callback = function(value)
                State.BaitAttack.ParryAutoHold.Value = value
                notify("BaitAttack", "Parry Auto Hold set to: " .. value .. " seconds")
            end,
            'ParryAutoHoldBA'
        })
        UI.Sections.BaitAttack:Divider()
        UI.Sections.BaitAttack:SubLabel({ Text = "Force Stop" })
        UI.Sections.BaitAttack:Toggle({
            Name = "Enabled",
            Default = State.BaitAttack.ForceStopEnabled.Default,
            Callback = function(value)
                State.BaitAttack.ForceStopEnabled.Value = value
                notify("BaitAttack", "Force Stop: " .. (value and "Enabled" or "Disabled"))
            end,
            'ForceStopEnabledBA'
        })
        UI.Sections.BaitAttack:SubLabel({ Text = "Forces Stance to Idle and plays Idle animation to cancel ongoing actions" })
        UI.Sections.BaitAttack:Keybind({
            Name = "Force Stop Key",
            Default = State.BaitAttack.ForceStopKey.Default,
            Callback = function(value)
                State.BaitAttack.ForceStopKey.Value = value
                notify("BaitAttack", "Force Stop Key set to: " .. tostring(value), true)
            end,
            'ForceStopKeyBA'
        })
    end

    return BaitAttack
end

return BaitAttack
