local LocalPlayer = {}
local Services = nil
local PlayerData = nil
local notify = nil
local LocalPlayerObj = nil
local core = nil

-- Services for Desync and AntiSpeed
local checkcaller = checkcaller
local newcclosure = newcclosure
local hookmetamethod = hookmetamethod
local setsimulationradius = setsimulationradius

LocalPlayer.Config = {
    Timer = {
        Enabled = false,
        Speed = 2.5,
        ToggleKey = nil
    },
    Disabler = {
        Enabled = false,
        ToggleKey = nil
    },
    AutoSprint = {
        Enabled = false,
        Speed = 40,
        ToggleKey = nil
    },
    Desync = {
        Enabled = false,
        Method = "Reverse", -- "Reverse" or "AssemblyLinearVelocity"
        ReverseY = 350,
        Velocity = 200,
        Multiplier = 7,
        ToggleKey = nil
    },
    AntiSpeed = {
        Enabled = false,
        Method = "Hook"
    }
}

local TimerStatus = {
    Running = false,
    Connection = nil,
    Speed = LocalPlayer.Config.Timer.Speed,
    Key = LocalPlayer.Config.Timer.ToggleKey,
    Enabled = LocalPlayer.Config.Timer.Enabled
}

local DisablerStatus = {
    Running = false,
    Connection = nil,
    Key = LocalPlayer.Config.Disabler.ToggleKey,
    Enabled = LocalPlayer.Config.Disabler.Enabled
}

local AutoSprintStatus = {
    Running = false,
    Connection = nil,
    WalkSpeedConnection = nil,
    SprintingConnection = nil,
    Key = LocalPlayer.Config.AutoSprint.ToggleKey,
    Enabled = LocalPlayer.Config.AutoSprint.Enabled,
    Speed = LocalPlayer.Config.AutoSprint.Speed
}

local DesyncStatus = {
    Running = false,
    HeartbeatConnection = nil,
    MouseConnection = nil,
    OriginalIndex = nil,
    DesyncTypes = {},
    Key = LocalPlayer.Config.Desync.ToggleKey,
    Enabled = LocalPlayer.Config.Desync.Enabled,
    Method = LocalPlayer.Config.Desync.Method,
    ReverseY = LocalPlayer.Config.Desync.ReverseY,
    Velocity = LocalPlayer.Config.Desync.Velocity,
    Multiplier = LocalPlayer.Config.Desync.Multiplier,
    ServerMarker = nil
}

local AntiSpeedStatus = {
    Running = false,
    OriginalIndex = nil,
    Enabled = LocalPlayer.Config.AntiSpeed.Enabled,
    Method = LocalPlayer.Config.AntiSpeed.Method
}

local function getCharacterData()
    local character = LocalPlayerObj and LocalPlayerObj.Character
    if not character then return nil, nil end
    local humanoid = character:WaitForChild("Humanoid", 5)
    local rootPart = character:WaitForChild("HumanoidRootPart", 5)
    return humanoid, rootPart
end

local function isCharacterValid(humanoid, rootPart)
    return humanoid and rootPart and humanoid.Health > 0
end

local function isInputFocused()
    return Services and Services.UserInputService and Services.UserInputService:GetFocusedTextBox() ~= nil
end

-- Timer Functions
local Timer = {}
Timer.Start = function()
    if TimerStatus.Running or not Services then return end
    local success = pcall(function()
        setfflag("SimEnableStepPhysics", "True")
        setfflag("SimEnableStepPhysicsSelective", "True")
    end)
    if not success then
        warn("Timer: Failed to enable physics flags")
        notify("Timer", "Failed to enable physics simulation.", true)
        return
    end
    TimerStatus.Running = true
    TimerStatus.Connection = Services.RunService.RenderStepped:Connect(function(dt)
        if not TimerStatus.Enabled or TimerStatus.Speed <= 1 then return end
        local humanoid, rootPart = getCharacterData()
        if not isCharacterValid(humanoid, rootPart) then return end
        local success, err = pcall(function()
            Services.RunService:Pause()
            Services.Workspace:StepPhysics(dt * (TimerStatus.Speed - 1), {rootPart})
            Services.RunService:Run()
        end)
        if not success then
            warn("Timer physics step failed: " .. tostring(err))
            Timer.Stop()
            notify("Timer", "Physics step failed. Timer stopped.", true)
        end
    end)
    notify("Timer", "Started with speed: " .. tostring(TimerStatus.Speed), true)
end

Timer.Stop = function()
    if TimerStatus.Connection then
        TimerStatus.Connection:Disconnect()
        TimerStatus.Connection = nil
    end
    TimerStatus.Running = false
    notify("Timer", "Stopped", true)
end

Timer.SetSpeed = function(newSpeed)
    TimerStatus.Speed = math.clamp(newSpeed, 1, 15)
    LocalPlayer.Config.Timer.Speed = TimerStatus.Speed
    notify("Timer", "Speed set to: " .. tostring(TimerStatus.Speed), false)
end

-- Disabler Functions
local Disabler = {}
Disabler.DisableSignals = function(character)
    if not character then return end
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not rootPart then return end
    for _, connection in ipairs(getconnections(rootPart:GetPropertyChangedSignal("CFrame"))) do
        pcall(function() hookfunction(connection.Function, function() end) end)
    end
    for _, connection in ipairs(getconnections(rootPart:GetPropertyChangedSignal("Velocity"))) do
        pcall(function() hookfunction(connection.Function, function() end) end)
    end
end

Disabler.Start = function()
    if DisablerStatus.Running or not LocalPlayerObj then return end
    DisablerStatus.Running = true
    DisablerStatus.Connection = LocalPlayerObj.CharacterAdded:Connect(Disabler.DisableSignals)
    if LocalPlayerObj.Character then
        Disabler.DisableSignals(LocalPlayerObj.Character)
    end
    notify("Disabler", "Started", true)
end

Disabler.Stop = function()
    if DisablerStatus.Connection then
        DisablerStatus.Connection:Disconnect()
        DisablerStatus.Connection = nil
    end
    DisablerStatus.Running = false
    notify("Disabler", "Stopped", true)
end

-- AutoSprint Functions
local AutoSprint = {}
AutoSprint.Start = function()
    if AutoSprintStatus.Running or not Services then return end
    local character = LocalPlayerObj and LocalPlayerObj.Character
    if not character then return end
    local humanoid = character:WaitForChild("Humanoid", 5)
    if not humanoid then return end

    AutoSprintStatus.Running = true

    -- Перехват GetAttribute
    local mt = getrawmetatable(game)
    local oldIndex = mt.__index
    setreadonly(mt, false)
    mt.__index = function(self, key)
        if self == character and key == "GetAttribute" then
            return function(_, attr)
                if attr == "Sprinting" then
                    return true
                end
                if attr == "CombatFatigue" or attr == "AimingDown" or attr == "Iced" or
                   attr == "Mounted" or attr == "Poisoned" or attr == "Limp" or
                   attr == "Consuming" or attr == "Crouched" or attr == "Blocking" or
                   attr == "WalkCast" or attr == "NoSprint" or attr == "Attacking" or
                   attr == "Casting" then
                    return nil
                end
                return character:GetAttribute(attr)
            end
        end
        return oldIndex(self, key)
    end
    setreadonly(mt, true)

    -- Установить начальные значения
    humanoid.WalkSpeed = AutoSprintStatus.Speed
    character:SetAttribute("Sprinting", true)

    -- Постоянный спринт с усиленной проверкой
    AutoSprintStatus.Connection = Services.RunService.Heartbeat:Connect(function()
        if not AutoSprintStatus.Enabled then
            AutoSprint.Stop()
            return
        end
        local humanoid, _ = getCharacterData()
        if not isCharacterValid(humanoid, nil) then return end
        if humanoid.WalkSpeed ~= AutoSprintStatus.Speed then
            humanoid.WalkSpeed = AutoSprintStatus.Speed
        end
        if not character:GetAttribute("Sprinting") then
            character:SetAttribute("Sprinting", true)
        end
    end)

    -- Перехват изменения WalkSpeed
    AutoSprintStatus.WalkSpeedConnection = humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
        if AutoSprintStatus.Enabled and humanoid.WalkSpeed ~= AutoSprintStatus.Speed then
            humanoid.WalkSpeed = AutoSprintStatus.Speed
        end
    end)

    -- Перехват изменения атрибута Sprinting
    AutoSprintStatus.SprintingConnection = character:GetAttributeChangedSignal("Sprinting"):Connect(function()
        if AutoSprintStatus.Enabled and not character:GetAttribute("Sprinting") then
            character:SetAttribute("Sprinting", true)
        end
    end)

    notify("AutoSprint", "Started with speed: " .. tostring(AutoSprintStatus.Speed), true)
end

AutoSprint.Stop = function()
    if AutoSprintStatus.Connection then
        AutoSprintStatus.Connection:Disconnect()
        AutoSprintStatus.Connection = nil
    end
    if AutoSprintStatus.WalkSpeedConnection then
        AutoSprintStatus.WalkSpeedConnection:Disconnect()
        AutoSprintStatus.WalkSpeedConnection = nil
    end
    if AutoSprintStatus.SprintingConnection then
        AutoSprintStatus.SprintingConnection:Disconnect()
        AutoSprintStatus.SprintingConnection = nil
    end
    AutoSprintStatus.Running = false

    -- Восстановить метатаблицу
    local mt = getrawmetatable(game)
    setreadonly(mt, false)
    mt.__index = rawget(mt, "__index") or function(self, key) return rawget(self, key) end
    setreadonly(mt, true)

    -- Восстановить стандартную скорость
    local humanoid, _ = getCharacterData()
    if humanoid then
        humanoid.WalkSpeed = 16
    end
    local character = LocalPlayerObj and LocalPlayerObj.Character
    if character then
        character:SetAttribute("Sprinting", false)
    end

    notify("AutoSprint", "Stopped", true)
end

AutoSprint.SetSpeed = function(newSpeed)
    newSpeed = tonumber(newSpeed) or AutoSprintStatus.Speed
    AutoSprintStatus.Speed = math.clamp(newSpeed, 33, 100)
    LocalPlayer.Config.AutoSprint.Speed = AutoSprintStatus.Speed
    local humanoid = getCharacterData()
    if humanoid and AutoSprintStatus.Running then
        humanoid.WalkSpeed = AutoSprintStatus.Speed
    end
    notify("AutoSprint", "Speed set to: " .. tostring(AutoSprintStatus.Speed), false)
end

-- Desync Functions
local Desync = {}
Desync.Start = function()
    if DesyncStatus.Running or not Services or not LocalPlayerObj then return end
    local character = LocalPlayerObj.Character
    if not character then return end
    local humanoid = character:WaitForChild("Humanoid", 5)
    local rootPart = character:WaitForChild("HumanoidRootPart", 5)
    if not humanoid or not rootPart then return end

    DesyncStatus.Running = true

    -- Установка радиуса симуляции
    setsimulationradius(math.huge)

    -- Создание визуального индикатора
    DesyncStatus.ServerMarker = Instance.new("Part")
    DesyncStatus.ServerMarker.Name = "ServerSpoofedPositionMarker"
    DesyncStatus.ServerMarker.Shape = Enum.PartType.Ball
    DesyncStatus.ServerMarker.Size = Vector3.new(1, 1, 1)
    DesyncStatus.ServerMarker.Anchored = true
    DesyncStatus.ServerMarker.CanCollide = false
    DesyncStatus.ServerMarker.BrickColor = BrickColor.new("Bright red")
    DesyncStatus.ServerMarker.Transparency = 0.3
    DesyncStatus.ServerMarker.Parent = game.Workspace

    -- Хук метаметода для спуфа CFrame
    local mt = getrawmetatable(game)
    setreadonly(mt, false)
    DesyncStatus.OriginalIndex = DesyncStatus.OriginalIndex or mt.__index
    mt.__index = newcclosure(function(self, key)
        if DesyncStatus.Enabled and not checkcaller() then
            if key == "CFrame" and self == rootPart then
                return DesyncStatus.DesyncTypes[1] or CFrame.new()
            elseif key == "CFrame" and self == character:FindFirstChild("Head") then
                return DesyncStatus.DesyncTypes[1] and DesyncStatus.DesyncTypes[1] + Vector3.new(0, rootPart.Size.Y / 2 + 0.5, 0) or CFrame.new()
            end
        end
        return DesyncStatus.OriginalIndex(self, key)
    end)
    setreadonly(mt, true)

    -- Основная логика десинхронизации
    DesyncStatus.HeartbeatConnection = Services.RunService.Heartbeat:Connect(function()
        if not DesyncStatus.Enabled then
            Desync.Stop()
            return
        end
        if not isCharacterValid(humanoid, rootPart) then return end

        DesyncStatus.DesyncTypes[1] = rootPart.CFrame
        DesyncStatus.DesyncTypes[2] = rootPart.AssemblyLinearVelocity

        local spoofCFrame = rootPart.CFrame
        local spoofVelocity = DesyncStatus.DesyncTypes[2]

        -- Применение метода десинхронизации
        if DesyncStatus.Method == "Reverse" then
            spoofCFrame = rootPart.CFrame * CFrame.Angles(math.pi, 0, 0) * CFrame.new(0, DesyncStatus.ReverseY, 0)
            notify("Desync", "Reverse: Flipped upside down and moved by " .. tostring(DesyncStatus.ReverseY) .. " units", false)
        elseif DesyncStatus.Method == "AssemblyLinearVelocity" then
            spoofVelocity = Vector3.new(spoofVelocity.X, DesyncStatus.Velocity * DesyncStatus.Multiplier, spoofVelocity.Z)
            notify("Desync", "AssemblyLinearVelocity: Set Y velocity to " .. tostring(DesyncStatus.Velocity * DesyncStatus.Multiplier), false)
        end

        -- Применение спуфа
        rootPart.CFrame = spoofCFrame
        rootPart.AssemblyLinearVelocity = spoofVelocity
        DesyncStatus.ServerMarker.Position = spoofCFrame.Position

        Services.RunService.RenderStepped:Wait()

        -- Восстановление реальной позиции
        rootPart.CFrame = DesyncStatus.DesyncTypes[1]
        rootPart.AssemblyLinearVelocity = DesyncStatus.DesyncTypes[2]
    end)

    notify("Desync", "Started with method: " .. DesyncStatus.Method, true)
end

Desync.Stop = function()
    if DesyncStatus.HeartbeatConnection then
        DesyncStatus.HeartbeatConnection:Disconnect()
        DesyncStatus.HeartbeatConnection = nil
    end
    if DesyncStatus.MouseConnection then
        DesyncStatus.MouseConnection:Disconnect()
        DesyncStatus.MouseConnection = nil
    end
    if DesyncStatus.ServerMarker then
        DesyncStatus.ServerMarker:Destroy()
        DesyncStatus.ServerMarker = nil
    end
    DesyncStatus.Running = false

    -- Восстановить метатаблицу
    local mt = getrawmetatable(game)
    setreadonly(mt, false)
    mt.__index = DesyncStatus.OriginalIndex or function(self, key) return rawget(self, key) end
    setreadonly(mt, true)

    notify("Desync", "Stopped", true)
end

Desync.SetMethod = function(newMethod)
    if newMethod ~= "Reverse" and newMethod ~= "AssemblyLinearVelocity" then
        newMethod = "Reverse"
    end
    DesyncStatus.Method = newMethod
    LocalPlayer.Config.Desync.Method = newMethod
    notify("Desync", "Method set to: " .. newMethod, false)
end

Desync.SetReverseY = function(newReverseY)
    newReverseY = tonumber(newReverseY) or DesyncStatus.ReverseY
    DesyncStatus.ReverseY = math.clamp(newReverseY, -1000, 1000)
    LocalPlayer.Config.Desync.ReverseY = DesyncStatus.ReverseY
    notify("Desync", "ReverseY set to: " .. tostring(DesyncStatus.ReverseY), false)
end

Desync.SetVelocity = function(newVelocity)
    newVelocity = tonumber(newVelocity) or DesyncStatus.Velocity
    DesyncStatus.Velocity = math.clamp(newVelocity, -200, 200)
    LocalPlayer.Config.Desync.Velocity = DesyncStatus.Velocity
    notify("Desync", "Velocity set to: " .. tostring(DesyncStatus.Velocity), false)
end

Desync.SetMultiplier = function(newMultiplier)
    newMultiplier = tonumber(newMultiplier) or DesyncStatus.Multiplier
    DesyncStatus.Multiplier = math.clamp(newMultiplier, 1, 20)
    LocalPlayer.Config.Desync.Multiplier = DesyncStatus.Multiplier
    notify("Desync", "Multiplier set to: " .. tostring(DesyncStatus.Multiplier), false)
end

-- AntiSpeed Functions
local AntiSpeed = {}
AntiSpeed.Start = function()
    if AntiSpeedStatus.Running or not LocalPlayerObj then return end
    local character = LocalPlayerObj.Character
    if not character then return end
    local rootPart = character:WaitForChild("HumanoidRootPart", 5)
    if not rootPart then return end

    AntiSpeedStatus.Running = true

    -- Хук метаметода для спуфа AssemblyLinearVelocity
    local mt = getrawmetatable(game)
    setreadonly(mt, false)
    AntiSpeedStatus.OriginalIndex = AntiSpeedStatus.OriginalIndex or mt.__index
    mt.__index = newcclosure(function(self, key)
        if AntiSpeedStatus.Enabled and not checkcaller() then
            if self == rootPart and key == "AssemblyLinearVelocity" then
                return Vector3.new(1, 1, 1)
            end
        end
        return AntiSpeedStatus.OriginalIndex(self, key)
    end)
    setreadonly(mt, true)

    notify("AntiSpeed", "Started with method: " .. AntiSpeedStatus.Method, true)
end

AntiSpeed.Stop = function()
    if AntiSpeedStatus.OriginalIndex then
        local mt = getrawmetatable(game)
        setreadonly(mt, false)
        mt.__index = AntiSpeedStatus.OriginalIndex
        setreadonly(mt, true)
        AntiSpeedStatus.OriginalIndex = nil
    end
    AntiSpeedStatus.Running = false
    notify("AntiSpeed", "Stopped", true)
end

AntiSpeed.SetMethod = function(newMethod)
    if newMethod ~= "Hook" then
        newMethod = "Hook"
    end
    AntiSpeedStatus.Method = newMethod
    LocalPlayer.Config.AntiSpeed.Method = newMethod
    notify("AntiSpeed", "Method set to: " .. newMethod, false)
end

-- UI Setup
local function SetupUI(UI)
    local uiElements = {}

    if UI.Sections.Timer then
        UI.Sections.Timer:Header({ Name = "Timer" })
        UI.Sections.Timer.Side = "Left"
        uiElements.TimerEnabled = UI.Sections.Timer:Toggle({
            Name = "Enabled",
            Default = LocalPlayer.Config.Timer.Enabled,
            Callback = function(value)
                TimerStatus.Enabled = value
                LocalPlayer.Config.Timer.Enabled = value
                if value then Timer.Start() else Timer.Stop() end
            end
        }, "TimerEnabled")
        uiElements.TimerSpeed = UI.Sections.Timer:Slider({
            Name = "Speed",
            Minimum = 1,
            Maximum = 15,
            Default = LocalPlayer.Config.Timer.Speed,
            Precision = 1,
            Callback = function(value)
                notify("Timer", "Slider Speed received: " .. tostring(value), false)
                Timer.SetSpeed(value)
            end
        }, "TimerSpeed")
        uiElements.TimerKey = UI.Sections.Timer:Keybind({
            Name = "Toggle Key",
            Default = LocalPlayer.Config.Timer.ToggleKey or "",
            Callback = function(value)
                TimerStatus.Key = value == "" and nil or value
                LocalPlayer.Config.Timer.ToggleKey = TimerStatus.Key
                if isInputFocused() then return end
                if TimerStatus.Enabled then
                    if TimerStatus.Running then Timer.Stop() else Timer.Start() end
                else
                    notify("Timer", "Enable Timer to use keybind.", true)
                end
            end
        }, "TimerKey")
    end

    if UI.Sections.Disabler then
        UI.Sections.Disabler:Header({ Name = "Disabler" })
        UI.Sections.Disabler.Side = "Left"
        uiElements.DisablerEnabled = UI.Sections.Disabler:Toggle({
            Name = "Enabled",
            Default = LocalPlayer.Config.Disabler.Enabled,
            Callback = function(value)
                DisablerStatus.Enabled = value
                LocalPlayer.Config.Disabler.Enabled = value
                if value then Disabler.Start() else Disabler.Stop() end
            end
        }, "DisablerEnabled")
        uiElements.DisablerKey = UI.Sections.Disabler:Keybind({
            Name = "Toggle Key",
            Default = LocalPlayer.Config.Disabler.ToggleKey or "",
            Callback = function(value)
                DisablerStatus.Key = value == "" and nil or value
                LocalPlayer.Config.Disabler.ToggleKey = DisablerStatus.Key
                if isInputFocused() then return end
                if DisablerStatus.Enabled then
                    if DisablerStatus.Running then Disabler.Stop() else Disabler.Start() end
                else
                    notify("Disabler", "Enable Disabler to use keybind.", true)
                end
            end
        }, "DisablerKey")
    end

    if UI.Sections.Speed then
        UI.Sections.Speed:Header({ Name = "AutoSprint" })
        UI.Sections.Speed.Side = "Right"
        uiElements.AutoSprintEnabled = UI.Sections.Speed:Toggle({
            Name = "Enabled",
            Default = LocalPlayer.Config.AutoSprint.Enabled,
            Callback = function(value)
                AutoSprintStatus.Enabled = value
                LocalPlayer.Config.AutoSprint.Enabled = value
                if value then AutoSprint.Start() else AutoSprint.Stop() end
            end
        }, "AutoSprintEnabled")
        uiElements.AutoSprintSpeed = UI.Sections.Speed:Slider({
            Name = "Speed Value",
            Minimum = 33,
            Maximum = 100,
            Default = LocalPlayer.Config.AutoSprint.Speed,
            Precision = 1,
            Callback = function(value)
                notify("AutoSprint", "Slider Speed received: " .. tostring(value), false)
                AutoSprint.SetSpeed(value)
            end
        }, "AutoSprintSpeed")
        uiElements.AutoSprintKey = UI.Sections.Speed:Keybind({
            Name = "Toggle Key",
            Default = LocalPlayer.Config.AutoSprint.ToggleKey or "",
            Callback = function(value)
                AutoSprintStatus.Key = value == "" and nil or value
                LocalPlayer.Config.AutoSprint.ToggleKey = AutoSprintStatus.Key
                if isInputFocused() then return end
                if AutoSprintStatus.Enabled then
                    if AutoSprintStatus.Running then AutoSprint.Stop() else AutoSprint.Start() end
                else
                    notify("AutoSprint", "Enable AutoSprint to use keybind.", true)
                end
            end
        }, "AutoSprintKey")
    end

    -- Секция Desync на правой стороне
    local desyncSection = UI.Tabs.LocalPlayer:Section({ Name = "Desync", Side = "Right" })
    if desyncSection then
        desyncSection:Header({ Name = "Desync" })
        uiElements.DesyncEnabled = desyncSection:Toggle({
            Name = "Enabled",
            Default = LocalPlayer.Config.Desync.Enabled,
            Callback = function(value)
                DesyncStatus.Enabled = value
                LocalPlayer.Config.Desync.Enabled = value
                if value then Desync.Start() else Desync.Stop() end
            end
        }, "DesyncEnabled")
        uiElements.DesyncMethod = desyncSection:Dropdown({
            Name = "Method",
            Options = {"Reverse", "AssemblyLinearVelocity"},
            Default = LocalPlayer.Config.Desync.Method,
            Callback = function(value)
                notify("Desync", "Dropdown Method received: " .. tostring(value), false)
                Desync.SetMethod(value)
            end
        }, "DesyncMethod")
        uiElements.DesyncReverseY = desyncSection:Slider({
            Name = "ReverseY",
            Minimum = -1000,
            Maximum = 1000,
            Default = LocalPlayer.Config.Desync.ReverseY,
            Precision = 1,
            Callback = function(value)
                notify("Desync", "Slider ReverseY received: " .. tostring(value), false)
                Desync.SetReverseY(value)
            end
        }, "DesyncReverseY")
        uiElements.DesyncVelocity = desyncSection:Slider({
            Name = "Velocity",
            Minimum = -200,
            Maximum = 200,
            Default = LocalPlayer.Config.Desync.Velocity,
            Precision = 1,
            Callback = function(value)
                notify("Desync", "Slider Velocity received: " .. tostring(value), false)
                Desync.SetVelocity(value)
            end
        }, "DesyncVelocity")
        uiElements.DesyncMultiplier = desyncSection:Slider({
            Name = "Multiplier",
            Minimum = 1,
            Maximum = 20,
            Default = LocalPlayer.Config.Desync.Multiplier,
            Precision = 1,
            Callback = function(value)
                notify("Desync", "Slider Multiplier received: " .. tostring(value), false)
                Desync.SetMultiplier(value)
            end
        }, "DesyncMultiplier")
        uiElements.DesyncKey = desyncSection:Keybind({
            Name = "Toggle Key",
            Default = LocalPlayer.Config.Desync.ToggleKey or "",
            Callback = function(value)
                DesyncStatus.Key = value == "" and nil or value
                LocalPlayer.Config.Desync.ToggleKey = DesyncStatus.Key
                if isInputFocused() then return end
                if DesyncStatus.Enabled then
                    if DesyncStatus.Running then Desync.Stop() else Desync.Start() end
                else
                    notify("Desync", "Enable Desync to use keybind.", true)
                end
            end
        }, "DesyncKey")
    end

    -- Секция AntiSpeed на правой стороне
    local antiSpeedSection = UI.Tabs.LocalPlayer:Section({ Name = "AntiSpeed", Side = "Right" })
    if antiSpeedSection then
        antiSpeedSection:Header({ Name = "AntiSpeed" })
        uiElements.AntiSpeedEnabled = antiSpeedSection:Toggle({
            Name = "Enabled",
            Default = LocalPlayer.Config.AntiSpeed.Enabled,
            Callback = function(value)
                AntiSpeedStatus.Enabled = value
                LocalPlayer.Config.AntiSpeed.Enabled = value
                if value then AntiSpeed.Start() else AntiSpeed.Stop() end
            end
        }, "AntiSpeedEnabled")
        uiElements.AntiSpeedMethod = antiSpeedSection:Dropdown({
            Name = "Method Bypass",
            Options = {"Hook"},
            Default = LocalPlayer.Config.AntiSpeed.Method,
            Callback = function(value)
                notify("AntiSpeed", "Dropdown Method received: " .. tostring(value), false)
                AntiSpeed.SetMethod(value)
            end
        }, "AntiSpeedMethod")
    end

    local localconfigSection = UI.Tabs.Config:Section({ Name = "Local Player Sync", Side = "Right" })
    localconfigSection:Header({ Name = "LocalPlayer Settings Sync" })
    localconfigSection:Button({
        Name = "Sync Config",
        Callback = function()
            LocalPlayer.Config.Timer.Enabled = uiElements.TimerEnabled:GetState()
            LocalPlayer.Config.Timer.Speed = uiElements.TimerSpeed:GetValue()

            LocalPlayer.Config.Disabler.Enabled = uiElements.DisablerEnabled:GetState()

            LocalPlayer.Config.AutoSprint.Enabled = uiElements.AutoSprintEnabled:GetState()
            LocalPlayer.Config.AutoSprint.Speed = uiElements.AutoSprintSpeed:GetValue()

            LocalPlayer.Config.Desync.Enabled = uiElements.DesyncEnabled:GetState()
            LocalPlayer.Config.Desync.Method = uiElements.DesyncMethod:GetValue()
            LocalPlayer.Config.Desync.ReverseY = uiElements.DesyncReverseY:GetValue()
            LocalPlayer.Config.Desync.Velocity = uiElements.DesyncVelocity:GetValue()
            LocalPlayer.Config.Desync.Multiplier = uiElements.DesyncMultiplier:GetValue()

            LocalPlayer.Config.AntiSpeed.Enabled = uiElements.AntiSpeedEnabled:GetState()
            LocalPlayer.Config.AntiSpeed.Method = uiElements.AntiSpeedMethod:GetValue()

            TimerStatus.Enabled = LocalPlayer.Config.Timer.Enabled
            TimerStatus.Speed = LocalPlayer.Config.Timer.Speed
            if TimerStatus.Enabled then
                if not TimerStatus.Running then Timer.Start() end
            else
                if TimerStatus.Running then Timer.Stop() end
            end

            DisablerStatus.Enabled = LocalPlayer.Config.Disabler.Enabled
            if DisablerStatus.Enabled then
                if not DisablerStatus.Running then Disabler.Start() end
            else
                if DisablerStatus.Running then Disabler.Stop() end
            end

            AutoSprintStatus.Enabled = LocalPlayer.Config.AutoSprint.Enabled
            AutoSprintStatus.Speed = LocalPlayer.Config.AutoSprint.Speed
            if AutoSprintStatus.Enabled then
                if not AutoSprintStatus.Running then AutoSprint.Start() end
            else
                if AutoSprintStatus.Running then AutoSprint.Stop() end
            end

            DesyncStatus.Enabled = LocalPlayer.Config.Desync.Enabled
            DesyncStatus.Method = LocalPlayer.Config.Desync.Method
            DesyncStatus.ReverseY = LocalPlayer.Config.Desync.ReverseY
            DesyncStatus.Velocity = LocalPlayer.Config.Desync.Velocity
            DesyncStatus.Multiplier = LocalPlayer.Config.Desync.Multiplier
            if DesyncStatus.Enabled then
                if not DesyncStatus.Running then Desync.Start() end
            else
                if DesyncStatus.Running then Desync.Stop() end
            end

            AntiSpeedStatus.Enabled = LocalPlayer.Config.AntiSpeed.Enabled
            AntiSpeedStatus.Method = LocalPlayer.Config.AntiSpeed.Method
            if AntiSpeedStatus.Enabled then
                if not AntiSpeedStatus.Running then AntiSpeed.Start() end
            else
                if AntiSpeedStatus.Running then AntiSpeed.Stop() end
            end

            notify("LocalPlayer", "Config synchronized!", true)
        end
    })
end

function LocalPlayer.Init(UI, coreParam, notifyFunc)
    core = coreParam
    Services = core.Services
    PlayerData = core.PlayerData
    notify = notifyFunc
    LocalPlayerObj = PlayerData.LocalPlayer

    _G.setTimerSpeed = Timer.SetSpeed
    _G.setAutoSprintSpeed = AutoSprint.SetSpeed
    _G.setDesyncReverseY = Desync.SetReverseY
    _G.setDesyncVelocity = Desync.SetVelocity
    _G.setDesyncMultiplier = Desync.SetMultiplier

    if LocalPlayerObj then
        LocalPlayerObj.CharacterAdded:Connect(function(newChar)
            newChar:WaitForChild("Humanoid", 5)
            newChar:WaitForChild("HumanoidRootPart", 5)
            if AutoSprintStatus.Enabled then
                AutoSprint.Start()
            end
            if DesyncStatus.Enabled then
                Desync.Start()
            end
            if AntiSpeedStatus.Enabled then
                AntiSpeed.Start()
            end
        end)
    end

    if LocalPlayerObj.Character then
        if AutoSprintStatus.Enabled then
            AutoSprint.Start()
        end
        if DesyncStatus.Enabled then
            Desync.Start()
        end
        if AntiSpeedStatus.Enabled then
            AntiSpeed.Start()
        end
    end

    SetupUI(UI)
end

return LocalPlayer
