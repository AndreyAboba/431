local KillAura = {}

function KillAura.Init(UI, Core, notify)
    local Players = game:GetService("Players")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local RunService = game:GetService("RunService")
    local RemoteEvents = ReplicatedStorage:WaitForChild("RemoteEvents"):WaitForChild("ToServer")
    local ChangeStance = RemoteEvents:WaitForChild("ChangeStance")
    local Hit = RemoteEvents:WaitForChild("Hit")
    local Kick = RemoteEvents:WaitForChild("Kick")
    local Punch = RemoteEvents:WaitForChild("Punch")

    local LocalPlayer = Players.LocalPlayer

    -- Конфигурация
    local State = {
        Enabled = { Value = false, Default = false },
        Range = { Value = 10, Default = 10 },
        AttackCooldown = { Value = 0.24, Default = 0.24 },
        AntiBlock = { Value = true, Default = true },
        AntiParry = { Value = true, Default = true },
        HighlightBlock = { Value = true, Default = true },
        HighlightParry = { Value = true, Default = true },
        TeamCheck = { Value = true, Default = true }
    }

    local targetHighlight = nil -- Подсветка для одной цели
    local cachedSettings = nil -- Кэш для настроек
    local lastWeapon = nil -- Для отслеживания смены оружия
    local lastAttackTime = 0 -- Для отслеживания времени последней атаки
    local localCharacter = nil -- Кэш для персонажа локального игрока
    local localRootPart = nil -- Кэш для HumanoidRootPart
    local lastNotificationTime = 0
    local notificationDelay = 5

    -- Функция для проверки состояния игрока (Parrying, Riposte, Blocking)
    local function getPlayerStance(player)
        if player == LocalPlayer then
            return nil
        end
        local character = player.Character
        if character then
            local stanceValue = character:FindFirstChild("Stance", true)
            if stanceValue and stanceValue:IsA("StringValue") then
                return stanceValue.Value:lower()
            end
        end
        return nil
    end

    -- Функция для получения настроек оружия
    local function getWeaponSettings()
        if not localCharacter then return nil end
        
        local weapon
        for _, child in pairs(localCharacter:GetChildren()) do
            if child:IsA("Tool") then
                weapon = child
                break
            end
        end
        if not weapon then
            return nil
        end
        
        if weapon == lastWeapon and cachedSettings then
            return cachedSettings
        end
        
        local settingsModule = weapon:FindFirstChild("Settings")
        if not settingsModule then
            return nil
        end
        
        local success, settings = pcall(require, settingsModule)
        if not success or not settings or not settings.Windup or not settings.Release then
            return nil
        end
        
        settings.Windup = math.max(0, settings.Windup - 0.9)
        settings.Release = math.max(0, settings.Release - 1.4)
        
        cachedSettings = {
            weapon = weapon,
            windupTime = settings.Windup,
            releaseTime = settings.Release
        }
        lastWeapon = weapon
        return cachedSettings
    end

    -- Функция для проверки расстояния и состояния игрока
    local function canTargetPlayer(targetPlayer)
        if not (localCharacter and localRootPart and targetPlayer.Character) then return false end
        
        local targetRootPart = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
        local humanoid = targetPlayer.Character:FindFirstChild("Humanoid")
        if not (targetRootPart and humanoid) or humanoid.Health <= 0 or humanoid:GetState() ~= Enum.HumanoidStateType.Running then
            return false
        end
        
        local distance = (localRootPart.Position - targetRootPart.Position).Magnitude
        if distance > State.Range.Value then
            return false
        end
        
        if State.TeamCheck.Value and targetPlayer.Team and LocalPlayer.Team then
            local localTeamName = LocalPlayer.Team.Name
            local targetTeamName = targetPlayer.Team.Name
            if localTeamName == targetTeamName and localTeamName ~= "Spectators" then
                return false
            elseif localTeamName == "Spectators" then
                return true
            elseif localTeamName == "Guesmand" then
                return targetTeamName == "Spectators" or targetTeamName == "Sunderland"
            elseif localTeamName == "Sunderland" then
                return targetTeamName == "Guesmand" or targetTeamName == "Spectators"
            end
            return false
        end
        
        return true
    end

    -- Функция для создания/обновления подсветки для таргета
    local function updateTargetHighlight(player)
        if not player or not player.Character then
            if targetHighlight then
                targetHighlight:Destroy()
                targetHighlight = nil
            end
            return
        end
        
        local character = player.Character
        if not targetHighlight then
            targetHighlight = Instance.new("Highlight")
            targetHighlight.Name = "TargetHighlight"
            targetHighlight.Parent = character
            targetHighlight.Adornee = character
            targetHighlight.FillTransparency = 0.5
            targetHighlight.OutlineTransparency = 0
        end
        
        local stance = getPlayerStance(player)
        if stance and (stance == "parrying" or stance == "block" or stance == "blocking") and State.HighlightBlock.Value then
            targetHighlight.FillColor = Color3.fromRGB(0, 255, 0)
            targetHighlight.Enabled = true
        elseif stance and stance == "riposte" and State.HighlightParry.Value then
            targetHighlight.FillColor = Color3.fromRGB(0, 162, 255)
            targetHighlight.Enabled = true
        else
            targetHighlight.FillColor = Color3.fromRGB(255, 0, 0)
            targetHighlight.Enabled = true
        end
    end

    -- Функция для удаления подсветки
    local function removeTargetHighlight()
        if targetHighlight then
            targetHighlight:Destroy()
            targetHighlight = nil
        end
    end

    -- Обработка ухода игрока
    Players.PlayerRemoving:Connect(function(player)
        if targetHighlight and targetHighlight.Adornee == player.Character then
            removeTargetHighlight()
        end
    end)

    -- Обработка появления нового персонажа и смерти
    local function onCharacterAdded(player)
        player.CharacterAdded:Connect(function(character)
            local humanoid = character:WaitForChild("Humanoid", 5)
            if humanoid then
                humanoid.Died:Connect(function()
                    if targetHighlight and targetHighlight.Adornee == character then
                        removeTargetHighlight()
                    end
                end)
            end
        end)
    end

    for _, player in pairs(Players:GetPlayers()) do
        onCharacterAdded(player)
    end
    Players.PlayerAdded:Connect(onCharacterAdded)

    -- Функция для получения расстояния до игрока
    local function getDistanceToPlayer(targetPlayer)
        local targetRootPart = targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart")
        if targetRootPart and localRootPart then
            return (localRootPart.Position - targetRootPart.Position).Magnitude
        end
        return math.huge
    end

    -- Функция для выполнения пинка
    local function performKick(targetPlayer, targetCharacter, weapon)
        local targetHumanoid = targetCharacter:FindFirstChild("Humanoid")
        if not targetHumanoid then return false end
        
        local stance = getPlayerStance(targetPlayer)
        if not stance or stance ~= "riposte" or not State.AntiParry.Value then return false end
        
        ChangeStance:FireServer("KickWindup")
        task.wait(0.01)
        
        if not targetCharacter or not targetCharacter.Parent or not targetCharacter:FindFirstChild("Humanoid") then return false end
        stance = getPlayerStance(targetPlayer)
        if not stance or stance ~= "riposte" or not State.AntiParry.Value then return false end
        
        ChangeStance:FireServer("Kicking")
        task.wait(0)
        
        if not targetCharacter or not targetCharacter.Parent or not targetCharacter:FindFirstChild("Humanoid") then return false end
        stance = getPlayerStance(targetPlayer)
        if not stance or stance ~= "riposte" or not State.AntiParry.Value then return false end
        
        local targetHandle = targetCharacter:FindFirstChild("CollisionBubble") or targetCharacter:FindFirstChild("HumanoidRootPart")
        if not targetHandle then return false end
        
        Kick:FireServer(weapon, targetHandle, targetHumanoid)
        return true
    end

    -- Функция для выполнения пунша
    local function performPunch(targetPlayer, targetCharacter, weapon)
        local targetHumanoid = targetCharacter:FindFirstChild("Humanoid")
        if not targetHumanoid then return false end
        
        local stance = getPlayerStance(targetPlayer)
        if not stance or not ((stance == "parrying" or stance == "block" or stance == "blocking") and State.AntiBlock.Value) then return false end
        
        ChangeStance:FireServer("Punching")
        task.wait(0.01)
        
        if not targetCharacter or not targetCharacter.Parent or not targetCharacter:FindFirstChild("Humanoid") then return false end
        stance = getPlayerStance(targetPlayer)
        if not stance or not ((stance == "parrying" or stance == "block" or stance == "blocking") and State.AntiBlock.Value) then return false end
        
        local targetHandle = targetCharacter:FindFirstChild("HumanoidRootPart")
        if not (weapon and targetHandle) then return false end
        
        Punch:FireServer(weapon, targetHandle, targetHumanoid)
        return true
    end

    -- Основной цикл киллауры
    local function runKillAura()
        while true do
            RunService.Heartbeat:Wait()
            
            if not State.Enabled.Value then
                removeTargetHighlight()
                continue
            end
            
            localCharacter = LocalPlayer.Character
            localRootPart = localCharacter and localCharacter:FindFirstChild("HumanoidRootPart")
            if not (localCharacter and localRootPart) then
                removeTargetHighlight()
                continue
            end
            
            local settings = getWeaponSettings()
            if not settings then
                removeTargetHighlight()
                continue
            end
            
            if tick() - lastAttackTime < State.AttackCooldown.Value then
                continue
            end
            
            local closestTarget = nil
            local minDistance = math.huge
            for _, player in pairs(Players:GetPlayers()) do
                if player ~= LocalPlayer and canTargetPlayer(player) then
                    local distance = getDistanceToPlayer(player)
                    if distance < minDistance then
                        minDistance = distance
                        closestTarget = player
                    end
                end
            end
            
            if not closestTarget then
                removeTargetHighlight()
                continue
            end
            
            local targetCharacter = closestTarget.Character
            local targetHumanoid = targetCharacter and targetCharacter:FindFirstChild("Humanoid")
            if not (targetCharacter and targetHumanoid) then
                removeTargetHighlight()
                continue
            end
            
            updateTargetHighlight(closestTarget)
            local stance = getPlayerStance(closestTarget)
            
            local attacked = false
            if stance then
                if (stance == "parrying" or stance == "block" or stance == "blocking") and State.AntiBlock.Value then
                    attacked = performPunch(closestTarget, targetCharacter, settings.weapon)
                elseif stance == "riposte" and State.AntiParry.Value then
                    attacked = performKick(closestTarget, targetCharacter, settings.weapon)
                end
            end
            
            if not attacked then
                ChangeStance:FireServer("Windup")
                task.wait(settings.windupTime)
                
                if not targetCharacter or not targetCharacter.Parent or not targetCharacter:FindFirstChild("Humanoid") then
                    removeTargetHighlight()
                    continue
                end
                stance = getPlayerStance(closestTarget)
                if stance and ((stance == "parrying" or stance == "block" or stance == "blocking") and State.AntiBlock.Value or (stance == "riposte" and State.AntiParry.Value)) then
                    removeTargetHighlight()
                    continue
                end
                
                ChangeStance:FireServer("Release")
                task.wait(settings.releaseTime)
                
                if not targetCharacter or not targetCharacter.Parent or not targetCharacter:FindFirstChild("Humanoid") then
                    removeTargetHighlight()
                    continue
                end
                stance = getPlayerStance(closestTarget)
                if stance and ((stance == "parrying" or stance == "block" or stance == "blocking") and State.AntiBlock.Value or (stance == "riposte" and State.AntiParry.Value)) then
                    removeTargetHighlight()
                    continue
                end
                
                local targetHandle = targetCharacter:FindFirstChildOfClass("Accessory") and 
                    targetCharacter:FindFirstChildOfClass("Accessory"):FindFirstChild("Handle") or 
                    targetCharacter:FindFirstChild("HumanoidRootPart")
                if not targetHandle then
                    removeTargetHighlight()
                    continue
                end
                
                Hit:FireServer(settings.weapon, targetHandle, targetHumanoid)
                attacked = true
            end
            
            if attacked then
                lastAttackTime = tick()
            else
                removeTargetHighlight()
            end
        end
    end

    -- Запуск киллауры в отдельной задаче
    task.spawn(runKillAura)

    -- Инициализация UI
    if UI.Tabs and UI.Tabs.Combat then
        -- Создаем секцию KillAura, если она еще не существует
        UI.Sections.KillAura = UI.Sections.KillAura or UI.Tabs.Combat:Section({ Name = "KillAura" })
        
        UI.Sections.KillAura:Header({ Name = "KillAura" })
        UI.Sections.KillAura:Toggle({
            Name = "Enabled",
            Default = State.Enabled.Default,
            Callback = function(value)
                State.Enabled.Value = value
                if tick() - lastNotificationTime >= notificationDelay then
                    lastNotificationTime = tick()
                    notify("KillAura", "KillAura " .. (value and "Enabled" or "Disabled"), true)
                end
            end
        }, 'EnabledKA')
        UI.Sections.KillAura:Slider({
            Name = "Range",
            Minimum = 4,
            Maximum = 20,
            Default = State.Range.Default,
            Precision = 0,
            Callback = function(value)
                State.Range.Value = value
                if tick() - lastNotificationTime >= notificationDelay then
                    lastNotificationTime = tick()
                    notify("KillAura", "Range set to: " .. value)
                end
            end
        }, 'RangeKA')
        UI.Sections.KillAura:Slider({
            Name = "Attack Cooldown",
            Minimum = 0.1,
            Maximum = 0.5,
            Default = State.AttackCooldown.Default,
            Precision = 2,
            Callback = function(value)
                State.AttackCooldown.Value = value
                if tick() - lastNotificationTime >= notificationDelay then
                    lastNotificationTime = tick()
                    notify("KillAura", "Attack Cooldown set to: " .. value)
                end
            end
        }, 'AttackCooldownKA')
        UI.Sections.KillAura:Toggle({
            Name = "Anti Block",
            Default = State.AntiBlock.Default,
            Callback = function(value)
                State.AntiBlock.Value = value
                if tick() - lastNotificationTime >= notificationDelay then
                    lastNotificationTime = tick()
                    notify("KillAura", "Anti Block " .. (value and "Enabled" or "Disabled"), true)
                end
            end
        }, 'AntiBlockKA')
        UI.Sections.KillAura:Toggle({
            Name = "Anti Parry",
            Default = State.AntiParry.Default,
            Callback = function(value)
                State.AntiParry.Value = value
                if tick() - lastNotificationTime >= notificationDelay then
                    lastNotificationTime = tick()
                    notify("KillAura", "Anti Parry " .. (value and "Enabled" or "Disabled"), true)
                end
            end
        }, 'AntiParryKA')
        UI.Sections.KillAura:Toggle({
            Name = "Highlight Block",
            Default = State.HighlightBlock.Default,
            Callback = function(value)
                State.HighlightBlock.Value = value
                if tick() - lastNotificationTime >= notificationDelay then
                    lastNotificationTime = tick()
                    notify("KillAura", "Highlight Block " .. (value and "Enabled" or "Disabled"), true)
                end
            end
        }, 'HighlightBlockKA')
        UI.Sections.KillAura:Toggle({
            Name = "Highlight Parry",
            Default = State.HighlightParry.Default,
            Callback = function(value)
                State.HighlightParry.Value = value
                if tick() - lastNotificationTime >= notificationDelay then
                    lastNotificationTime = tick()
                    notify("KillAura", "Highlight Parry " .. (value and "Enabled" or "Disabled"), true)
                end
            end
        }, 'HighlightParryKA')
        UI.Sections.KillAura:Toggle({
            Name = "Team Check",
            Default = State.TeamCheck.Default,
            Callback = function(value)
                State.TeamCheck.Value = value
                if tick() - lastNotificationTime >= notificationDelay then
                    lastNotificationTime = tick()
                    notify("KillAura", "Team Check " .. (value and "Enabled" or "Disabled"), true)
                end
            end
        }, 'TeamCheckKA')
    end
end

return KillAura
