local ChinaHat = {}

function ChinaHat.Init(UI, Core, notify)
    local Players = Core.Services.Players
    local RunService = Core.Services.RunService
    local Workspace = Core.Services.Workspace
    local camera = Workspace.CurrentCamera

    local LocalPlayer = Core.PlayerData.LocalPlayer
    local localCharacter = LocalPlayer.Character
    local localHumanoid = localCharacter and localCharacter:FindFirstChild("Humanoid")

    local State = {
        ChinaHat = {
            HatActive = { Value = false, Default = false },
            HatScale = { Value = 0.75, Default = 0.75 },
            HatParts = { Value = 50, Default = 50 },
            HatGradientSpeed = { Value = 4, Default = 4 },
            HatGradient = { Value = true, Default = true },
            HatColor = { Value = Color3.fromRGB(0, 0, 255), Default = Color3.fromRGB(0, 0, 255) },
            HatYOffset = { Value = 1.6, Default = 1.6 },
            OutlineCircle = { Value = false, Default = false }
        },
        Circle = {
            CircleActive = { Value = false, Default = false },
            CircleRadius = { Value = 1.7, Default = 1.7 },
            CircleParts = { Value = 30, Default = 30 },
            CircleGradientSpeed = { Value = 4, Default = 4 },
            CircleGradient = { Value = true, Default = true },
            CircleColor = { Value = Color3.fromRGB(0, 0, 255), Default = Color3.fromRGB(0, 0, 255) },
            JumpAnimate = { Value = false, Default = false },
            CircleYOffset = { Value = -3, Default = -3 },
            AnimateCircle = { Value = "None", Default = "None", Options = {"None", "Orbit", "Jello", "OrbitSwirl"} },
            AnimationSpeed = { Value = 2, Default = 2 },
            OrbitTilt = { Value = 0.7, Default = 0.7 }
        },
        Nimb = {
            NimbActive = { Value = false, Default = false },
            NimbRadius = { Value = 1.7, Default = 1.7 },
            NimbParts = { Value = 30, Default = 30 },
            NimbGradientSpeed = { Value = 4, Default = 4 },
            NimbGradient = { Value = true, Default = true },
            NimbColor = { Value = Color3.fromRGB(0, 0, 255), Default = Color3.fromRGB(0, 0, 255) },
            NimbYOffset = { Value = 1.5, Default = 1.5 },
            AnimateNimb = { Value = "None", Default = "None", Options = {"None", "Orbit", "Jello", "OrbitSwirl"} },
            AnimationSpeed = { Value = 2, Default = 2 },
            OrbitTilt = { Value = 0.7, Default = 0.7 }
        }
    }

    local hatLines = {}
    local hatCircleQuads = {}
    local circleQuads = {}
    local circleBlurQuads = {}
    local nimbQuads = {}
    local nimbBlurQuads = {}
    local jumpAnimationActive = false
    local renderConnection
    local humanoidConnection

    local function destroyParts(parts)
        for _, part in ipairs(parts) do
            if part and part.Destroy then
                part:Destroy()
            end
        end
        table.clear(parts)
    end

    local function interpolateColor(color1, color2, factor)
        return Color3.new(
            color1.R + (color2.R - color1.R) * factor,
            color1.G + (color2.G - color1.G) * factor,
            color1.B + (color2.B - color1.B) * factor
        )
    end

    local function createHat()
        if not localCharacter or not localCharacter:FindFirstChild("Head") then return end
        destroyParts(hatLines)
        destroyParts(hatCircleQuads)
        local head = localCharacter.Head
        for i = 1, State.ChinaHat.HatParts.Value do
            local line = Drawing.new("Line")
            line.Visible = false
            line.Thickness = 0.06
            line.Transparency = 0.5
            line.Color = State.ChinaHat.HatGradient.Value and
                interpolateColor(Core.GradientColors.Color1.Value, Core.GradientColors.Color2.Value, i / State.ChinaHat.HatParts.Value) or
                State.ChinaHat.HatColor.Value
            table.insert(hatLines, line)
        end
        if State.ChinaHat.OutlineCircle.Value then
            for i = 1, State.ChinaHat.HatParts.Value do
                local quad = Drawing.new("Quad")
                quad.Visible = false
                quad.Thickness = 1
                quad.Filled = false
                quad.Color = State.ChinaHat.HatGradient.Value and
                    interpolateColor(Core.GradientColors.Color1.Value, Core.GradientColors.Color2.Value, i / State.ChinaHat.HatParts.Value) or
                    State.ChinaHat.HatColor.Value
                table.insert(hatCircleQuads, quad)
            end
        end
    end

    local function createCircle()
        if not localCharacter or not localCharacter:FindFirstChild("HumanoidRootPart") then return end
        destroyParts(circleQuads)
        destroyParts(circleBlurQuads)
        local partsCount = State.Circle.CircleParts.Value
        for i = 1, partsCount do
            local quad = Drawing.new("Quad")
            quad.Visible = false
            quad.Thickness = (State.Circle.AnimateCircle.Value == "Orbit" or State.Circle.AnimateCircle.Value == "OrbitSwirl") and 1.5 or 1
            quad.Filled = false
            quad.Color = State.Circle.CircleGradient.Value and
                interpolateColor(Core.GradientColors.Color1.Value, Core.GradientColors.Color2.Value, i / partsCount) or
                State.Circle.CircleColor.Value
            table.insert(circleQuads, quad)
        end
        if State.Circle.AnimateCircle.Value == "Orbit" or State.Circle.AnimateCircle.Value == "OrbitSwirl" then
            for i = 1, partsCount do
                local blurQuad = Drawing.new("Quad")
                blurQuad.Visible = false
                blurQuad.Thickness = 1.5
                blurQuad.Filled = true
                blurQuad.Color = circleQuads[i].Color
                blurQuad.Transparency = 0.3
                table.insert(circleBlurQuads, blurQuad)
            end
        end
    end

    local function createNimb()
        if not localCharacter or not localCharacter:FindFirstChild("HumanoidRootPart") then return end
        destroyParts(nimbQuads)
        destroyParts(nimbBlurQuads)
        local partsCount = State.Nimb.NimbParts.Value
        for i = 1, partsCount do
            local quad = Drawing.new("Quad")
            quad.Visible = false
            quad.Thickness = (State.Nimb.AnimateNimb.Value == "Orbit" or State.Nimb.AnimateNimb.Value == "OrbitSwirl") and 1.5 or 1
            quad.Filled = false
            quad.Color = State.Nimb.NimbGradient.Value and
                interpolateColor(Core.GradientColors.Color1.Value, Core.GradientColors.Color2.Value, i / partsCount) or
                State.Nimb.NimbColor.Value
            table.insert(nimbQuads, quad)
        end
        if State.Nimb.AnimateNimb.Value == "Orbit" or State.Nimb.AnimateNimb.Value == "OrbitSwirl" then
            for i = 1, partsCount do
                local blurQuad = Drawing.new("Quad")
                blurQuad.Visible = false
                blurQuad.Thickness = 1.5
                blurQuad.Filled = true
                blurQuad.Color = nimbQuads[i].Color
                blurQuad.Transparency = 0.3
                table.insert(nimbBlurQuads, blurQuad)
            end
        end
    end

    local function updateHat()
        if not State.ChinaHat.HatActive.Value or not localCharacter or not localCharacter:FindFirstChild("Head") then
            destroyParts(hatLines)
            destroyParts(hatCircleQuads)
            return
        end
        local head = localCharacter.Head
        local y = head.Position.Y + State.ChinaHat.HatYOffset.Value
        local t = tick()
        local hatHeight = 2.15 * State.ChinaHat.HatScale.Value
        local hatRadius = 1.95 * State.ChinaHat.HatScale.Value

        for i, line in ipairs(hatLines) do
            local angle = (i / State.ChinaHat.HatParts.Value) * 2 * math.pi
            local x = math.cos(angle) * hatRadius
            local z = math.sin(angle) * hatRadius
            local basePosition = Vector3.new(head.Position.X, y, head.Position.Z)
            local topPosition = Vector3.new(head.Position.X + x, y - hatHeight / 3, head.Position.Z + z)
            local offset = 0.03
            local direction = (topPosition - basePosition).Unit
            local endPoint = topPosition + direction * offset

            local screenStart, onScreenStart = camera:WorldToViewportPoint(basePosition)
            local screenEnd, onScreenEnd = camera:WorldToViewportPoint(endPoint)

            if onScreenStart and onScreenEnd and screenStart.Z > 0 and screenEnd.Z > 0 then
                line.From = Vector2.new(screenStart.X, screenStart.Y)
                line.To = Vector2.new(screenEnd.X, screenEnd.Y)
                line.Visible = true
                if State.ChinaHat.HatGradient.Value then
                    local factor = (math.sin(t * State.ChinaHat.HatGradientSpeed.Value + (i / State.ChinaHat.HatParts.Value) * 2 * math.pi) + 1) / 2
                    line.Color = interpolateColor(Core.GradientColors.Color1.Value, Core.GradientColors.Color2.Value, factor)
                else
                    line.Color = State.ChinaHat.HatColor.Value
                end
            else
                line.Visible = false
            end
        end

        if State.ChinaHat.OutlineCircle.Value and #hatCircleQuads > 0 then
            local topCenter = Vector3.new(0, 0, 0)
            local visibleEnds = 0
            for i, line in ipairs(hatLines) do
                if line.Visible then
                    local angle = (i / State.ChinaHat.HatParts.Value) * 2 * math.pi
                    local x = math.cos(angle) * hatRadius
                    local z = math.sin(angle) * hatRadius
                    local topPosition = Vector3.new(head.Position.X + x, y - hatHeight / 3, head.Position.Z + z)
                    topCenter = topCenter + topPosition
                    visibleEnds = visibleEnds + 1
                end
            end
            if visibleEnds > 0 then
                topCenter = topCenter / visibleEnds
            else
                topCenter = Vector3.new(head.Position.X, y - hatHeight / 3, head.Position.Z)
            end

            local screenCenter, onScreenCenter = camera:WorldToViewportPoint(topCenter)
            if onScreenCenter and screenCenter.Z > 0 then
                local circleRadius = 2.0 * State.ChinaHat.HatScale.Value
                for i, quad in ipairs(hatCircleQuads) do
                    local angle1 = ((i - 1) / #hatCircleQuads) * 2 * math.pi
                    local angle2 = (i / #hatCircleQuads) * 2 * math.pi
                    local point1 = topCenter + Vector3.new(math.cos(angle1) * circleRadius, 0, math.sin(angle1) * circleRadius)
                    local point2 = topCenter + Vector3.new(math.cos(angle2) * circleRadius, 0, math.sin(angle2) * circleRadius)
                    local screenPoint1, onScreen1 = camera:WorldToViewportPoint(point1)
                    local screenPoint2, onScreen2 = camera:WorldToViewportPoint(point2)

                    if onScreen1 and onScreen2 and screenPoint1.Z > 0 and screenPoint2.Z > 0 then
                        quad.PointA = Vector2.new(screenPoint1.X, screenPoint1.Y)
                        quad.PointB = Vector2.new(screenPoint2.X, screenPoint2.Y)
                        quad.PointC = Vector2.new(screenPoint2.X, screenPoint2.Y)
                        quad.PointD = Vector2.new(screenPoint1.X, screenPoint1.Y)
                        quad.Visible = true
                        if State.ChinaHat.HatGradient.Value then
                            local factor = (math.sin(t * State.ChinaHat.HatGradientSpeed.Value + (i / #hatCircleQuads) * 2 * math.pi) + 1) / 2
                            quad.Color = interpolateColor(Core.GradientColors.Color1.Value, Core.GradientColors.Color2.Value, factor)
                        else
                            quad.Color = State.ChinaHat.HatColor.Value
                        end
                    else
                        quad.Visible = false
                    end
                end
            else
                for _, quad in ipairs(hatCircleQuads) do
                    quad.Visible = false
                end
            end
        end
    end

    local function updateCircle()
        if not State.Circle.CircleActive.Value or not localCharacter or not localCharacter:FindFirstChild("HumanoidRootPart") then
            destroyParts(circleQuads)
            destroyParts(circleBlurQuads)
            return
        end
        local rootPart = localCharacter.HumanoidRootPart
        local t = tick()
        local yOffset
        if State.Circle.AnimateCircle.Value == "Jello" then
            yOffset = math.sin(t * State.Circle.AnimationSpeed.Value) * 2.75 - 0.25 -- От -3 до 2.5
        elseif State.Circle.AnimateCircle.Value == "Orbit" then
            yOffset = math.sin(t * State.Circle.AnimationSpeed.Value) * 0.5
        else
            yOffset = State.Circle.CircleYOffset.Value
        end
        local center = Vector3.new(rootPart.Position.X, rootPart.Position.Y + yOffset, rootPart.Position.Z)
        local screenCenter, onScreenCenter = camera:WorldToViewportPoint(center)
        if not (onScreenCenter and screenCenter.Z > 0) then
            for _, quad in ipairs(circleQuads) do
                quad.Visible = false
            end
            for _, blurQuad in ipairs(circleBlurQuads) do
                blurQuad.Visible = false
            end
            return
        end

        local circleRadius = State.Circle.CircleRadius.Value
        local partsCount = #circleQuads
        for i, quad in ipairs(circleQuads) do
            local angleOffset
            if State.Circle.AnimateCircle.Value == "Jello" then
                angleOffset = math.sin(t * State.Circle.AnimationSpeed.Value) * 0.2
            elseif State.Circle.AnimateCircle.Value == "OrbitSwirl" then
                angleOffset = t * (State.Circle.AnimationSpeed.Value * 0.75)
            else
                angleOffset = 0
            end

            local angle1 = ((i - 1) / partsCount) * 2 * math.pi + angleOffset
            local angle2 = (i / partsCount) * 2 * math.pi + angleOffset
            local depthOffset = (State.Circle.AnimateCircle.Value == "Orbit" or State.Circle.AnimateCircle.Value == "OrbitSwirl") and
                                (math.cos(t * State.Circle.AnimationSpeed.Value + (i / partsCount) * 2 * math.pi) * State.Circle.OrbitTilt.Value) or 0
            local point1 = center + Vector3.new(math.cos(angle1) * circleRadius, depthOffset, math.sin(angle1) * circleRadius)
            local point2 = center + Vector3.new(math.cos(angle2) * circleRadius, depthOffset, math.sin(angle2) * circleRadius)

            local screenPoint1, onScreen1 = camera:WorldToViewportPoint(point1)
            local screenPoint2, onScreen2 = camera:WorldToViewportPoint(point2)

            if onScreen1 and onScreen2 and screenPoint1.Z > 0 and screenPoint2.Z > 0 then
                if State.Circle.AnimateCircle.Value == "Orbit" or State.Circle.AnimateCircle.Value == "OrbitSwirl" then
                    local point3 = center + Vector3.new(math.cos(angle1) * circleRadius * 0.95, depthOffset, math.sin(angle1) * circleRadius * 0.95)
                    local point4 = center + Vector3.new(math.cos(angle2) * circleRadius * 0.95, depthOffset, math.sin(angle2) * circleRadius * 0.95)
                    local screenPoint3, onScreen3 = camera:WorldToViewportPoint(point3)
                    local screenPoint4, onScreen4 = camera:WorldToViewportPoint(point4)

                    if onScreen3 and onScreen4 and screenPoint3.Z > 0 and screenPoint4.Z > 0 then
                        quad.PointA = Vector2.new(screenPoint3.X, screenPoint3.Y)
                        quad.PointB = Vector2.new(screenPoint4.X, screenPoint4.Y)
                        quad.PointC = Vector2.new(screenPoint2.X, screenPoint2.Y)
                        quad.PointD = Vector2.new(screenPoint1.X, screenPoint1.Y)
                        quad.Visible = true
                    else
                        quad.Visible = false
                    end
                else
                    quad.PointA = Vector2.new(screenPoint1.X, screenPoint1.Y)
                    quad.PointB = Vector2.new(screenPoint2.X, screenPoint2.Y)
                    quad.PointC = Vector2.new(screenPoint2.X, screenPoint2.Y)
                    quad.PointD = Vector2.new(screenPoint1.X, screenPoint1.Y)
                    quad.Visible = true
                end

                if State.Circle.CircleGradient.Value then
                    local factor = (math.sin(t * State.Circle.CircleGradientSpeed.Value + (i / partsCount) * 2 * math.pi) + 1) / 2
                    quad.Color = interpolateColor(Core.GradientColors.Color1.Value, Core.GradientColors.Color2.Value, factor)
                else
                    quad.Color = State.Circle.CircleColor.Value
                end
            else
                quad.Visible = false
            end
        end

        if State.Circle.AnimateCircle.Value == "Orbit" or State.Circle.AnimateCircle.Value == "OrbitSwirl" then
            for i, blurQuad in ipairs(circleBlurQuads) do
                local angle1 = ((i - 1) / partsCount) * 2 * math.pi + (State.Circle.AnimateCircle.Value == "OrbitSwirl" and (t * (State.Circle.AnimationSpeed.Value * 0.75)) or 0)
                local angle2 = (i / partsCount) * 2 * math.pi + (State.Circle.AnimateCircle.Value == "OrbitSwirl" and (t * (State.Circle.AnimationSpeed.Value * 0.75)) or 0)
                local blurOffset = 0.05
                local blurCenter = Vector3.new(rootPart.Position.X, rootPart.Position.Y + yOffset - blurOffset, rootPart.Position.Z)
                local blurPoint1 = blurCenter + Vector3.new(math.cos(angle1) * circleRadius, depthOffset, math.sin(angle1) * circleRadius)
                local blurPoint2 = blurCenter + Vector3.new(math.cos(angle2) * circleRadius, depthOffset, math.sin(angle2) * circleRadius)
                local blurPoint3 = blurCenter + Vector3.new(math.cos(angle1) * circleRadius * 0.95, depthOffset, math.sin(angle1) * circleRadius * 0.95)
                local blurPoint4 = blurCenter + Vector3.new(math.cos(angle2) * circleRadius * 0.95, depthOffset, math.sin(angle2) * circleRadius * 0.95)

                local screenBlurPoint1, onScreenBlur1 = camera:WorldToViewportPoint(blurPoint1)
                local screenBlurPoint2, onScreenBlur2 = camera:WorldToViewportPoint(blurPoint2)
                local screenBlurPoint3, onScreenBlur3 = camera:WorldToViewportPoint(blurPoint3)
                local screenBlurPoint4, onScreenBlur4 = camera:WorldToViewportPoint(blurPoint4)

                if onScreenBlur1 and onScreenBlur2 and onScreenBlur3 and onScreenBlur4 and screenBlurPoint1.Z > 0 and screenBlurPoint2.Z > 0 and screenBlurPoint3.Z > 0 and screenBlurPoint4.Z > 0 then
                    blurQuad.PointA = Vector2.new(screenBlurPoint3.X, screenBlurPoint3.Y)
                    blurQuad.PointB = Vector2.new(screenBlurPoint4.X, screenBlurPoint4.Y)
                    blurQuad.PointC = Vector2.new(screenBlurPoint2.X, screenBlurPoint2.Y)
                    blurQuad.PointD = Vector2.new(screenBlurPoint1.X, screenBlurPoint1.Y)
                    blurQuad.Visible = true
                    blurQuad.Color = circleQuads[i].Color
                else
                    blurQuad.Visible = false
                end
            end
        end
    end

    local function updateNimb()
        if not State.Nimb.NimbActive.Value or not localCharacter or not localCharacter:FindFirstChild("HumanoidRootPart") then
            destroyParts(nimbQuads)
            destroyParts(nimbBlurQuads)
            return
        end
        local rootPart = localCharacter.HumanoidRootPart
        local t = tick()
        local yOffset
        if State.Nimb.AnimateNimb.Value == "Jello" then
            yOffset = math.sin(t * State.Nimb.AnimationSpeed.Value) * 2.75 - 0.25 -- От -3 до 2.5
        elseif State.Nimb.AnimateNimb.Value == "Orbit" then
            yOffset = math.sin(t * State.Nimb.AnimationSpeed.Value) * 0.5
        else
            yOffset = State.Nimb.NimbYOffset.Value
        end
        local center = Vector3.new(rootPart.Position.X, rootPart.Position.Y + yOffset, rootPart.Position.Z)
        local screenCenter, onScreenCenter = camera:WorldToViewportPoint(center)
        if not (onScreenCenter and screenCenter.Z > 0) then
            for _, quad in ipairs(nimbQuads) do
                quad.Visible = false
            end
            for _, blurQuad in ipairs(nimbBlurQuads) do
                blurQuad.Visible = false
            end
            return
        end

        local nimbRadius = State.Nimb.NimbRadius.Value
        local partsCount = #nimbQuads
        for i, quad in ipairs(nimbQuads) do
            local angleOffset
            if State.Nimb.AnimateNimb.Value == "Jello" then
                angleOffset = math.sin(t * State.Nimb.AnimationSpeed.Value) * 0.2
            elseif State.Nimb.AnimateNimb.Value == "OrbitSwirl" then
                angleOffset = t * (State.Nimb.AnimationSpeed.Value * 0.75)
            else
                angleOffset = 0
            end

            local angle1 = ((i - 1) / partsCount) * 2 * math.pi + angleOffset
            local angle2 = (i / partsCount) * 2 * math.pi + angleOffset
            local depthOffset = (State.Nimb.AnimateNimb.Value == "Orbit" or State.Nimb.AnimateNimb.Value == "OrbitSwirl") and
                                (math.cos(t * State.Nimb.AnimationSpeed.Value + (i / partsCount) * 2 * math.pi) * State.Nimb.OrbitTilt.Value) or 0
            local point1 = center + Vector3.new(math.cos(angle1) * nimbRadius, depthOffset, math.sin(angle1) * nimbRadius)
            local point2 = center + Vector3.new(math.cos(angle2) * nimbRadius, depthOffset, math.sin(angle2) * nimbRadius)

            local screenPoint1, onScreen1 = camera:WorldToViewportPoint(point1)
            local screenPoint2, onScreen2 = camera:WorldToViewportPoint(point2)

            if onScreen1 and onScreen2 and screenPoint1.Z > 0 and screenPoint2.Z > 0 then
                if State.Nimb.AnimateNimb.Value == "Orbit" or State.Nimb.AnimateNimb.Value == "OrbitSwirl" then
                    local point3 = center + Vector3.new(math.cos(angle1) * nimbRadius * 0.95, depthOffset, math.sin(angle1) * nimbRadius * 0.95)
                    local point4 = center + Vector3.new(math.cos(angle2) * nimbRadius * 0.95, depthOffset, math.sin(angle2) * nimbRadius * 0.95)
                    local screenPoint3, onScreen3 = camera:WorldToViewportPoint(point3)
                    local screenPoint4, onScreen4 = camera:WorldToViewportPoint(point4)

                    if onScreen3 and onScreen4 and screenPoint3.Z > 0 and screenPoint4.Z > 0 then
                        quad.PointA = Vector2.new(screenPoint3.X, screenPoint3.Y)
                        quad.PointB = Vector2.new(screenPoint4.X, screenPoint4.Y)
                        quad.PointC = Vector2.new(screenPoint2.X, screenPoint2.Y)
                        quad.PointD = Vector2.new(screenPoint1.X, screenPoint1.Y)
                        quad.Visible = true
                    else
                        quad.Visible = false
                    end
                else
                    quad.PointA = Vector2.new(screenPoint1.X, screenPoint1.Y)
                    quad.PointB = Vector2.new(screenPoint2.X, screenPoint2.Y)
                    quad.PointC = Vector2.new(screenPoint2.X, screenPoint2.Y)
                    quad.PointD = Vector2.new(screenPoint1.X, screenPoint1.Y)
                    quad.Visible = true
                end

                if State.Nimb.NimbGradient.Value then
                    local factor = (math.sin(t * State.Nimb.NimbGradientSpeed.Value + (i / partsCount) * 2 * math.pi) + 1) / 2
                    quad.Color = interpolateColor(Core.GradientColors.Color1.Value, Core.GradientColors.Color2.Value, factor)
                else
                    quad.Color = State.Nimb.NimbColor.Value
                end
            else
                quad.Visible = false
            end
        end

        if State.Nimb.AnimateNimb.Value == "Orbit" or State.Nimb.AnimateNimb.Value == "OrbitSwirl" then
            for i, blurQuad in ipairs(nimbBlurQuads) do
                local angle1 = ((i - 1) / partsCount) * 2 * math.pi + (State.Nimb.AnimateNimb.Value == "OrbitSwirl" and (t * (State.Nimb.AnimationSpeed.Value * 0.75)) or 0)
                local angle2 = (i / partsCount) * 2 * math.pi + (State.Nimb.AnimateNimb.Value == "OrbitSwirl" and (t * (State.Nimb.AnimationSpeed.Value * 0.75)) or 0)
                local blurOffset = 0.05
                local blurCenter = Vector3.new(rootPart.Position.X, rootPart.Position.Y + yOffset - blurOffset, rootPart.Position.Z)
                local blurPoint1 = blurCenter + Vector3.new(math.cos(angle1) * nimbRadius, depthOffset, math.sin(angle1) * nimbRadius)
                local blurPoint2 = blurCenter + Vector3.new(math.cos(angle2) * nimbRadius, depthOffset, math.sin(angle2) * nimbRadius)
                local blurPoint3 = blurCenter + Vector3.new(math.cos(angle1) * nimbRadius * 0.95, depthOffset, math.sin(angle1) * nimbRadius * 0.95)
                local blurPoint4 = blurCenter + Vector3.new(math.cos(angle2) * nimbRadius * 0.95, depthOffset, math.sin(angle2) * nimbRadius * 0.95)

                local screenBlurPoint1, onScreenBlur1 = camera:WorldToViewportPoint(blurPoint1)
                local screenBlurPoint2, onScreenBlur2 = camera:WorldToViewportPoint(blurPoint2)
                local screenBlurPoint3, onScreenBlur3 = camera:WorldToViewportPoint(blurPoint3)
                local screenBlurPoint4, onScreenBlur4 = camera:WorldToViewportPoint(blurPoint4)

                if onScreenBlur1 and onScreenBlur2 and onScreenBlur3 and onScreenBlur4 and screenBlurPoint1.Z > 0 and screenBlurPoint2.Z > 0 and screenBlurPoint3.Z > 0 and screenBlurPoint4.Z > 0 then
                    blurQuad.PointA = Vector2.new(screenBlurPoint3.X, screenBlurPoint3.Y)
                    blurQuad.PointB = Vector2.new(screenBlurPoint4.X, screenBlurPoint4.Y)
                    blurQuad.PointC = Vector2.new(screenBlurPoint2.X, screenBlurPoint2.Y)
                    blurQuad.PointD = Vector2.new(screenBlurPoint1.X, screenBlurPoint1.Y)
                    blurQuad.Visible = true
                    blurQuad.Color = nimbQuads[i].Color
                else
                    blurQuad.Visible = false
                end
            end
        end
    end

    local function animateJump()
        if not State.Circle.JumpAnimate.Value or #circleQuads == 0 or jumpAnimationActive then return end
        jumpAnimationActive = true
        local t = 0
        local duration = 0.55
        local initialRadius = State.Circle.CircleRadius.Value
        local maxRadius = initialRadius * 1.6
        while t < duration do
            local dt = RunService.RenderStepped:Wait()
            t = t + dt
            local factor = t / duration
            State.Circle.CircleRadius.Value = initialRadius + (maxRadius - initialRadius) * math.sin(factor * math.pi)
            updateCircle()
        end
        State.Circle.CircleRadius.Value = initialRadius
        jumpAnimationActive = false
    end

    local function toggleHat(value)
        State.ChinaHat.HatActive.Value = value
        if value then
            createHat()
            notify("ChinaHat", "Hat Enabled", true)
        else
            destroyParts(hatLines)
            destroyParts(hatCircleQuads)
            notify("ChinaHat", "Hat Disabled", true)
        end
    end

    local function toggleCircle(value)
        State.Circle.CircleActive.Value = value
        if value then
            createCircle()
            notify("Circle", "Circle Enabled", true)
        else
            destroyParts(circleQuads)
            destroyParts(circleBlurQuads)
            notify("Circle", "Circle Disabled", true)
        end
    end

    local function toggleNimb(value)
        State.Nimb.NimbActive.Value = value
        if value then
            createNimb()
            notify("Nimb", "Nimb Enabled", true)
        else
            destroyParts(nimbQuads)
            destroyParts(nimbBlurQuads)
            notify("Nimb", "Nimb Disabled", true)
        end
    end

    local function onStateChanged(oldState, newState)
        if State.Circle.JumpAnimate.Value and newState == Enum.HumanoidStateType.Jumping and not jumpAnimationActive then
            animateJump()
        end
    end

    renderConnection = RunService.RenderStepped:Connect(function()
        if localCharacter then
            updateHat()
            updateCircle()
            updateNimb()
        else
            destroyParts(hatLines)
            destroyParts(hatCircleQuads)
            destroyParts(circleQuads)
            destroyParts(circleBlurQuads)
            destroyParts(nimbQuads)
            destroyParts(nimbBlurQuads)
        end
    end)

    local function connectHumanoid(character)
        if humanoidConnection then
            humanoidConnection:Disconnect()
        end
        local humanoid = character:WaitForChild("Humanoid", 5)
        if humanoid then
            localHumanoid = humanoid
            humanoidConnection = humanoid.StateChanged:Connect(onStateChanged)
        end
    end

    LocalPlayer.CharacterAdded:Connect(connectHumanoid)
    if localCharacter then
        connectHumanoid(localCharacter)
    end

    if UI.Tabs and UI.Tabs.Visuals then
        local chinaHatSection = UI.Sections.ChinaHat or UI.Tabs.Visuals:Section({ Name = "ChinaHat", Side = "Left" })
        UI.Sections.ChinaHat = chinaHatSection
        chinaHatSection:Header({ Name = "China Hat" })
        chinaHatSection:SubLabel({ Text = "Displays a hat-like effect above the player's head" })
        chinaHatSection:Toggle({
            Name = "Hat Enabled",
            Default = State.ChinaHat.HatActive.Default,
            Callback = function(value)
                toggleHat(value)
            end,
            'HatEnabled'
        })
        chinaHatSection:Slider({
            Name = "Hat Scale",
            Minimum = 0.5,
            Maximum = 2.0,
            Default = State.ChinaHat.HatScale.Default,
            Precision = 2,
            Callback = function(value)
                State.ChinaHat.HatScale.Value = value
                if State.ChinaHat.HatActive.Value then
                    createHat()
                end
                notify("ChinaHat", "Hat Scale set to: " .. value, false)
            end,
            'HatScale'
        })
        chinaHatSection:Slider({
            Name = "Hat Parts",
            Minimum = 20,
            Maximum = 150,
            Default = State.ChinaHat.HatParts.Value,
            Precision = 0,
            Callback = function(value)
                State.ChinaHat.HatParts.Value = value
                if State.ChinaHat.HatActive.Value then
                    createHat()
                end
                notify("ChinaHat", "Hat Parts set to: " .. value, false)
            end,
            'HatParts'
        })
        chinaHatSection:Slider({
            Name = "Gradient Speed",
            Minimum = 1,
            Maximum = 10,
            Default = State.ChinaHat.HatGradientSpeed.Default,
            Precision = 1,
            Callback = function(value)
                State.ChinaHat.HatGradientSpeed.Value = value
                notify("ChinaHat", "Hat Gradient Speed set to: " .. value, false)
            end,
            'HatGradientSpeed'
        })
        chinaHatSection:Toggle({
            Name = "Gradient",
            Default = State.ChinaHat.HatGradient.Default,
            Callback = function(value)
                State.ChinaHat.HatGradient.Value = value
                if State.ChinaHat.HatActive.Value then
                    createHat()
                end
                notify("ChinaHat", "Hat Gradient: " .. (value and "Enabled" or "Disabled"), true)
            end,
            'HatGradient'
        })
        chinaHatSection:Colorpicker({
            Name = "Color",
            Default = State.ChinaHat.HatColor.Default,
            Callback = function(value)
                State.ChinaHat.HatColor.Value = value
                if State.ChinaHat.HatActive.Value and not State.ChinaHat.HatGradient.Value then
                    createHat()
                end
                notify("ChinaHat", "Hat Color updated", false)
            end,
            'HatColor'
        })
        chinaHatSection:Slider({
            Name = "Y Offset",
            Minimum = -5,
            Maximum = 5,
            Default = State.ChinaHat.HatYOffset.Default,
            Precision = 2,
            Callback = function(value)
                State.ChinaHat.HatYOffset.Value = value
                notify("ChinaHat", "Hat Y Offset set to: " .. value, false)
            end,
            'HatYOffset'
        })
        chinaHatSection:Toggle({
            Name = "Outline Circle",
            Default = State.ChinaHat.OutlineCircle.Default,
            Callback = function(value)
                State.ChinaHat.OutlineCircle.Value = value
                if State.ChinaHat.HatActive.Value then
                    createHat()
                end
                notify("ChinaHat", "Outline Circle: " .. (value and "Enabled" or "Disabled"), true)
            end,
            'OutlineCircle'
        })

        local circleSection = UI.Sections.Circle or UI.Tabs.Visuals:Section({ Name = "Circle", Side = "Left" })
        UI.Sections.Circle = circleSection
        circleSection:Header({ Name = "Circle" })
        circleSection:SubLabel({ Text = "Displays a circle effect at the player's feet" })
        circleSection:Toggle({
            Name = "Circle Enabled",
            Default = State.Circle.CircleActive.Default,
            Callback = function(value)
                toggleCircle(value)
            end,
            'CircleEnabled'
        })
        circleSection:Slider({
            Name = "Circle Radius",
            Minimum = 1.0,
            Maximum = 3.0,
            Default = State.Circle.CircleRadius.Default,
            Precision = 1,
            Callback = function(value)
                State.Circle.CircleRadius.Value = value
                if State.Circle.CircleActive.Value then
                    createCircle()
                end
                notify("Circle", "Circle Radius set to: " .. value, false)
            end,
            'CircleRadius'
        })
        circleSection:Slider({
            Name = "Circle Parts",
            Minimum = 20,
            Maximum = 100,
            Default = State.Circle.CircleParts.Default,
            Precision = 0,
            Callback = function(value)
                State.Circle.CircleParts.Value = value
                if State.Circle.CircleActive.Value then
                    createCircle()
                end
                notify("Circle", "Circle Parts set to: " .. value, false)
            end,
            'CircleParts'
        })
        circleSection:Slider({
            Name = "Gradient Speed",
            Minimum = 1,
            Maximum = 10,
            Default = State.Circle.CircleGradientSpeed.Default,
            Precision = 1,
            Callback = function(value)
                State.Circle.CircleGradientSpeed.Value = value
                notify("Circle", "Circle Gradient Speed set to: " .. value, false)
            end,
            'CircleGradientSpeed'
        })
        circleSection:Toggle({
            Name = "Gradient",
            Default = State.Circle.CircleGradient.Default,
            Callback = function(value)
                State.Circle.CircleGradient.Value = value
                if State.Circle.CircleActive.Value then
                    createCircle()
                end
                notify("Circle", "Circle Gradient: " .. (value and "Enabled" or "Disabled"), true)
            end,
            'CircleGradient'
        })
        circleSection:Colorpicker({
            Name = "Color",
            Default = State.Circle.CircleColor.Default,
            Callback = function(value)
                State.Circle.CircleColor.Value = value
                if State.Circle.CircleActive.Value and not State.Circle.CircleGradient.Value then
                    createCircle()
                end
                notify("Circle", "Circle Color updated", false)
            end,
            'CircleColor'
        })
        circleSection:Toggle({
            Name = "Jump Animate",
            Default = State.Circle.JumpAnimate.Default,
            Callback = function(value)
                State.Circle.JumpAnimate.Value = value
                notify("Circle", "Jump Animation: " .. (value and "Enabled" or "Disabled"), true)
            end,
            'JumpAnimate'
        })
        circleSection:Dropdown({
            Name = "Animate Circle",
            Default = State.Circle.AnimateCircle.Default,
            Options = State.Circle.AnimateCircle.Options,
            Callback = function(value)
                State.Circle.AnimateCircle.Value = value
                if State.Circle.CircleActive.Value then
                    createCircle()
                end
                notify("Circle", "Animate Circle set to: " .. value, false)
            end,
            'AnimateCircle'
        })
        circleSection:Slider({
            Name = "Animation Speed",
            Minimum = 1,
            Maximum = 5,
            Default = State.Circle.AnimationSpeed.Default,
            Precision = 1,
            Callback = function(value)
                State.Circle.AnimationSpeed.Value = value
                notify("Circle", "Animation Speed set to: " .. value, false)
            end,
            'CircleAnimationSpeed'
        })
        circleSection:Slider({
            Name = "Orbit Tilt",
            Minimum = 0.1,
            Maximum = 1.0,
            Default = State.Circle.OrbitTilt.Default,
            Precision = 2,
            Callback = function(value)
                State.Circle.OrbitTilt.Value = value
                if State.Circle.CircleActive.Value and (State.Circle.AnimateCircle.Value == "Orbit" or State.Circle.AnimateCircle.Value == "OrbitSwirl") then
                    createCircle()
                end
                notify("Circle", "Orbit Tilt set to: " .. value, false)
            end,
            'CircleOrbitTilt'
        })

        local nimbSection = UI.Sections.Nimb or UI.Tabs.Visuals:Section({ Name = "Nimb", Side = "Right" })
        UI.Sections.Nimb = nimbSection
        nimbSection:Header({ Name = "Nimb" })
        nimbSection:SubLabel({ Text = "Displays a circle effect above the player's head" })
        nimbSection:Toggle({
            Name = "Nimb Enabled",
            Default = State.Nimb.NimbActive.Default,
            Callback = function(value)
                toggleNimb(value)
            end,
            'NimbEnabled'
        })
        nimbSection:Slider({
            Name = "Nimb Radius",
            Minimum = 1.0,
            Maximum = 3.0,
            Default = State.Nimb.NimbRadius.Default,
            Precision = 1,
            Callback = function(value)
                State.Nimb.NimbRadius.Value = value
                if State.Nimb.NimbActive.Value then
                    createNimb()
                end
                notify("Nimb", "Nimb Radius set to: " .. value, false)
            end,
            'NimbRadius'
        })
        nimbSection:Slider({
            Name = "Nimb Parts",
            Minimum = 20,
            Maximum = 100,
            Default = State.Nimb.NimbParts.Default,
            Precision = 0,
            Callback = function(value)
                State.Nimb.NimbParts.Value = value
                if State.Nimb.NimbActive.Value then
                    createNimb()
                end
                notify("Nimb", "Nimb Parts set to: " .. value, false)
            end,
            'NimbParts'
        })
        nimbSection:Slider({
            Name = "Gradient Speed",
            Minimum = 1,
            Maximum = 10,
            Default = State.Nimb.NimbGradientSpeed.Default,
            Precision = 1,
            Callback = function(value)
                State.Nimb.NimbGradientSpeed.Value = value
                notify("Nimb", "Nimb Gradient Speed set to: " .. value, false)
            end,
            'NimbGradientSpeed'
        })
        nimbSection:Toggle({
            Name = "Gradient",
            Default = State.Nimb.NimbGradient.Default,
            Callback = function(value)
                State.Nimb.NimbGradient.Value = value
                if State.Nimb.NimbActive.Value then
                    createNimb()
                end
                notify("Nimb", "Nimb Gradient: " .. (value and "Enabled" or "Disabled"), true)
            end,
            'NimbGradient'
        })
        nimbSection:Colorpicker({
            Name = "Color",
            Default = State.Nimb.NimbColor.Default,
            Callback = function(value)
                State.Nimb.NimbColor.Value = value
                if State.Nimb.NimbActive.Value and not State.Nimb.NimbGradient.Value then
                    createNimb()
                end
                notify("Nimb", "Nimb Color updated", false)
            end,
            'NimbColor'
        })
        nimbSection:Slider({
            Name = "Y Offset",
            Minimum = 1,
            Maximum = 3,
            Default = State.Nimb.NimbYOffset.Default,
            Precision = 2,
            Callback = function(value)
                State.Nimb.NimbYOffset.Value = value
                notify("Nimb", "Nimb Y Offset set to: " .. value, false)
            end,
            'NimbYOffset'
        })
        nimbSection:Dropdown({
            Name = "Animate Nimb",
            Default = State.Nimb.AnimateNimb.Default,
            Options = State.Nimb.AnimateNimb.Options,
            Callback = function(value)
                State.Nimb.AnimateNimb.Value = value
                if State.Nimb.NimbActive.Value then
                    createNimb()
                end
                notify("Nimb", "Animate Nimb set to: " .. value, false)
            end,
            'AnimateNimb'
        })
        nimbSection:Slider({
            Name = "Animation Speed",
            Minimum = 1,
            Maximum = 5,
            Default = State.Nimb.AnimationSpeed.Default,
            Precision = 1,
            Callback = function(value)
                State.Nimb.AnimationSpeed.Value = value
                notify("Nimb", "Animation Speed set to: " .. value, false)
            end,
            'NimbAnimationSpeed'
        })
        nimbSection:Slider({
            Name = "Orbit Tilt",
            Minimum = 0.1,
            Maximum = 1.0,
            Default = State.Nimb.OrbitTilt.Default,
            Precision = 2,
            Callback = function(value)
                State.Nimb.OrbitTilt.Value = value
                if State.Nimb.NimbActive.Value and (State.Nimb.AnimateNimb.Value == "Orbit" or State.Nimb.AnimateNimb.Value == "OrbitSwirl") then
                    createNimb()
                end
                notify("Nimb", "Orbit Tilt set to: " .. value, false)
            end,
            'NimbOrbitTilt'
        })
    end

    function ChinaHat:Destroy()
        destroyParts(hatLines)
        destroyParts(hatCircleQuads)
        destroyParts(circleQuads)
        destroyParts(circleBlurQuads)
        destroyParts(nimbQuads)
        destroyParts(nimbBlurQuads)
        if renderConnection then
            renderConnection:Disconnect()
        end
        if humanoidConnection then
            humanoidConnection:Disconnect()
        end
    end

    return ChinaHat
end

return ChinaHat
