local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local checkcaller = checkcaller
local newcclosure = newcclosure
local hookmetamethod = hookmetamethod
local getcallingscript = getcallingscript
local setsimulationradius = setsimulationradius
local setfflag = setfflag

local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

-- Конфигурация модуля
local Desync = {}
Desync.Config = {
    Desync = {
        Enabled = false,
        Method = "Underground",
        ServerSync = "v1",
        UndergroundY = -10000,
        UndergroundYUndergroundV2 = -50,
        ResolverNoise = 7,
        RandomVectorEnabled = false,
        RandomVectorDistance = 5,
        RandomVectorSpeed = 10,
        RandomVectorAmplitude = 2,
        HitboxRollDistance = 15,
        AngleJitterValue = 1000,
        ToggleKey = nil
    }
}

-- Состояние модуля
local DesyncStatus = {
    Enabled = Desync.Config.Desync.Enabled,
    Running = false,
    Method = Desync.Config.Desync.Method,
    ServerSync = Desync.Config.Desync.ServerSync,
    UndergroundActive = false,
    UndergroundV2Active = false,
    AngleJitterActive = false,
    HitboxRollAngle = 0,
    Key = Desync.Config.Desync.ToggleKey,
    LastServerUpdate = 0,
    SimulationRadius = math.huge,
    ServerUpdateInterval = 0.1,
    AntiResolverEnabled = true
}

local DesyncTypes = {CFrame = CFrame.new(), AssemblyLinearVelocity = Vector3.new()}
local PositionHistory = {}

-- Установка Fast Flags
setfflag("FInt_MaxPhysicsStepsPerFrame", "100")
setfflag("FInt_SimulationSyncInterval", "0.01")
setfflag("FInt_MaxSimulationSteps", "500")

-- Установка радиуса симуляции
setsimulationradius(DesyncStatus.SimulationRadius)

local function RandomNumberRange(a)
    return math.random(-a * 100, a * 100) / 100
end

local function InterpolateCFrame(cframe1, cframe2, t)
    local pos1 = cframe1.Position
    local pos2 = cframe2.Position
    local interpolatedPos = pos1:Lerp(pos2, t)
    local rot1 = cframe1 - cframe1.Position
    local rot2 = cframe2 - cframe2.Position
    local interpolatedRot = rot1:Lerp(rot2, t)
    return CFrame.new(interpolatedPos) * interpolatedRot
end

-- Хук для Underground (CFrame)
local OriginalCFrameIndex = nil
OriginalCFrameIndex = hookmetamethod(game, "__index", newcclosure(function(self, key)
    if DesyncStatus.Running and not checkcaller() and key == "CFrame" and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and self == LocalPlayer.Character.HumanoidRootPart then
        if DesyncStatus.Method == "Underground" then
            return DesyncTypes.CFrame or CFrame.new()
        end
        if DesyncStatus.ServerSync == "proxy" then
            local callingScript = getcallingscript()
            if callingScript and not string.find(tostring(callingScript), "Server") and not string.find(tostring(callingScript), "Network") then
                return DesyncTypes.CFrame or CFrame.new()
            end
        elseif DesyncStatus.ServerSync == "v1" then
            return DesyncTypes.CFrame or CFrame.new()
        end
    end
    return OriginalCFrameIndex(self, key)
end))

-- Хук для HitboxRoll (AssemblyLinearVelocity)
local OriginalAssemblyVelocityIndex = nil
OriginalAssemblyVelocityIndex = hookmetamethod(game, "__index", newcclosure(function(self, key)
    if DesyncStatus.Running and not checkcaller() and key == "AssemblyLinearVelocity" and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and self == LocalPlayer.Character.HumanoidRootPart then
        local realVelocity = OriginalAssemblyVelocityIndex(self, key)
        if DesyncStatus.Method == "HitboxRoll" then
            DesyncStatus.HitboxRollAngle = DesyncStatus.HitboxRollAngle + 45
            local rollOffset = CFrame.Angles(0, 0, math.rad(DesyncStatus.HitboxRollAngle)) * CFrame.new(Desync.Config.Desync.HitboxRollDistance, 0, 0)
            return realVelocity + Vector3.new(rollOffset.X, rollOffset.Y, rollOffset.Z) * 500
        end
        return realVelocity
    end
    return OriginalAssemblyVelocityIndex(self, key)
end))

-- Модуль Underground
local function StartUnderground()
    if DesyncStatus.UndergroundActive then return end
    DesyncStatus.UndergroundActive = true
    task.spawn(function()
        local BaseDelay = 0
        local RandomFactor = 0.51
        local MaxVelocity = 200000
        while DesyncStatus.UndergroundActive and DesyncStatus.Running do
            local char = LocalPlayer.Character
            if char and char:FindFirstChild("HumanoidRootPart") then
                local hrp = char.HumanoidRootPart
                local delay = BaseDelay + math.random(-RandomFactor, RandomFactor)
                local fakeVelocity = Vector3.new(
                    math.random(-MaxVelocity, MaxVelocity),
                    Desync.Config.Desync.UndergroundY,
                    math.random(-MaxVelocity, MaxVelocity)
                )
                local originalVelocity = hrp.Velocity
                local originalCFrame = hrp.CFrame
                hrp.Velocity = fakeVelocity
                task.wait(0.01)
                hrp.Velocity = originalVelocity
                hrp.CFrame = originalCFrame
                if math.random() < 0.6 then
                    pcall(function()
                        sethiddenproperty(hrp, "NetworkIsSleeping", true)
                        task.wait(delay / 2)
                        sethiddenproperty(hrp, "NetworkIsSleeping", false)
                    end)
                end
                task.wait(delay)
            else
                task.wait(0.1)
            end
        end
        DesyncStatus.UndergroundActive = false
    end)
end

-- Модуль UndergroundV2
local function StartUndergroundV2()
    if DesyncStatus.UndergroundV2Active then return end
    DesyncStatus.UndergroundV2Active = true
    task.spawn(function()
        while DesyncStatus.UndergroundV2Active and DesyncStatus.Running do
            local char = LocalPlayer.Character
            if char and char:FindFirstChild("HumanoidRootPart") then
                local hrp = char.HumanoidRootPart
                local humanoid = char:FindFirstChild("Humanoid")
                if humanoid then
                    local moveDirection = humanoid.MoveDirection
                    local originalVelocity = hrp.AssemblyLinearVelocity
                    local fakeVelocity = Vector3.new(moveDirection.X * originalVelocity.Magnitude, Desync.Config.Desync.UndergroundYUndergroundV2, moveDirection.Z * originalVelocity.Magnitude)
                    hrp.AssemblyLinearVelocity = fakeVelocity
                    task.wait(0.02)
                    hrp.AssemblyLinearVelocity = fakeVelocity
                    task.wait(0.05)
                end
            else
                task.wait(0.1)
            end
        end
        DesyncStatus.UndergroundV2Active = false
    end)
end

-- Модуль AngleJitter
local function StartAngleJitter()
    if DesyncStatus.AngleJitterActive then return end
    DesyncStatus.AngleJitterActive = true
    task.spawn(function()
        local BaseDelay = 0
        local RandomFactor = 0.51
        local MaxVelocity = 200000
        while DesyncStatus.AngleJitterActive and DesyncStatus.Running do
            local char = LocalPlayer.Character
            if char and char:FindFirstChild("HumanoidRootPart") then
                local hrp = char.HumanoidRootPart
                local delay = BaseDelay + math.random(-RandomFactor, RandomFactor)
                local fakeVelocity = Vector3.new(
                    math.random(-MaxVelocity, MaxVelocity),
                    math.random(-MaxVelocity, MaxVelocity),
                    math.random(-MaxVelocity, MaxVelocity)
                )
                local angleJitter = math.rad(math.random(-Desync.Config.Desync.AngleJitterValue * 10000, Desync.Config.Desync.AngleJitterValue * 10000) / 10000)
                local originalVelocity = hrp.Velocity
                local originalCFrame = hrp.CFrame
                hrp.Velocity = fakeVelocity
                task.wait(0.01)
                hrp.Velocity = originalVelocity
                hrp.CFrame = originalCFrame * CFrame.Angles(0, angleJitter, 0)
                if math.random() < 0.6 then
                    pcall(function()
                        sethiddenproperty(hrp, "NetworkIsSleeping", true)
                        task.wait(delay / 2)
                        sethiddenproperty(hrp, "NetworkIsSleeping", false)
                    end)
                end
                task.wait(delay)
            else
                task.wait(0.1)
            end
        end
        DesyncStatus.AngleJitterActive = false
    end)
end

-- Основная логика десинхронизации
local HeartbeatConnection
local function StartDesync()
    if DesyncStatus.Running then return end
    DesyncStatus.Running = true
    DesyncStatus.Enabled = true
    Desync.Config.Desync.Enabled = true
    notify("Desync", "Started with method: " .. DesyncStatus.Method, true)

    if DesyncStatus.Method == "Underground" then
        StartUnderground()
    elseif DesyncStatus.Method == "UndergroundV2" then
        StartUndergroundV2()
    elseif DesyncStatus.Method == "AngleJitter" then
        StartAngleJitter()
    end

    HeartbeatConnection = RunService.Heartbeat:Connect(function(deltaTime)
        if not DesyncStatus.Running then return end
        local RootPart = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        local Humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid")
        if not RootPart or not Humanoid or Humanoid.Health <= 0 then return end

        local currentTime = tick()
        table.insert(PositionHistory, {Time = currentTime, CFrame = RootPart.CFrame})

        DesyncTypes.CFrame = RootPart.CFrame
        DesyncTypes.AssemblyLinearVelocity = RootPart.AssemblyLinearVelocity or Vector3.new()

        local SpoofThis = RootPart.CFrame
        local desyncAssemblyVelocity = Vector3.new(1000, 1000, 1000)

        if DesyncStatus.Method == "HitboxRoll" then
            DesyncStatus.HitboxRollAngle = DesyncStatus.HitboxRollAngle + 45
            local rollOffset = CFrame.Angles(0, 0, math.rad(DesyncStatus.HitboxRollAngle)) * CFrame.new(Desync.Config.Desync.HitboxRollDistance, 0, 0)
            SpoofThis = SpoofThis * rollOffset
            desyncAssemblyVelocity = desyncAssemblyVelocity + Vector3.new(rollOffset.X, rollOffset.Y, rollOffset.Z) * 500
        end

        if Desync.Config.Desync.RandomVectorEnabled and DesyncStatus.Method ~= "UndergroundV2" then
            local randomOffset = Vector3.new(
                RandomNumberRange(Desync.Config.Desync.RandomVectorDistance * Desync.Config.Desync.RandomVectorAmplitude),
                RandomNumberRange(Desync.Config.Desync.RandomVectorDistance * Desync.Config.Desync.RandomVectorAmplitude / 2),
                RandomNumberRange(Desync.Config.Desync.RandomVectorDistance * Desync.Config.Desync.RandomVectorAmplitude)
            )
            local flipChance = math.random()
            local rotation = CFrame.new()
            if flipChance < 0.5 then
                rotation = CFrame.Angles(0, 0, math.pi)
            elseif flipChance < 0.75 then
                rotation = CFrame.Angles(0, 0, -math.pi)
            end
            SpoofThis = SpoofThis * rotation * CFrame.new(randomOffset)
            desyncAssemblyVelocity = desyncAssemblyVelocity + randomOffset * Desync.Config.Desync.RandomVectorSpeed
        end

        if DesyncStatus.AntiResolverEnabled then
            desyncAssemblyVelocity = desyncAssemblyVelocity + Vector3.new(
                RandomNumberRange(Desync.Config.Desync.ResolverNoise),
                RandomNumberRange(Desync.Config.Desync.ResolverNoise / 2),
                RandomNumberRange(Desync.Config.Desync.ResolverNoise)
            )
        end

        if DesyncStatus.ServerSync == "proxy" then
            local callingScript = getcallingscript()
            if callingScript and not string.find(tostring(callingScript), "Server") and not string.find(tostring(callingScript), "Network") then
                RootPart.CFrame = SpoofThis
                if desyncAssemblyVelocity then
                    RootPart.AssemblyLinearVelocity = desyncAssemblyVelocity
                end
            end
        elseif DesyncStatus.ServerSync == "v1" then
            RootPart.CFrame = SpoofThis
            if desyncAssemblyVelocity then
                RootPart.AssemblyLinearVelocity = desyncAssemblyVelocity
            end
            if tick() - DesyncStatus.LastServerUpdate >= DesyncStatus.ServerUpdateInterval then
                RootPart.CFrame = DesyncTypes.CFrame
                RootPart.AssemblyLinearVelocity = DesyncTypes.AssemblyLinearVelocity or Vector3.new()
                DesyncStatus.LastServerUpdate = tick()
            end
        end

        RunService.RenderStepped:Wait()
        RootPart.CFrame = DesyncTypes.CFrame
        RootPart.AssemblyLinearVelocity = DesyncTypes.AssemblyLinearVelocity or Vector3.new()
    end)
end

local function StopDesync()
    if not DesyncStatus.Running then return end
    DesyncStatus.Running = false
    DesyncStatus.Enabled = false
    Desync.Config.Desync.Enabled = false
    DesyncStatus.UndergroundActive = false
    DesyncStatus.UndergroundV2Active = false
    DesyncStatus.AngleJitterActive = false
    DesyncStatus.HitboxRollAngle = 0
    if HeartbeatConnection then
        HeartbeatConnection:Disconnect()
        HeartbeatConnection = nil
    end
    notify("Desync", "Stopped", true)
end

-- Обработка CharacterAdded
LocalPlayer.CharacterAdded:Connect(function(Character)
    local RootPart, Humanoid
    repeat
        RootPart = Character:FindFirstChild("HumanoidRootPart")
        Humanoid = Character:FindFirstChild("Humanoid")
        task.wait(0.1)
    until RootPart and Humanoid
    Humanoid.AutoRotate = true
    PositionHistory = {}
    DesyncStatus.LastServerUpdate = 0
    DesyncStatus.UndergroundActive = false
    DesyncStatus.UndergroundV2Active = false
    DesyncStatus.AngleJitterActive = false
    setsimulationradius(DesyncStatus.SimulationRadius)
    if DesyncStatus.Enabled then
        StartDesync()
    end
end)

if LocalPlayer.Character then
    local RootPart = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    local Humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
    if RootPart and Humanoid then
        Humanoid.AutoRotate = true
        setsimulationradius(DesyncStatus.SimulationRadius)
    end
end

return {
    Init = function(UI, CoreProxy, notify)
        if not UI.Tabs or not UI.Tabs.LocalPlayer then
            warn("LocalPlayer tab not found in UI.Tabs")
            return
        end

        local Section = UI.Tabs.LocalPlayer:Section({ Name = "Desync Settings", Side = "Right" })

        Section:Header({ Name = 'Desync' })

        Section:Toggle({
            Name = "Enabled",
            Default = Desync.Config.Desync.Enabled,
            Callback = function(value)
                DesyncStatus.Enabled = value
                Desync.Config.Desync.Enabled = value
                if value then
                    StartDesync()
                else
                    StopDesync()
                end
            end
        }, 'DesyncEnabled')

        Section:Dropdown({
            Name = "Method",
            Default = Desync.Config.Desync.Method,
            Options = {"Underground", "UndergroundV2", "HitboxRoll", "AngleJitter"},
            Callback = function(value)
                DesyncStatus.Method = value
                Desync.Config.Desync.Method = value
                if value ~= "Underground" then DesyncStatus.UndergroundActive = false end
                if value ~= "UndergroundV2" then DesyncStatus.UndergroundV2Active = false end
                if value ~= "AngleJitter" then DesyncStatus.AngleJitterActive = false end
                if DesyncStatus.Running then
                    StopDesync()
                    StartDesync()
                end
            end
        }, 'DesyncMethod')

        Section:Dropdown({
            Name = "ServerSync",
            Default = Desync.Config.Desync.ServerSync,
            Options = {"v1", "proxy"},
            Callback = function(value)
                DesyncStatus.ServerSync = value
                Desync.Config.Desync.ServerSync = value
            end
        }, 'ServerSync')

        Section:Slider({
            Name = "UndergroundY (UndergroundV2)",
            Default = Desync.Config.Desync.UndergroundYUndergroundV2,
            Minimum = -500,
            Maximum = 500,
            Precision = 0,
            Callback = function(value)
                Desync.Config.Desync.UndergroundYUndergroundV2 = value
            end
        }, 'UndergroundYUndergroundV2')

        Section:Slider({
            Name = "ResolverNoise",
            Default = Desync.Config.Desync.ResolverNoise,
            Minimum = 3,
            Maximum = 50,
            Precision = 1,
            Callback = function(value)
                Desync.Config.Desync.ResolverNoise = value
            end
        }, 'ResolverNoise')

        Section:Slider({
            Name = "HitboxRollDistance",
            Default = Desync.Config.Desync.HitboxRollDistance,
            Minimum = 1,
            Maximum = 15,
            Precision = 1,
            Callback = function(value)
                Desync.Config.Desync.HitboxRollDistance = value
            end
        }, 'HitboxRollDistance')

        Section:Slider({
            Name = "AngleJitterValue",
            Default = Desync.Config.Desync.AngleJitterValue,
            Minimum = 1000,
            Maximum = 5000,
            Precision = 0,
            Callback = function(value)
                Desync.Config.Desync.AngleJitterValue = value
            end
        }, 'AngleJitterValue')

        Section:Header({ Name = 'RandomVector' })

        Section:Toggle({
            Name = "RandomVector",
            Default = Desync.Config.Desync.RandomVectorEnabled,
            Callback = function(value)
                Desync.Config.Desync.RandomVectorEnabled = value
            end
        }, 'RandomVectorEnabled')

        Section:Slider({
            Name = "RandomVectorDistance",
            Default = Desync.Config.Desync.RandomVectorDistance,
            Minimum = 1,
            Maximum = 20,
            Precision = 1,
            Callback = function(value)
                Desync.Config.Desync.RandomVectorDistance = value
            end
        }, 'RandomVectorDistance')

        Section:Slider({
            Name = "RandomVectorSpeed",
            Default = Desync.Config.Desync.RandomVectorSpeed,
            Minimum = 5,
            Maximum = 10,
            Precision = 0,
            Callback = function(value)
                Desync.Config.Desync.RandomVectorSpeed = value
            end
        }, 'RandomVectorSpeed')

        Section:Slider({
            Name = "RandomVectorAmplitude",
            Default = Desync.Config.Desync.RandomVectorAmplitude,
            Minimum = 1,
            Maximum = 10,
            Precision = 1,
            Callback = function(value)
                Desync.Config.Desync.RandomVectorAmplitude = value
            end
        }, 'RandomVectorAmplitude')

        Section:Keybind({
            Name = "Keybind",
            Default = Desync.Config.Desync.ToggleKey,
            Callback = function(value)
                DesyncStatus.Key = value
                Desync.Config.Desync.ToggleKey = value
                if UserInputService:GetFocusedTextBox() then return end
                if DesyncStatus.Enabled then
                    if DesyncStatus.Running then
                        StopDesync()
                    else
                        StartDesync()
                    end
                else
                    notify("Desync", "Enable Desync to use keybind.", true)
                end
            end
        }, 'DesyncKeybind')
    end
}
