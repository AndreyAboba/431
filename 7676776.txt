-- [Скрипт для Underground Anti-Aim в Roblox с RollHitbox]
-- [Автор: Grok в режиме тестирования]
-- [ВНИМАНИЕ: Используйте на свой риск, возможны баны]
print('1')
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local checkcaller = checkcaller
local newcclosure = newcclosure
local hookmetamethod = hookmetamethod
local getcallingscript = getcallingscript
local setsimulationradius = setsimulationradius
local setfflag = setfflag -- Предполагается, что доступно через эксплоит

local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local PastedSources = false
local DesyncMethod = "UndergroundV2"
local Keybind = nil
local LastServerUpdate = 0
local SimulationRadius = math.huge
local ServerSync = "v1"
local ServerUpdateInterval = 0.1
local AntiResolverEnabled = true
local UndergroundVelocityY = -50
local IncreaseVeloMultiplier = 2.75 -- Умножитель скорости (20 → 55)
local ResolverNoise = 7
local RandomVectorEnabled = false
local RandomVectorDistance = 5
local RandomVectorSpeed = 10
local RandomVectorAmplitude = 2
local RollHitboxAngle = 0
local VisualizationEnabled = false

local DesyncTypes = {CFrame = CFrame.new(), Velocity = Vector3.new()}
local PositionHistory = {}

-- Установка Fast Flags для усиления десинхронизации
setfflag("FInt_MaxPhysicsStepsPerFrame", "100")
setfflag("FInt_SimulationSyncInterval", "0.01")
setfflag("FInt_MaxSimulationSteps", "500")

-- Установка радиуса симуляции
setsimulationradius(SimulationRadius)

local function RandomNumberRange(a)
    return math.random(-a * 100, a * 100) / 100
end

local function InterpolateCFrame(cframe1, cframe2, t)
    local pos1 = cframe1.Position
    local pos2 = cframe2.Position
    local interpolatedPos = pos1:Lerp(pos2, t)
    local rot1 = cframe1 - cframe1.Position
    local rot2 = cframe2 - cframe2.Position
    local interpolatedRot = rot1:Lerp(rot2, t)
    return CFrame.new(interpolatedPos) * interpolatedRot
end

-- Индикатор визуализации
local Visualization = Drawing.new("Square")
Visualization.Visible = false
Visualization.Size = Vector2.new(10, 10)
Visualization.Color = Color3.new(1, 0, 0)
Visualization.Thickness = 2

local function ApplyUndergroundV2()
    local char = LocalPlayer.Character
    if char and char:FindFirstChild("HumanoidRootPart") then
        local hrp = char.HumanoidRootPart
        local originalVelocity = hrp.Velocity

        -- Применяем падение вниз, сохраняя движение
        local moveDirection = char.Humanoid.MoveDirection
        local baseVelocity = Vector3.new(moveDirection.X * 16, UndergroundVelocityY, moveDirection.Z * 16)
        hrp.Velocity = baseVelocity
        task.wait(0.006) -- Короткий интервал

        -- Возвращаем оригинальную скорость
        hrp.Velocity = originalVelocity
    end
end

local function ApplyIncreaseVelo()
    local char = LocalPlayer.Character
    if char and char:FindFirstChild("HumanoidRootPart") then
        local hrp = char.HumanoidRootPart
        local originalVelocity = hrp.Velocity
        local moveDirection = char.Humanoid.MoveDirection

        -- Увеличиваем горизонтальную скорость
        local increasedVelocity = Vector3.new(
            originalVelocity.X * IncreaseVeloMultiplier,
            originalVelocity.Y,
            originalVelocity.Z * IncreaseVeloMultiplier
        )
        hrp.Velocity = increasedVelocity
        task.wait(0.006) -- Короткий интервал

        -- Возвращаем оригинальную скорость
        hrp.Velocity = originalVelocity
    end
end

local function ApplyRollHitbox()
    local char = LocalPlayer.Character
    if char and char:FindFirstChild("HumanoidRootPart") then
        local hrp = char.HumanoidRootPart
        RollHitboxAngle = RollHitboxAngle + 1 -- Постепенное увеличение угла
        local rollOffset = CFrame.Angles(0, math.rad(RollHitboxAngle), 0) * Vector3.new(5, 0, 0) -- Качание влево-вправо
        hrp.CFrame = hrp.CFrame + rollOffset
        task.wait(0.01) -- Короткий интервал
    end
end

RunService.Heartbeat:Connect(function(deltaTime)
    if PastedSources then
        local RootPart = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        local Humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid")
        if not RootPart or not Humanoid or Humanoid.Health <= 0 then return end

        local currentTime = tick()
        table.insert(PositionHistory, {Time = currentTime, CFrame = RootPart.CFrame})

        DesyncTypes[1] = RootPart.CFrame
        DesyncTypes[2] = RootPart.Velocity or Vector3.new()

        local SpoofThis = RootPart.CFrame
        local desyncVelocity = Vector3.new(0, 0, 0)

        if DesyncMethod == "UndergroundV2" then
            ApplyUndergroundV2()
            task.wait(0.05 + math.random() * 0.02) -- Рандомная пауза
        elseif DesyncMethod == "IncreaseVelo" then
            ApplyIncreaseVelo()
            task.wait(0.05 + math.random() * 0.02) -- Рандомная пауза
        elseif DesyncMethod == "RollHitbox" then
            ApplyRollHitbox()
        end

        -- Отдельная работа RandomVector
        if RandomVectorEnabled then
            local randomOffset = Vector3.new(
                RandomNumberRange(RandomVectorDistance * RandomVectorAmplitude),
                0, -- Не трогаем Y, чтобы не ломать ходьбу
                RandomNumberRange(RandomVectorDistance * RandomVectorAmplitude)
            ) * RandomVectorSpeed
            SpoofThis = SpoofThis + randomOffset
        end

        if AntiResolverEnabled then
            desyncVelocity = desyncVelocity + Vector3.new(
                RandomNumberRange(ResolverNoise),
                RandomNumberRange(ResolverNoise / 2),
                RandomNumberRange(ResolverNoise)
            )
        end

        -- Визуализация позиции
        if VisualizationEnabled and RootPart then
            Visualization.Visible = true
            local screenPos = workspace.CurrentCamera:WorldToViewportPoint(RootPart.Position)
            Visualization.Position = Vector2.new(screenPos.X, screenPos.Y)
        else
            Visualization.Visible = false
        end

        if ServerSync == "proxy" then
            local callingScript = getcallingscript()
            if callingScript and not string.find(tostring(callingScript), "Server") and not string.find(tostring(callingScript), "Network") then
                RootPart.CFrame = SpoofThis
                if desyncVelocity then
                    RootPart.Velocity = desyncVelocity
                end
            end
        elseif ServerSync == "v1" then
            RootPart.CFrame = SpoofThis
            if desyncVelocity then
                RootPart.Velocity = desyncVelocity
            end
            if tick() - LastServerUpdate >= ServerUpdateInterval then
                RootPart.CFrame = DesyncTypes[1]
                RootPart.Velocity = DesyncTypes[2] or Vector3.new()
                LastServerUpdate = tick()
            end
        end

        RunService.RenderStepped:Wait()
        RootPart.CFrame = DesyncTypes[1]
        RootPart.Velocity = DesyncTypes[2] or Vector3.new()
    end
end)

local XDDDDDD = nil
XDDDDDD = hookmetamethod(game, "__index", newcclosure(function(self, key)
    if PastedSources and not checkcaller() then
        if key == "CFrame" and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and LocalPlayer.Character:FindFirstChild("Humanoid") and LocalPlayer.Character.Humanoid.Health > 0 then
            if ServerSync == "proxy" then
                local callingScript = getcallingscript()
                if callingScript and not string.find(tostring(callingScript), "Server") and not string.find(tostring(callingScript), "Network") then
                    if self == LocalPlayer.Character.HumanoidRootPart then
                        if DesyncMethod == "RollHitbox" then
                            RollHitboxAngle = RollHitboxAngle + 1
                            local rollOffset = CFrame.Angles(0, math.rad(RollHitboxAngle), 0) * Vector3.new(5, 0, 0)
                            return DesyncTypes[1] + rollOffset or CFrame.new()
                        end
                        return DesyncTypes[1] or CFrame.new()
                    elseif self == LocalPlayer.Character.Head then
                        return DesyncTypes[1] and DesyncTypes[1] + Vector3.new(0, LocalPlayer.Character.HumanoidRootPart.Size.Y / 2 + 0.5, 0) or CFrame.new()
                    end
                end
            elseif ServerSync == "v1" then
                if self == LocalPlayer.Character.HumanoidRootPart then
                    if DesyncMethod == "RollHitbox" then
                        RollHitboxAngle = RollHitboxAngle + 1
                        local rollOffset = CFrame.Angles(0, math.rad(RollHitboxAngle), 0) * Vector3.new(5, 0, 0)
                        return DesyncTypes[1] + rollOffset or CFrame.new()
                    end
                    return DesyncTypes[1] or CFrame.new()
                elseif self == LocalPlayer.Character.Head then
                    return DesyncTypes[1] and DesyncTypes[1] + Vector3.new(0, LocalPlayer.Character.HumanoidRootPart.Size.Y / 2 + 0.5, 0) or CFrame.new()
                end
            end
        end
    end
    return XDDDDDD(self, key)
end))

LocalPlayer.CharacterAdded:Connect(function(Character)
    local RootPart, Humanoid
    repeat
        RootPart = Character:FindFirstChild("HumanoidRootPart")
        Humanoid = Character:FindFirstChild("Humanoid")
        wait(0.1)
    until RootPart and Humanoid
    Humanoid.AutoRotate = true
    PositionHistory = {}
    LastServerUpdate = 0
    setsimulationradius(SimulationRadius)
end)

if LocalPlayer.Character then
    local RootPart = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    local Humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
    if RootPart and Humanoid then
        Humanoid.AutoRotate = true
        setsimulationradius(SimulationRadius)
    end
end

return {
    Init = function(UI, CoreProxy, notify)
        if not UI.Tabs or not UI.Tabs.LocalPlayer then
            warn("LocalPlayer tab not found in UI.Tabs")
            return
        end

        local Section = UI.Tabs.LocalPlayer:Section({ Name = "Desync Settings", Side = "Right" })

        Section:Header({ Name = 'Desync' })

        Section:Toggle({
            Name = "Enabled",
            Default = PastedSources,
            Callback = function(value)
                PastedSources = value
                notify("Desync", "Desync " .. (value and "Enabled" or "Disabled"), true)
            end
        }, 'DesyncEnabled')

        Section:Dropdown({
            Name = "Method",
            Default = DesyncMethod,
            Options = {"UndergroundV2", "IncreaseVelo", "RollHitbox"},
            Callback = function(value)
                DesyncMethod = value
            end
        }, 'DesyncMethod')

        Section:Dropdown({
            Name = "ServerSync",
            Default = ServerSync,
            Options = {"v1", "proxy"},
            Callback = function(value)
                ServerSync = value
            end
        }, 'ServerSync')

        Section:Slider({
            Name = "UndergroundY",
            Default = UndergroundVelocityY,
            Minimum = -500,
            Maximum = 500,
            Precision = 0,
            Callback = function(value)
                UndergroundVelocityY = value
            end
        }, 'UndergroundVelocityY')

        Section:Slider({
            Name = "IncreaseVeloMultiplier",
            Default = IncreaseVeloMultiplier,
            Minimum = 1,
            Maximum = 5,
            Precision = 2,
            Callback = function(value)
                IncreaseVeloMultiplier = value
            end
        }, 'IncreaseVeloMultiplier')

        Section:Slider({
            Name = "ResolverNoise",
            Default = ResolverNoise,
            Minimum = 3,
            Maximum = 50,
            Precision = 1,
            Callback = function(value)
                ResolverNoise = value
            end
        }, 'ResolverNoise')

        Section:Header({ Name = 'RandomVector' })

        Section:Toggle({
            Name = "Enabled",
            Default = RandomVectorEnabled,
            Callback = function(value)
                RandomVectorEnabled = value
            end
        }, 'RandomVectorEnabled')

        Section:Slider({
            Name = "Distance",
            Default = RandomVectorDistance,
            Minimum = 1,
            Maximum = 5,
            Precision = 1,
            Callback = function(value)
                RandomVectorDistance = value
            end
        }, 'RandomVectorDistance')

        Section:Slider({
            Name = "Speed",
            Default = RandomVectorSpeed,
            Minimum = 1,
            Maximum = 10,
            Precision = 0,
            Callback = function(value)
                RandomVectorSpeed = value
            end
        }, 'RandomVectorSpeed')

        Section:Slider({
            Name = "Amplitude",
            Default = RandomVectorAmplitude,
            Minimum = 1,
            Maximum = 10,
            Precision = 1,
            Callback = function(value)
                RandomVectorAmplitude = value
            end
        }, 'RandomVectorAmplitude')

        Section:Toggle({
            Name = "Visualization",
            Default = VisualizationEnabled,
            Callback = function(value)
                VisualizationEnabled = value
                notify("Visualization", "Visualization " .. (value and "Enabled" or "Disabled"), true)
            end
        }, 'VisualizationEnabled')

        Section:Keybind({
            Name = "Keybind",
            Default = Keybind,
            Callback = function(key)
                if not UserInputService:GetFocusedTextBox() then
                    Keybind = key
                    PastedSources = not PastedSources
                    notify("Desync", "Desync " .. (PastedSources and "Enabled" or "Disabled"), true)
                end
            end
        }, 'DesyncKeybind')
    end
}
