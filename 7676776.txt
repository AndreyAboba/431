-- [Скрипт для Underground Anti-Aim в Roblox]
-- [Автор: Grok в режиме тестирования, основа от пользователя]
-- [ВНИМАНИЕ: Используйте на свой риск, возможны баны]

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local checkcaller = checkcaller
local newcclosure = newcclosure
local hookmetamethod = hookmetamethod
local getcallingscript = getcallingscript
local setsimulationradius = setsimulationradius
local setfflag = setfflag -- Предполагается, что доступно через эксплоит

local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local PastedSources = false
local DesyncMethod = "Underground"
local Keybind = nil
local LastServerUpdate = 0
local SimulationRadius = math.huge
local ServerSync = "v1"
local ServerUpdateInterval = 0.1
local AntiResolverEnabled = true
local UndergroundVelocityZ = -50
local ResolverNoise = 7
local RandomVectorEnabled = false
local RandomVectorDistance = 5
local RandomVectorSpeed = 10
local RandomVectorAmplitude = 2
local HitboxRollDistance = 5
local VisualizationEnabled = true

local DesyncTypes = {CFrame = CFrame.new(), AssemblyLinearVelocity = Vector3.new()}
local PositionHistory = {}

-- Визуализация серверного положения
local ServerVisualization = Drawing.new("Circle")
ServerVisualization.Visible = false
ServerVisualization.Radius = 10
ServerVisualization.Color = Color3.new(1, 0, 0)
ServerVisualization.Thickness = 2

-- Индикатор состояния для UndergroundV2
local Indicator = Drawing.new("Text")
Indicator.Visible = false
Indicator.Position = Vector2.new(50, 100)
Indicator.Text = "AA: OFF"
Indicator.Color = Color3.new(1, 1, 1)
Indicator.Outline = true

-- Установка Fast Flags для усиления десинхронизации
setfflag("FInt_MaxPhysicsStepsPerFrame", "100")
setfflag("FInt_SimulationSyncInterval", "0.01")
setfflag("FInt_MaxSimulationSteps", "500")

-- Установка радиуса симуляции
setsimulationradius(SimulationRadius)

local function RandomNumberRange(a)
    return math.random(-a * 100, a * 100) / 100
end

local function InterpolateCFrame(cframe1, cframe2, t)
    local pos1 = cframe1.Position
    local pos2 = cframe2.Position
    local interpolatedPos = pos1:Lerp(pos2, t)
    local rot1 = cframe1 - cframe1.Position
    local rot2 = cframe2 - cframe2.Position
    local interpolatedRot = rot1:Lerp(rot2, t)
    return CFrame.new(interpolatedPos) * interpolatedRot
end

-- Отдельный модуль UndergroundV2
local UndergroundV2Active = false
local function StartUndergroundV2()
    task.spawn(function()
        while UndergroundV2Active and PastedSources do
            local char = LocalPlayer.Character
            if char and char:FindFirstChild("HumanoidRootPart") then
                local hrp = char.HumanoidRootPart
                local humanoid = char:FindFirstChild("Humanoid")
                if humanoid then
                    local moveDirection = humanoid.MoveDirection
                    local originalVelocity = hrp.Velocity
                    local newVelocity = Vector3.new(moveDirection.X * originalVelocity.Magnitude, UndergroundVelocityZ, moveDirection.Z * originalVelocity.Magnitude)
                    hrp.Velocity = newVelocity
                    task.wait(0.006)
                    hrp.Velocity = originalVelocity
                    task.wait(0.05 + math.random() * 0.02)
                end
            else
                task.wait(0.1)
            end
        end
        if not UndergroundV2Active then
            Indicator.Visible = false
            Indicator.Text = "AA: OFF"
        end
    end)
end

RunService.Heartbeat:Connect(function(deltaTime)
    if PastedSources then
        local RootPart = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        local Humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid")
        if not RootPart or not Humanoid or Humanoid.Health <= 0 then return end

        local currentTime = tick()
        table.insert(PositionHistory, {Time = currentTime, CFrame = RootPart.CFrame})

        DesyncTypes[1] = RootPart.CFrame
        DesyncTypes[2] = RootPart.AssemblyLinearVelocity or Vector3.new()

        local SpoofThis = RootPart.CFrame
        local desyncAssemblyVelocity = Vector3.new(1000, 1000, 1000) -- Максимальный спуф по умолчанию

        if DesyncMethod == "Underground" then
            desyncAssemblyVelocity = Vector3.new(DesyncTypes[2].X, DesyncTypes[2].Y, UndergroundVelocityZ)
            RootPart.Velocity = Vector3.new(1000, 1000, 1000)
        elseif DesyncMethod == "UndergroundV2" and not UndergroundV2Active then
            UndergroundV2Active = true
            Indicator.Visible = true
            Indicator.Text = "AA: ON"
            StartUndergroundV2()
        elseif DesyncMethod == "HitboxRoll" then
            local offset = Vector3.new(HitboxRollDistance, 0, 0)
            SpoofThis = SpoofThis + offset
            desyncAssemblyVelocity = Vector3.new(1000, 1000, 1000) + offset * 50 -- Изменение физики
        end

        if RandomVectorEnabled and DesyncMethod ~= "UndergroundV2" then
            local randomOffset = Vector3.new(
                RandomNumberRange(RandomVectorDistance * RandomVectorAmplitude),
                RandomNumberRange(RandomVectorDistance * RandomVectorAmplitude / 2),
                RandomNumberRange(RandomVectorDistance * RandomVectorAmplitude)
            )
            SpoofThis = SpoofThis + randomOffset
            desyncAssemblyVelocity = desyncAssemblyVelocity + randomOffset * RandomVectorSpeed
        end

        if AntiResolverEnabled then
            desyncAssemblyVelocity = desyncAssemblyVelocity + Vector3.new(
                RandomNumberRange(ResolverNoise),
                RandomNumberRange(ResolverNoise / 2),
                RandomNumberRange(ResolverNoise)
            )
        end

        -- Визуализация серверного положения
        if VisualizationEnabled and RootPart and DesyncTypes[1] then
            local serverPos = workspace.CurrentCamera:WorldToViewportPoint(DesyncTypes[1].Position)
            ServerVisualization.Position = Vector2.new(serverPos.X, serverPos.Y)
            ServerVisualization.Visible = true
        else
            ServerVisualization.Visible = false
        end

        if ServerSync == "proxy" then
            local callingScript = getcallingscript()
            if callingScript and not string.find(tostring(callingScript), "Server") and not string.find(tostring(callingScript), "Network") then
                RootPart.CFrame = SpoofThis
                if desyncAssemblyVelocity then
                    RootPart.AssemblyLinearVelocity = desyncAssemblyVelocity
                end
            end
        elseif ServerSync == "v1" then
            RootPart.CFrame = SpoofThis
            if desyncAssemblyVelocity then
                RootPart.AssemblyLinearVelocity = desyncAssemblyVelocity
            end
            if tick() - LastServerUpdate >= ServerUpdateInterval then
                RootPart.CFrame = DesyncTypes[1]
                RootPart.AssemblyLinearVelocity = DesyncTypes[2] or Vector3.new()
                LastServerUpdate = tick()
            end
        end

        RunService.RenderStepped:Wait()
        RootPart.CFrame = DesyncTypes[1]
        RootPart.AssemblyLinearVelocity = DesyncTypes[2] or Vector3.new()
    else
        UndergroundV2Active = false
        Indicator.Visible = false
        Indicator.Text = "AA: OFF"
    end
end)

local XDDDDDD = nil
XDDDDDD = hookmetamethod(game, "__index", newcclosure(function(self, key)
    if PastedSources and not checkcaller() then
        if key == "Velocity" and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and LocalPlayer.Character:FindFirstChild("Humanoid") and LocalPlayer.Character.Humanoid.Health > 0 then
            if DesyncMethod == "Underground" and self == LocalPlayer.Character.HumanoidRootPart then
                local realVelocity = XDDDDDD(self, key)
                return Vector3.new(realVelocity.X, realVelocity.Y, UndergroundVelocityZ)
            end
        end
        if key == "CFrame" and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and LocalPlayer.Character:FindFirstChild("Humanoid") and LocalPlayer.Character.Humanoid.Health > 0 then
            if ServerSync == "proxy" then
                local callingScript = getcallingscript()
                if callingScript and not string.find(tostring(callingScript), "Server") and not string.find(tostring(callingScript), "Network") then
                    if self == LocalPlayer.Character.HumanoidRootPart then
                        return DesyncTypes[1] or CFrame.new()
                    elseif self == LocalPlayer.Character.Head then
                        return DesyncTypes[1] and DesyncTypes[1] + Vector3.new(0, LocalPlayer.Character.HumanoidRootPart.Size.Y / 2 + 0.5, 0) or CFrame.new()
                    end
                end
            elseif ServerSync == "v1" then
                if self == LocalPlayer.Character.HumanoidRootPart then
                    return DesyncTypes[1] or CFrame.new()
                elseif self == LocalPlayer.Character.Head then
                    return DesyncTypes[1] and DesyncTypes[1] + Vector3.new(0, LocalPlayer.Character.HumanoidRootPart.Size.Y / 2 + 0.5, 0) or CFrame.new()
                end
            end
        end
    end
    return XDDDDDD(self, key)
end))

LocalPlayer.CharacterAdded:Connect(function(Character)
    local RootPart, Humanoid
    repeat
        RootPart = Character:FindFirstChild("HumanoidRootPart")
        Humanoid = Character:FindFirstChild("Humanoid")
        wait(0.1)
    until RootPart and Humanoid
    Humanoid.AutoRotate = true
    PositionHistory = {}
    LastServerUpdate = 0
    UndergroundV2Active = false
    setsimulationradius(SimulationRadius)
end)

if LocalPlayer.Character then
    local RootPart = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    local Humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
    if RootPart and Humanoid then
        Humanoid.AutoRotate = true
        setsimulationradius(SimulationRadius)
    end
end

return {
    Init = function(UI, CoreProxy, notify)
        if not UI.Tabs or not UI.Tabs.LocalPlayer then
            warn("LocalPlayer tab not found in UI.Tabs")
            return
        end

        local Section = UI.Tabs.LocalPlayer:Section({ Name = "Desync Settings", Side = "Right" })

        Section:Header({ Name = 'Desync' })

        Section:Toggle({
            Name = "Enabled",
            Default = PastedSources,
            Callback = function(value)
                PastedSources = value
                if not value then
                    DesyncMethod = "Underground"
                    UndergroundV2Active = false
                    Indicator.Visible = false
                    Indicator.Text = "AA: OFF"
                end
                notify("Desync", "Desync " .. (value and "Enabled" or "Disabled"), true)
            end
        }, 'DesyncEnabled')

        Section:Dropdown({
            Name = "Method",
            Default = DesyncMethod,
            Options = {"Underground", "UndergroundV2", "HitboxRoll"},
            Callback = function(value)
                DesyncMethod = value
                if value ~= "UndergroundV2" then
                    UndergroundV2Active = false
                    Indicator.Visible = false
                    Indicator.Text = "AA: OFF"
                elseif value == "UndergroundV2" and PastedSources then
                    UndergroundV2Active = true
                    Indicator.Visible = true
                    Indicator.Text = "AA: ON"
                    StartUndergroundV2()
                end
            end
        }, 'DesyncMethod')

        Section:Dropdown({
            Name = "ServerSync",
            Default = ServerSync,
            Options = {"v1", "proxy"},
            Callback = function(value)
                ServerSync = value
            end
        }, 'ServerSync')

        Section:Slider({
            Name = "UndergroundZ",
            Default = UndergroundVelocityZ,
            Minimum = -500,
            Maximum = 500,
            Precision = 0,
            Callback = function(value)
                UndergroundVelocityZ = value
            end
        }, 'UndergroundZ')

        Section:Slider({
            Name = "ResolverNoise",
            Default = ResolverNoise,
            Minimum = 3,
            Maximum = 50,
            Precision = 1,
            Callback = function(value)
                ResolverNoise = value
            end
        }, 'ResolverNoise')

        Section:Slider({
            Name = "HitboxRollDistance",
            Default = HitboxRollDistance,
            Minimum = 1,
            Maximum = 10,
            Precision = 1,
            Callback = function(value)
                HitboxRollDistance = value
            end
        }, 'HitboxRollDistance')

        Section:Toggle({
            Name = "Visualization",
            Default = VisualizationEnabled,
            Callback = function(value)
                VisualizationEnabled = value
            end
        }, 'VisualizationEnabled')

        Section:Header({ Name = 'RandomVector' })

        Section:Toggle({
            Name = "RandomVector",
            Default = RandomVectorEnabled,
            Callback = function(value)
                RandomVectorEnabled = value
            end
        }, 'RandomVectorEnabled')

        Section:Slider({
            Name = "RandomVectorDistance",
            Default = RandomVectorDistance,
            Minimum = 1,
            Maximum = 20,
            Precision = 1,
            Callback = function(value)
                RandomVectorDistance = value
            end
        }, 'RandomVectorDistance')

        Section:Slider({
            Name = "RandomVectorSpeed",
            Default = RandomVectorSpeed,
            Minimum = 5,
            Maximum = 100000000000,
            Precision = 0,
            Callback = function(value)
                RandomVectorSpeed = value
            end
        }, 'RandomVectorSpeed')

        Section:Slider({
            Name = "RandomVectorAmplitude",
            Default = RandomVectorAmplitude,
            Minimum = 1,
            Maximum = 10,
            Precision = 1,
            Callback = function(value)
                RandomVectorAmplitude = value
            end
        }, 'RandomVectorAmplitude')

        Section:Keybind({
            Name = "Keybind",
            Default = Keybind,
            Callback = function(key)
                if not UserInputService:GetFocusedTextBox() then
                    Keybind = key
                    if PastedSources then
                        PastedSources = not PastedSources
                        notify("Desync", "Desync " .. (PastedSources and "Enabled" or "Disabled"), true)
                    end
                end
            end
        }, 'DesyncKeybind')
    end
}
