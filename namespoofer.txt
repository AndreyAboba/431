local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local TweenService = game:GetService("TweenService")

local NameSpoofer = {
    Init = function(UI, Core, notify)
        -- Настройки NameSpoofer
        local NameSpooferSettings = {
            Enabled = false,
            UseCustom = false,
            Animate = false,
            CustomPlayerName = "Syllinse",
            CustomLevelName = ".gg/syllinse",
            DefaultPlayerName = "Syllinse",
            DefaultLevelName = ".gg/syllinse",
            OriginalPlayerName = nil,
            OriginalLevelName = nil
        }

        -- Получение локального игрока
        local localPlayer = Core.PlayerData.LocalPlayer
        local character = Workspace:FindFirstChild(localPlayer.Name)
        local billboardGui, playerNameLabel, levelTextLabel

        -- Проверка и кэширование BillboardGui
        local function initializeBillboardGui()
            if not character or not character:FindFirstChild("HumanoidRootPart") then
                warn("NameSpoofer: HumanoidRootPart not found for " .. localPlayer.Name)
                return
            end
            local hrp = character.HumanoidRootPart
            billboardGui = hrp:FindFirstChild("CharacterBillboardGui")
            if not billboardGui then
                warn("NameSpoofer: CharacterBillboardGui not found on " .. localPlayer.Name .. "'s HumanoidRootPart")
                return
            end
            playerNameLabel = billboardGui:FindFirstChild("PlayerName")
            if not playerNameLabel then
                warn("NameSpoofer: PlayerName not found in CharacterBillboardGui")
                return
            end
            local levelImage = playerNameLabel:FindFirstChild("LevelImage")
            if levelImage then
                levelTextLabel = levelImage:FindFirstChild("LevelText")
                if not levelTextLabel then
                    warn("NameSpoofer: LevelText not found in LevelImage")
                end
            else
                warn("NameSpoofer: LevelImage not found in PlayerName")
            end
            if playerNameLabel and not NameSpooferSettings.OriginalPlayerName then
                NameSpooferSettings.OriginalPlayerName = playerNameLabel.Text
            end
            if levelTextLabel and not NameSpooferSettings.OriginalLevelName then
                NameSpooferSettings.OriginalLevelName = levelTextLabel.Text
            end
            print("NameSpoofer: Initialized with PlayerName:", NameSpooferSettings.OriginalPlayerName, "LevelText:", NameSpooferSettings.OriginalLevelName)
        end

        -- Обновление текста в BillboardGui
        local function updateBillboardGui()
            if not billboardGui or not playerNameLabel then return end
            if not NameSpooferSettings.Enabled then
                playerNameLabel.Text = NameSpooferSettings.OriginalPlayerName or playerNameLabel.Text
                if levelTextLabel then
                    levelTextLabel.Text = NameSpooferSettings.OriginalLevelName or levelTextLabel.Text
                end
                return
            end
            local newPlayerName = NameSpooferSettings.UseCustom and NameSpooferSettings.CustomPlayerName or NameSpooferSettings.DefaultPlayerName
            local newLevelName = NameSpooferSettings.UseCustom and NameSpooferSettings.CustomLevelName or NameSpooferSettings.DefaultLevelName
            playerNameLabel.Text = newPlayerName
            if levelTextLabel then
                levelTextLabel.Text = newLevelName
            end
            print("NameSpoofer: Updated to PlayerName:", newPlayerName, "LevelText:", newLevelName)
        end

        -- Анимация текста с поддержкой кастомного текста
        local function animateText(label, getCurrentTextFunc)
            if not label or not NameSpooferSettings.Animate or not NameSpooferSettings.Enabled then
                label.Text = getCurrentTextFunc()
                return
            end
            while NameSpooferSettings.Animate and NameSpooferSettings.Enabled and label do
                local originalText = getCurrentTextFunc()
                if not originalText or originalText == "" then break end
                local steps = {}
                for i = #originalText, 1, -1 do
                    table.insert(steps, originalText:sub(1, i))
                end
                for i = 2, #originalText do
                    table.insert(steps, originalText:sub(1, i))
                end
                for _, stepText in ipairs(steps) do
                    if not NameSpooferSettings.Animate or not NameSpooferSettings.Enabled then break end
                    label.Text = stepText
                    task.wait(0.2)
                end
                if NameSpooferSettings.Animate and NameSpooferSettings.Enabled then
                    label.Text = originalText
                    task.wait(2) -- Задержка 2 секунды после цикла
                end
            end
            if label then
                label.Text = getCurrentTextFunc()
            end
        end

        -- Запуск анимации
        local function startAnimation()
            if not NameSpooferSettings.Animate or not NameSpooferSettings.Enabled then
                if playerNameLabel then playerNameLabel.Text = NameSpooferSettings.UseCustom and NameSpooferSettings.CustomPlayerName or NameSpooferSettings.DefaultPlayerName end
                if levelTextLabel then levelTextLabel.Text = NameSpooferSettings.UseCustom and NameSpooferSettings.CustomLevelName or NameSpooferSettings.DefaultLevelName end
                return
            end
            if playerNameLabel then
                spawn(function()
                    animateText(playerNameLabel, function()
                        return NameSpooferSettings.UseCustom and NameSpooferSettings.CustomPlayerName or NameSpooferSettings.DefaultPlayerName
                    end)
                end)
            end
            if levelTextLabel then
                spawn(function()
                    animateText(levelTextLabel, function()
                        return NameSpooferSettings.UseCustom and NameSpooferSettings.CustomLevelName or NameSpooferSettings.DefaultLevelName
                    end)
                end)
            end
        end

        -- Проверка персонажа при респавне
        localPlayer.CharacterAdded:Connect(function(newCharacter)
            character = newCharacter
            task.wait(0.5)
            initializeBillboardGui()
            updateBillboardGui()
            startAnimation()
        end)

        -- Инициализация при запуске
        initializeBillboardGui()
        updateBillboardGui()
        startAnimation()

        -- Создание секции в UI на правой стороне
        if UI.Tabs.Visuals then
            UI.Sections.NameSpoofer = UI.Tabs.Visuals:Section({Name = "NameSpoofer", Side = "Right"})
            if UI.Sections.NameSpoofer then
                UI.Sections.NameSpoofer:Header({Name = "Name Spoofer"})
                
                -- Тоггл для включения/выключения
                UI.Sections.NameSpoofer:Toggle({
                    Name = "Enabled",
                    Default = false,
                    Callback = function(value)
                        NameSpooferSettings.Enabled = value
                        notify("Name Spoofer", "Name Spoofer " .. (value and "Enabled" or "Disabled"), true)
                        updateBillboardGui()
                        startAnimation()
                    end
                }, 'NSEnabled')

                -- Тоггл для использования пользовательских значений
                UI.Sections.NameSpoofer:Toggle({
                    Name = "Custom",
                    Default = false,
                    Callback = function(value)
                        NameSpooferSettings.UseCustom = value
                        notify("Name Spoofer", "Custom Names " .. (value and "Enabled" or "Disabled"), true)
                        updateBillboardGui()
                        startAnimation()
                    end
                }, 'NSCustom')

                -- Поле ввода для имени игрока
                UI.Sections.NameSpoofer:Input({
                    Name = "PlayerName",
                    Default = NameSpooferSettings.CustomPlayerName,
                    Placeholder = "Enter Player Name",
                    Callback = function(value)
                        NameSpooferSettings.CustomPlayerName = value
                        notify("Name Spoofer", "Custom Player Name set to: " .. value)
                        if NameSpooferSettings.UseCustom and NameSpooferSettings.Enabled then
                            updateBillboardGui()
                            startAnimation()
                        end
                    end
                }, 'NSPlayerName')

                -- Поле ввода для уровня
                UI.Sections.NameSpoofer:Input({
                    Name = "LevelName",
                    Default = NameSpooferSettings.CustomLevelName,
                    Placeholder = "Enter Level Name",
                    Callback = function(value)
                        NameSpooferSettings.CustomLevelName = value
                        notify("Name Spoofer", "Custom Level Name set to: " .. value)
                        if NameSpooferSettings.UseCustom and NameSpooferSettings.Enabled then
                            updateBillboardGui()
                            startAnimation()
                        end
                    end
                }, 'NSLevelName')

                -- Тоггл для анимации
                UI.Sections.NameSpoofer:Toggle({
                    Name = "Animate",
                    Default = false,
                    Callback = function(value)
                        NameSpooferSettings.Animate = value
                        notify("Name Spoofer", "Animation " .. (value and "Enabled" or "Disabled"), true)
                        startAnimation()
                    end
                }, 'NSAnimate')
            end
        end
    end
}

return NameSpoofer
