local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")

local NameSpoofer = {
    Init = function(UI, Core, notify)
        -- Настройки NameSpoofer
        local NameSpooferSettings = {
            Enabled = false,
            UseCustom = false,
            CustomPlayerName = "Syllinse",
            CustomLevelName = ".gg/syllinse",
            DefaultPlayerName = "Syllinse",
            DefaultLevelName = ".gg/syllinse",
            OriginalPlayerName = nil,
            OriginalLevelName = nil
        }

        -- Получение локального игрока
        local localPlayer = Core.PlayerData.LocalPlayer
        local character = Workspace:FindFirstChild(localPlayer.Name)
        local billboardGui, playerNameLabel, levelTextLabel

        -- Проверка и кэширование BillboardGui
        local function initializeBillboardGui()
            if not character or not character:FindFirstChild("HumanoidRootPart") then
                warn("NameSpoofer: HumanoidRootPart not found for " .. localPlayer.Name)
                return
            end
            local hrp = character.HumanoidRootPart
            billboardGui = hrp:FindFirstChild("CharacterBillboardGui")
            if not billboardGui then
                warn("NameSpoofer: CharacterBillboardGui not found on " .. localPlayer.Name .. "'s HumanoidRootPart")
                return
            end
            playerNameLabel = billboardGui:FindFirstChild("PlayerName")
            if not playerNameLabel then
                warn("NameSpoofer: PlayerName not found in CharacterBillboardGui")
                return
            end
            -- Исправлено: LevelImage находится на одном уровне с PlayerName, а не внутри него
            local levelImage = billboardGui:FindFirstChild("LevelImage")
            if levelImage then
                levelTextLabel = levelImage:FindFirstChild("LevelText")
                if not levelTextLabel then
                    warn("NameSpoofer: LevelText not found in LevelImage")
                end
            else
                warn("NameSpoofer: LevelImage not found in CharacterBillboardGui")
            end
            -- Сохранение оригинальных значений
            if playerNameLabel and not NameSpooferSettings.OriginalPlayerName then
                NameSpooferSettings.OriginalPlayerName = playerNameLabel.Text
            end
            if levelTextLabel and not NameSpooferSettings.OriginalLevelName then
                NameSpooferSettings.OriginalLevelName = levelTextLabel.Text
            end
            print("NameSpoofer: Initialized with PlayerName:", NameSpooferSettings.OriginalPlayerName, "LevelText:", NameSpooferSettings.OriginalLevelName)
        end

        -- Обновление текста в BillboardGui
        local function updateBillboardGui()
            if not NameSpooferSettings.Enabled or not billboardGui or not playerNameLabel then
                -- Восстановление оригинальных значений, если функционал выключен
                if playerNameLabel and NameSpooferSettings.OriginalPlayerName then
                    playerNameLabel.Text = NameSpooferSettings.OriginalPlayerName
                end
                if levelTextLabel and NameSpooferSettings.OriginalLevelName then
                    levelTextLabel.Text = NameSpooferSettings.OriginalLevelName
                end
                return
            end

            -- Установка новых значений
            local newPlayerName = NameSpooferSettings.UseCustom and NameSpooferSettings.CustomPlayerName or NameSpooferSettings.DefaultPlayerName
            local newLevelName = NameSpooferSettings.UseCustom and NameSpooferSettings.CustomLevelName or NameSpooferSettings.DefaultLevelName
            playerNameLabel.Text = newPlayerName
            if levelTextLabel then
                levelTextLabel.Text = newLevelName
            else
                warn("NameSpoofer: Cannot update LevelText, label not found")
            end
            print("NameSpoofer: Updated to PlayerName:", newPlayerName, "LevelText:", newLevelName)
        end

        -- Проверка персонажа при респавне
        localPlayer.CharacterAdded:Connect(function(newCharacter)
            character = newCharacter
            task.wait(0.5) -- Задержка для надёжности
            initializeBillboardGui()
            updateBillboardGui()
        end)

        -- Инициализация при запуске
        initializeBillboardGui()
        updateBillboardGui()

        -- Создание секции в UI на правой стороне
        if UI.Tabs.Visuals then
            UI.Sections.NameSpoofer = UI.Tabs.Visuals:Section({Name = "NameSpoofer", Side = "Right"})
            if UI.Sections.NameSpoofer then
                UI.Sections.NameSpoofer:Header({Name = "NameSpoofer Settings"})
                
                -- Тоггл для включения/выключения
                UI.Sections.NameSpoofer:Toggle({
                    Name = "Enabled",
                    Default = false,
                    Callback = function(value)
                        NameSpooferSettings.Enabled = value
                        notify("NameSpoofer", "NameSpoofer " .. (value and "Enabled" or "Disabled"), true)
                        updateBillboardGui()
                    end
                }, 'NSEnabled')

                -- Тоггл для использования пользовательских значений
                UI.Sections.NameSpoofer:Toggle({
                    Name = "Custom",
                    Default = false,
                    Callback = function(value)
                        NameSpooferSettings.UseCustom = value
                        notify("NameSpoofer", "Custom Names " .. (value and "Enabled" or "Disabled"), true)
                        updateBillboardGui()
                    end
                }, 'NSCustom')

                -- Поле ввода для имени игрока
                UI.Sections.NameSpoofer:Input({
                    Name = "PlayerName",
                    Default = NameSpooferSettings.CustomPlayerName,
                    Placeholder = "Enter Player Name",
                    Callback = function(value)
                        NameSpooferSettings.CustomPlayerName = value
                        notify("NameSpoofer", "Custom Player Name set to: " .. value)
                        updateBillboardGui()
                    end
                }, 'NSPlayerName')

                -- Поле ввода для уровня
                UI.Sections.NameSpoofer:Input({
                    Name = "LevelName",
                    Default = NameSpooferSettings.CustomLevelName,
                    Placeholder = "Enter Level Name",
                    Callback = function(value)
                        NameSpooferSettings.CustomLevelName = value
                        notify("NameSpoofer", "Custom Level Name set to: " .. value)
                        updateBillboardGui()
                    end
                }, 'NSLevelName')
            end
        end
    end
}

return NameSpoofer
