-- EntityX Library for NPC Interaction
local EntityX = {}
local workspace = game:GetService("Workspace")
local Camera = workspace.CurrentCamera

-- –ö—Ä–∞—Å–∏–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ü–≤–µ—Ç–∞–º–∏
local function Log(message, emoji, color)
    local colorCode = color or "\27[32m" -- –ó–µ–ª–µ–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    local resetCode = "\27[0m"
    print(colorCode .. "{" .. emoji .. "} EntityX | " .. message .. resetCode)
end

-- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∫—Ä–∞—Å–∏–≤—ã–º –ª–æ–≥–æ–º
Log("Made by stuppp110", "üí†")
Log("Lightweight NPC interactions.", "üß†")
Log("Loaded successfully!", "üü¢")

-- Internal cache for performance
local npcCache = {}
local lastUpdate = 0
local updateInterval = 0.05 -- –°–æ–∫—Ä–∞—Ç–∏–ª –¥–æ 0.05 –¥–ª—è –±–æ–ª—å—à–µ–π –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏

-- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ NPC
local npcConfig = {
    DistanceLimit = 120,
    TargetPart = "Head"
}

-- –ü–æ–∏—Å–∫ –≤—Å–µ—Ö NPC –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏—è—Ö —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
local function FindAllNPCs()
    local currentTime = tick()
    if currentTime - lastUpdate < updateInterval and next(npcCache) then
        return npcCache
    end

    local spiderCave = workspace:FindFirstChild("MapProps") and workspace.MapProps:FindFirstChild("SpiderCave")
    local missions = workspace:FindFirstChild("Missions")
    npcCache = {}

    local function processLocation(location, mobTypes)
        if not location then return end
        for _, container in pairs(location:GetChildren()) do
            for _, mobType in pairs(mobTypes) do
                local mob = container:FindFirstChild(mobType)
                if mob and mob.Parent and mob:IsA("Model") then
                    local humanoid = mob:FindFirstChild("Humanoid")
                    if humanoid and humanoid.Health > 0 then
                        local targetPart = mob:FindFirstChild(npcConfig.TargetPart) or mob:FindFirstChild("HumanoidRootPart")
                        if targetPart then
                            local distance = (Camera.CFrame.Position - targetPart.Position).Magnitude
                            if distance <= npcConfig.DistanceLimit then
                                table.insert(npcCache, {
                                    Mob = mob,
                                    TargetPart = targetPart,
                                    Distance = distance,
                                    Health = humanoid.Health
                                })
                            end
                        end
                    end
                end
            end
        end
    end

    -- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫
    if missions then
        processLocation(missions:FindFirstChild("AISpawners"), {
            "Poacher", "Poacher Mage", "Poacher Gunner", "Poacher Rifleman", "Imperial",
            "Imperial Mage", "Nightfall Spitter Spider", "Nightfall Blink Spider",
            "Poacher Apprentice", "Nightfall Spider"
        })
    end

    if spiderCave then
        processLocation(spiderCave, {"Spider", "Cave Spider"})
    end

    lastUpdate = currentTime
    if next(npcCache) then
        Log("Found entities! (" .. #npcCache .. ")", "üõ°")
    end
    return npcCache
end

-- –ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–µ–≥–æ NPC
function EntityX:GetClosestNPC()
    local npcs = FindAllNPCs()
    if not next(npcs) then return nil, nil end

    table.sort(npcs, function(a, b)
        local aScore = (a.Distance / npcConfig.DistanceLimit) * 0.5 + (a.Health / 100) * 0.5
        local bScore = (b.Distance / npcConfig.DistanceLimit) * 0.5 + (b.Health / 100) * 0.5
        return aScore < bScore
    end)

    return npcs[1].Mob, npcs[1].TargetPart
end

-- –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö NPC
function EntityX:GetAllNPCs()
    return FindAllNPCs()
end

-- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–¥–µ–ª–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
function EntityX:SetDistanceLimit(limit)
    npcConfig.DistanceLimit = limit or 120
    Log("Distance limit set to " .. npcConfig.DistanceLimit .. ".", "‚öôÔ∏è", "\27[33m") -- –ñ–µ–ª—Ç—ã–π —Ü–≤–µ—Ç
end

-- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–≤–æ–π —á–∞—Å—Ç–∏ —Ç–µ–ª–∞
function EntityX:SetTargetPart(part)
    npcConfig.TargetPart = part or "Head"
    Log("Target part set to " .. npcConfig.TargetPart .. ".", "‚öôÔ∏è", "\27[33m") -- –ñ–µ–ª—Ç—ã–π —Ü–≤–µ—Ç
end

-- –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø–æ–∏—Å–∫ NPC –≤ –∑–∞–¥–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
function EntityX:FindNPCsInLocation(location, mobTypes)
    local validTargets = {}
    if not location or not location:IsA("Instance") then
        Log("Invalid location provided.", "‚ùå", "\27[31m") -- –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç
        return validTargets
    end

    for _, container in pairs(location:GetChildren()) do
        for _, mobType in pairs(mobTypes or {}) do
            local mob = container:FindFirstChild(mobType)
            if mob and mob.Parent and mob:IsA("Model") then
                local humanoid = mob:FindFirstChild("Humanoid")
                if humanoid and humanoid.Health > 0 then
                    local targetPart = mob:FindFirstChild(npcConfig.TargetPart) or mob:FindFirstChild("HumanoidRootPart")
                    if targetPart then
                        local distance = (Camera.CFrame.Position - targetPart.Position).Magnitude
                        if distance <= npcConfig.DistanceLimit then
                            table.insert(validTargets, {
                                Mob = mob,
                                TargetPart = targetPart,
                                Distance = distance,
                                Health = humanoid.Health
                            })
                        end
                    end
                end
            end
        end
    end

    if next(validTargets) then
        Log("Found entities! (" .. #validTargets .. ")", "üõ°")
    end
    return validTargets
end

-- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è NPC (–∂–∏–≤/–º—ë—Ä—Ç–≤)
function EntityX:IsNPCAlive(mob)
    if not mob or not mob:FindFirstChild("Humanoid") then return false end
    return mob.Humanoid.Health > 0
end

-- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ NPC
function EntityX:GetDistanceToNPC(mob)
    if not mob or not mob:FindFirstChild(npcConfig.TargetPart) then return math.huge end
    return (Camera.CFrame.Position - mob[npcConfig.TargetPart].Position).Magnitude
end

-- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤
function EntityX:SetLogColor(colorCode)
    Log("Log color set to custom.", "üé®", colorCode or "\27[32m")
end

return EntityX
