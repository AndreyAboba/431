-- EntityX Library for Player and NPC Interaction
local EntityX = {}
local workspace = game:GetService("Workspace")
local Camera = workspace.CurrentCamera
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")

-- Красивое логирование
local function Log(message, emoji)
    print("{" .. emoji .. "} EntityX | " .. message)
end

-- Вспомогательные функции
local function waitForChildOfType(obj, name, timeout, prop)
    local checktick = tick() + (timeout or 10)
    local returned
    repeat
        returned = prop and obj[name] or obj:FindFirstChildOfClass(name)
        if returned or checktick < tick() then break end
        task.wait()
    until false
    return returned
end

-- Проверка команды
function EntityX.targetCheck(ent)
    if ent.TeamCheck then
        return ent:TeamCheck()
    end
    if ent.NPC then return true end
    if not LocalPlayer.Team then return true end
    if not ent.Player.Team then return true end
    if ent.Player.Team ~= LocalPlayer.Team then return true end
    return #ent.Player.Team:GetPlayers() == #Players:GetPlayers()
end

-- Обновление соединений сущности
function EntityX.getUpdateConnections(ent)
    local hum = ent.Humanoid
    return {
        hum:GetPropertyChangedSignal('Health'),
        hum:GetPropertyChangedSignal('MaxHealth')
    }
end

-- Проверка уязвимости
function EntityX.isVulnerable(ent)
    return ent.Health > 0 and not ent.Character:FindFirstChildWhichIsA("ForceField")
end

-- Проверка стены
EntityX.IgnoreObject = RaycastParams.new()
EntityX.IgnoreObject.RespectCanCollide = true
function EntityX.Wallcheck(origin, position, ignoreobject)
    if typeof(ignoreobject) ~= 'Instance' then
        local ignorelist = {Camera, LocalPlayer.Character}
        for _, v in EntityX.List do
            if v.Targetable then
                table.insert(ignorelist, v.Character)
            end
        end
        if typeof(ignoreobject) == 'table' then
            for _, v in ignoreobject do
                table.insert(ignorelist, v)
            end
        end
        ignoreobject = EntityX.IgnoreObject
        ignoreobject.FilterDescendantsInstances = ignorelist
    end
    return workspace:Raycast(origin, position - origin, ignoreobject)
end

-- Добавление сущности (игрок или NPC)
function EntityX.addEntity(char, plr, teamfunc)
    if not char then return end
    EntityX.EntityThreads[char] = task.spawn(function()
        local hum = waitForChildOfType(char, 'Humanoid', 10)
        local humrootpart = hum and waitForChildOfType(hum, 'RootPart', 10, true)
        local head = char:WaitForChild('Head', 10) or humrootpart

        if hum and humrootpart then
            local entity = {
                Connections = {},
                Character = char,
                Health = hum.Health,
                Head = head,
                Humanoid = hum,
                HumanoidRootPart = humrootpart,
                HipHeight = hum.HipHeight + (humrootpart.Size.Y / 2) + (hum.RigType == Enum.HumanoidRigType.R6 and 2 or 0),
                MaxHealth = hum.MaxHealth,
                NPC = plr == nil,
                Player = plr,
                RootPart = humrootpart,
                TeamCheck = teamfunc
            }

            if plr == LocalPlayer then
                EntityX.character = entity
                EntityX.isAlive = true
            else
                entity.Targetable = EntityX.targetCheck(entity)
                for _, v in EntityX.getUpdateConnections(entity) do
                    table.insert(entity.Connections, v:Connect(function()
                        entity.Health = hum.Health
                        entity.MaxHealth = hum.MaxHealth
                    end))
                end
                table.insert(EntityX.List, entity)
            end
        end
    end)
end

-- Удаление сущности
function EntityX.removeEntity(char, localcheck)
    if localcheck then
        if EntityX.isAlive then
            EntityX.isAlive = false
            for _, v in EntityX.character.Connections do
                if v then v:Disconnect() end
            end
            table.clear(EntityX.character.Connections)
            EntityX.character = nil
        end
        return
    end
    if char then
        if EntityX.EntityThreads[char] then
            task.cancel(EntityX.EntityThreads[char])
            EntityX.EntityThreads[char] = nil
        end
        local entity, ind = EntityX.getEntity(char)
        if entity and ind then
            for _, v in entity.Connections do
                if v then v:Disconnect() end
            end
            table.clear(entity.Connections)
            table.remove(EntityX.List, ind)
        end
    end
end

-- Получение сущности по персонажу
function EntityX.getEntity(char)
    for i, v in ipairs(EntityX.List) do
        if v.Player == char or v.Character == char then
            return v, i
        end
    end
    return nil, nil
end

-- Поиск ближайшей сущности по позиции
function EntityX.EntityPosition(entitysettings)
    if EntityX.isAlive then
        local localPosition = entitysettings.Origin or (EntityX.character and EntityX.character.HumanoidRootPart and EntityX.character.HumanoidRootPart.Position) or Camera.CFrame.Position
        local sortingTable = {}
        for _, v in ipairs(EntityX.List) do
            if (not entitysettings.Players and v.Player) or (not entitysettings.NPCs and v.NPC) then continue end
            if not v.Targetable then continue end
            local mag = (v[entitysettings.Part or "Head"].Position - localPosition).Magnitude
            if mag > (entitysettings.Range or 120) then continue end
            if EntityX.isVulnerable(v) then
                table.insert(sortingTable, {Entity = v, Magnitude = mag})
            end
        end

        if #sortingTable == 0 then return nil end

        table.sort(sortingTable, function(a, b)
            return a.Magnitude < b.Magnitude
        end)

        for _, v in ipairs(sortingTable) do
            if entitysettings.Wallcheck then
                if EntityX.Wallcheck(localPosition, v.Entity[entitysettings.Part or "Head"].Position, entitysettings.Wallcheck) then
                    continue
                end
            end
            return v.Entity
        end
    end
    return nil
end

-- Функции для NPC (оставлены как есть)
local npcConfig = {
    DistanceLimit = 120,
    TargetPart = "Head"
}

function EntityX.checkSummonNPC(mob)
    if mob and mob.Parent then
        local humanoid = mob:FindFirstChild("Humanoid")
        if humanoid and humanoid.Health > 0 then
            local targetPart = mob:FindFirstChild(npcConfig.TargetPart) or mob:FindFirstChild("HumanoidRootPart")
            if targetPart then
                local distance = (Camera.CFrame.Position - targetPart.Position).Magnitude
                if distance <= npcConfig.DistanceLimit then
                    return {
                        Mob = mob,
                        TargetPart = targetPart,
                        Distance = distance,
                        Health = humanoid.Health,
                        NPC = true
                    }
                end
            end
        end
    end
    return nil
end

local function FindAllNPCs()
    local currentTime = tick()
    if currentTime - lastUpdate < updateInterval and #npcCache > 0 then
        return npcCache
    end

    local spiderCave = workspace:FindFirstChild("MapProps") and workspace.MapProps:FindFirstChild("SpiderCave")
    local missions = workspace:FindFirstChild("Missions")
    npcCache = {}

    if missions then
        for _, mission in pairs(missions:GetChildren()) do
            local aiSpawners = mission:FindFirstChild("AISpawners")
            if aiSpawners then
                for _, spawner in pairs(aiSpawners:GetChildren()) do
                    local mobTypes = {
                        "Poacher", "Poacher Mage", "Poacher Gunner", "Poacher Rifleman", "Imperial",
                        "Imperial Mage", "Nightfall Spitter Spider", "Nightfall Blink Spider",
                        "Poacher Apprentice", "Nightfall Spider"
                    }
                    for _, mobType in pairs(mobTypes) do
                        local mob = spawner:FindFirstChild(mobType)
                        if mob and mob.Parent then
                            local humanoid = mob:FindFirstChild("Humanoid")
                            if humanoid and humanoid.Health > 0 then
                                local targetPart = mob:FindFirstChild(npcConfig.TargetPart) or mob:FindFirstChild("HumanoidRootPart")
                                if targetPart then
                                    local distance = (Camera.CFrame.Position - targetPart.Position).Magnitude
                                    if distance <= npcConfig.DistanceLimit then
                                        table.insert(npcCache, {
                                            Mob = mob,
                                            TargetPart = targetPart,
                                            Distance = distance,
                                            Health = humanoid.Health,
                                            NPC = true
                                        })
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end

    if spiderCave then
        for _, container in pairs(spiderCave:GetChildren()) do
            local spiderTypes = {"Spider", "Cave Spider"}
            for _, spiderType in pairs(spiderTypes) do
                local mob = container:FindFirstChild(spiderType)
                if mob and mob.Parent then
                    local humanoid = mob:FindFirstChild("Humanoid")
                    if humanoid and humanoid.Health > 0 then
                        local targetPart = mob:FindFirstChild(npcConfig.TargetPart) or mob:FindFirstChild("HumanoidRootPart")
                        if targetPart then
                            local distance = (Camera.CFrame.Position - targetPart.Position).Magnitude
                            if distance <= npcConfig.DistanceLimit then
                                table.insert(npcCache, {
                                    Mob = mob,
                                    TargetPart = targetPart,
                                    Distance = distance,
                                    Health = humanoid.Health,
                                    NPC = true
                                })
                            end
                        end
                    end
                end
            end
        end
    end

    lastUpdate = currentTime
    if currentTime - lastLog >= logInterval and #npcCache > 0 then
        Log("Found entities! (" .. #npcCache .. ")", "🛡")
        lastLog = currentTime
    end
    return npcCache
end

function EntityX:GetClosestNPC()
    local npcs = FindAllNPCs()
    if #npcs == 0 then
        return nil, nil
    end
    table.sort(npcs, function(a, b)
        local aScore = (a.Distance / npcConfig.DistanceLimit) * 0.5 + (a.Health / 100) * 0.5
        local bScore = (b.Distance / npcConfig.DistanceLimit) * 0.5 + (b.Health / 100) * 0.5
        return aScore < bScore
    end)
    return npcs[1].Mob, npcs[1].TargetPart
end

function EntityX:GetAllNPCs()
    return FindAllNPCs()
end

function EntityX:GetDistanceLimit()
    local limit = npcConfig.DistanceLimit
    Log("Returning DistanceLimit: " .. tostring(limit), "⚙️")
    return limit
end

function EntityX:SetDistanceLimit(limit)
    npcConfig.DistanceLimit = limit or 120
    Log("Distance limit set to " .. npcConfig.DistanceLimit .. ".", "⚙️")
end

function EntityX:SetTargetPart(part)
    npcConfig.TargetPart = part or "Head"
    Log("Target part set to " .. npcConfig.TargetPart .. ".", "⚙️")
end

function EntityX:FindNPCsInLocation(location, mobTypes)
    local validTargets = {}
    if not location or not location:IsA("Instance") then
        Log("Invalid location provided.", "❌")
        return validTargets
    end
    for _, container in pairs(location:GetChildren()) do
        for _, mobType in pairs(mobTypes or {}) do
            local mob = container:FindFirstChild(mobType)
            if mob and mob.Parent then
                local humanoid = mob:FindFirstChild("Humanoid")
                if humanoid and humanoid.Health > 0 then
                    local targetPart = mob:FindFirstChild(npcConfig.TargetPart) or mob:FindFirstChild("HumanoidRootPart")
                    if targetPart then
                        local distance = (Camera.CFrame.Position - targetPart.Position).Magnitude
                        if distance <= npcConfig.DistanceLimit then
                            table.insert(validTargets, {
                                Mob = mob,
                                TargetPart = targetPart,
                                Distance = distance,
                                Health = humanoid.Health
                            })
                        end
                    end
                end
            end
        end
    end
    if #validTargets > 0 and tick() - lastLog >= logInterval then
        Log("Found entities! (" .. #validTargets .. ")", "🛡")
        lastLog = tick()
    end
    return validTargets
end

function EntityX:IsNPCAlive(mob)
    if not mob or not mob:FindFirstChild("Humanoid") then return false end
    return mob.Humanoid.Health > 0
end

function EntityX:GetDistanceToNPC(mob)
    if not mob or not mob:FindFirstChild(npcConfig.TargetPart) then return math.huge end
    return (Camera.CFrame.Position - mob[npcConfig.TargetPart].Position).Magnitude
end

-- Запуск системы
function EntityX.start()
    if EntityX.Running then EntityX.stop() end
    EntityX.Connections = EntityX.Connections or {}
    EntityX.PlayerConnections = EntityX.PlayerConnections or {}
    EntityX.EntityThreads = EntityX.EntityThreads or {}
    EntityX.List = EntityX.List or {}
    table.insert(EntityX.Connections, Players.PlayerAdded:Connect(function(v)
        EntityX.addPlayer(v)
    end))
    table.insert(EntityX.Connections, Players.PlayerRemoving:Connect(function(v)
        EntityX.removePlayer(v)
    end))
    for _, v in Players:GetPlayers() do
        EntityX.addPlayer(v)
    end
    table.insert(EntityX.Connections, workspace:GetPropertyChangedSignal('CurrentCamera'):Connect(function()
        Camera = workspace.CurrentCamera or workspace:FindFirstChildWhichIsA('Camera')
        Log("Camera updated.", "📷")
    end))
    EntityX.Running = true
    Log("System started.", "▶️")
end

-- Остановка системы
function EntityX.stop()
    if not EntityX.Running then return end
    for _, v in (EntityX.Connections or {}) do
        if v then v:Disconnect() end
    end
    for _, v in (EntityX.PlayerConnections or {}) do
        for _, v2 in v do
            if v2 then v2:Disconnect() end
        end
        table.clear(v)
    end
    EntityX.removeEntity(nil, true)
    local cloned = table.clone(EntityX.List)
    for _, v in cloned do
        EntityX.removeEntity(v.Character)
    end
    for _, v in (EntityX.EntityThreads or {}) do
        task.cancel(v)
    end
    table.clear(EntityX.PlayerConnections or {})
    table.clear(EntityX.EntityThreads or {})
    table.clear(EntityX.Connections or {})
    table.clear(EntityX.List or {})
    table.clear(cloned)
    EntityX.Running = false
    EntityX.isAlive = false
    EntityX.character = nil
    Log("System stopped.", "⏹️")
end

-- Добавление игрока
function EntityX.addPlayer(plr)
    if not plr or EntityX.PlayerConnections[plr] then return end
    EntityX.PlayerConnections[plr] = EntityX.PlayerConnections[plr] or {}
    if plr.Character then
        EntityX.addEntity(plr.Character, plr, function()
            return plr.Team and plr.Team == LocalPlayer.Team
        end)
    end
    EntityX.PlayerConnections[plr] = {
        plr.CharacterAdded:Connect(function(char)
            EntityX.addEntity(char, plr, function()
                return plr.Team and plr.Team == LocalPlayer.Team
            end)
            Log("Player " .. plr.Name .. " character added.", "🟢")
        end),
        plr.CharacterRemoving:Connect(function(char)
            EntityX.removeEntity(char, plr == LocalPlayer)
            Log("Player " .. plr.Name .. " character removed.", "🔴")
        end),
        plr:GetPropertyChangedSignal('Team'):Connect(function()
            for _, v in EntityX.List do
                if v.Targetable ~= EntityX.targetCheck(v) then
                    EntityX.removeEntity(v.Character)
                    EntityX.addEntity(v.Character, v.Player, function()
                        return v.Player.Team and v.Player.Team == LocalPlayer.Team
                    end)
                end
            end
            if plr == LocalPlayer then
                EntityX.start()
            else
                EntityX.addEntity(plr.Character, plr, function()
                    return plr.Team and plr.Team == LocalPlayer.Team
                end)
            end
            Log("Player " .. plr.Name .. " team updated.", "🔄")
        end)
    }
end

-- Удаление игрока
function EntityX.removePlayer(plr)
    if not EntityX.PlayerConnections or not EntityX.PlayerConnections[plr] then return end
    for _, v in EntityX.PlayerConnections[plr] do
        if v then v:Disconnect() end
    end
    table.clear(EntityX.PlayerConnections[plr])
    EntityX.PlayerConnections[plr] = nil
    EntityX.removeEntity(plr.Character)
    Log("Player " .. (plr and plr.Name or "unknown") .. " removed.", "🔴")
end

-- Статус системы
EntityX.isAlive = false
EntityX.character = nil
EntityX.List = {}
EntityX.Connections = {}
EntityX.PlayerConnections = {}
EntityX.EntityThreads = {}
EntityX.Running = false
EntityX.npcCache = npcCache

EntityX.start()

return EntityX
