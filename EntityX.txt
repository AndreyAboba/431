-- EntityX Library for NPC Interaction
local EntityX = {}
local workspace = game:GetService("Workspace")
local Camera = workspace.CurrentCamera

-- –ö—Ä–∞—Å–∏–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
local function Log(message, emoji)
    print("{" .. emoji .. "} EntityX | " .. message)
end

-- –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
local function Initialize()
    if not workspace or not Camera then
        Log("Failed to initialize: Workspace or Camera not found.", "‚ùå")
        Log("Loaded with errors, some features may be unavailable.", "üü†")
    else
        Log("Lightweight NPC interactions.", "üß†")
        Log("Loaded successfully!", "üü¢")
    end
end
Initialize()

-- Internal cache for performance with delta checking
local npcCache = {}
local lastState = {}
local lastUpdate = 0
local lastLog = 0
local updateInterval = 0.5 -- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫—É–Ω–¥—ã
local logInterval = 1.0 -- –õ–æ–≥–∏ –∫–∞–∂–¥—ã–µ 1 —Å–µ–∫—É–Ω–¥—É

-- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ NPC
local npcConfig = {
    DistanceLimit = 120,
    TargetPart = "Head",
    DeltaThreshold = 2 -- –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
}

-- –ü–æ–∏—Å–∫ –≤—Å–µ—Ö NPC
local function FindAllNPCs()
    local currentTime = tick()
    if currentTime - lastUpdate < updateInterval and next(npcCache) then
        return npcCache
    end

    local spiderCave = workspace:FindFirstChild("MapProps") and workspace.MapProps:FindFirstChild("SpiderCave")
    local missions = workspace:FindFirstChild("Missions")
    local spiderling = workspace:FindFirstChild("Spiderling")
    local shade = workspace:FindFirstChild("Shade")
    local newCache = {}

    -- –ü–æ–∏—Å–∫ –≤ Missions
    if missions then
        for _, mission in pairs(missions:GetChildren()) do
            local aiSpawners = mission:FindFirstChild("AISpawners")
            if aiSpawners then
                for _, spawner in pairs(aiSpawners:GetChildren()) do
                    local mobTypes = {
                        "Poacher", "Poacher Mage", "Poacher Gunner", "Poacher Rifleman", "Imperial",
                        "Imperial Mage", "Nightfall Spitter Spider", "Nightfall Blink Spider",
                        "Poacher Apprentice", "Nightfall Spider"
                    }
                    for _, mobType in pairs(mobTypes) do
                        local mob = spawner:FindFirstChild(mobType)
                        if mob and mob.Parent then
                            local humanoid = mob:FindFirstChild("Humanoid")
                            if humanoid and humanoid.Health > 0 then
                                local targetPart = mob:FindFirstChild(npcConfig.TargetPart) or mob:FindFirstChild("HumanoidRootPart")
                                if targetPart then
                                    local distance = (Camera.CFrame.Position - targetPart.Position).Magnitude
                                    if distance <= npcConfig.DistanceLimit then
                                        local key = mob:GetFullName()
                                        if not lastState[key] or math.abs(lastState[key].Distance - distance) > npcConfig.DeltaThreshold or lastState[key].Health ~= humanoid.Health then
                                            newCache[key] = {
                                                Mob = mob,
                                                TargetPart = targetPart,
                                                Distance = distance,
                                                Health = humanoid.Health,
                                                Type = "QuestAI"
                                            }
                                            lastState[key] = {
                                                Distance = distance,
                                                Health = humanoid.Health
                                            }
                                        else
                                            newCache[key] = {
                                                Mob = lastState[key].Mob,
                                                TargetPart = lastState[key].TargetPart,
                                                Distance = lastState[key].Distance,
                                                Health = lastState[key].Health,
                                                Type = "QuestAI"
                                            }
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end

    -- –ü–æ–∏—Å–∫ –≤ SpiderCave
    if spiderCave then
        for _, container in pairs(spiderCave:GetChildren()) do
            local spiderTypes = {"Spider", "Cave Spider"}
            for _, spiderType in pairs(spiderTypes) do
                local mob = container:FindFirstChild(spiderType)
                if mob and mob.Parent then
                    local humanoid = mob:FindFirstChild("Humanoid")
                    if humanoid and humanoid.Health > 0 then
                        local targetPart = mob:FindFirstChild(npcConfig.TargetPart) or mob:FindFirstChild("HumanoidRootPart")
                        if targetPart then
                            local distance = (Camera.CFrame.Position - targetPart.Position).Magnitude
                            if distance <= npcConfig.DistanceLimit then
                                local key = mob:GetFullName()
                                if not lastState[key] or math.abs(lastState[key].Distance - distance) > npcConfig.DeltaThreshold or lastState[key].Health ~= humanoid.Health then
                                    newCache[key] = {
                                        Mob = mob,
                                        TargetPart = targetPart,
                                        Distance = distance,
                                        Health = humanoid.Health,
                                        Type = "QuestAI"
                                    }
                                    lastState[key] = {
                                        Distance = distance,
                                        Health = humanoid.Health
                                    }
                                else
                                    newCache[key] = {
                                        Mob = lastState[key].Mob,
                                        TargetPart = lastState[key].TargetPart,
                                        Distance = lastState[key].Distance,
                                        Health = lastState[key].Health,
                                        Type = "QuestAI"
                                    }
                                end
                            end
                        end
                    end
                end
            end
        end
    end

    -- –ü–æ–∏—Å–∫ Summon NPC
    local function checkSummonNPC(mob, type)
        if mob and mob.Parent then
            local humanoid = mob:FindFirstChild("Humanoid")
            if humanoid and humanoid.Health > 0 then
                local targetPart = mob:FindFirstChild(npcConfig.TargetPart) or mob:FindFirstChild("HumanoidRootPart")
                if targetPart then
                    local distance = (Camera.CFrame.Position - targetPart.Position).Magnitude
                    if distance <= npcConfig.DistanceLimit then
                        local key = mob:GetFullName()
                        if not lastState[key] or math.abs(lastState[key].Distance - distance) > npcConfig.DeltaThreshold or lastState[key].Health ~= humanoid.Health then
                            newCache[key] = {
                                Mob = mob,
                                TargetPart = targetPart,
                                Distance = distance,
                                Health = humanoid.Health,
                                Type = type
                            }
                            lastState[key] = {
                                Distance = distance,
                                Health = humanoid.Health
                            }
                        else
                            newCache[key] = {
                                Mob = lastState[key].Mob,
                                TargetPart = lastState[key].TargetPart,
                                Distance = lastState[key].Distance,
                                Health = lastState[key].Health,
                                Type = type
                            }
                        end
                    end
                end
            end
        end
    end

    checkSummonNPC(spiderling, "SummonAI")
    checkSummonNPC(shade, "SummonAI")

    npcCache = newCache
    lastUpdate = currentTime
    local currentLogTime = tick()
    if currentLogTime - lastLog >= logInterval and next(npcCache) then
        Log("Found entities! (" .. #npcCache .. ")", "üõ°")
        lastLog = currentLogTime
    end
    return npcCache
end

-- –ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–µ–≥–æ NPC
function EntityX:GetClosestNPC()
    local npcs = {}
    for _, data in pairs(npcCache) do
        table.insert(npcs, data)
    end
    if #npcs == 0 then
        return nil, nil
    end

    table.sort(npcs, function(a, b)
        local aScore = (a.Distance / npcConfig.DistanceLimit) * 0.5 + (a.Health / 100) * 0.5
        local bScore = (b.Distance / npcConfig.DistanceLimit) * 0.5 + (b.Health / 100) * 0.5
        return aScore < bScore
    end)

    return npcs[1].Mob, npcs[1].TargetPart
end

-- –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö NPC
function EntityX:GetAllNPCs()
    local npcs = {}
    for _, data in pairs(npcCache) do
        table.insert(npcs, data)
    end
    return npcs
end

-- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–¥–µ–ª–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
function EntityX:SetDistanceLimit(limit)
    npcConfig.DistanceLimit = limit or 120
    Log("Distance limit set to " .. npcConfig.DistanceLimit .. ".", "‚öôÔ∏è")
end

-- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–≤–æ–π —á–∞—Å—Ç–∏ —Ç–µ–ª–∞
function EntityX:SetTargetPart(part)
    npcConfig.TargetPart = part or "Head"
    Log("Target part set to " .. npcConfig.TargetPart .. ".", "‚öôÔ∏è")
end

-- –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø–æ–∏—Å–∫ NPC –≤ –∑–∞–¥–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
function EntityX:FindNPCsInLocation(location, mobTypes)
    local validTargets = {}
    if not location or not location:IsA("Instance") then
        Log("Invalid location provided.", "‚ùå")
        return validTargets
    end

    for _, container in pairs(location:GetChildren()) do
        for _, mobType in pairs(mobTypes or {}) do
            local mob = container:FindFirstChild(mobType)
            if mob and mob.Parent then
                local humanoid = mob:FindFirstChild("Humanoid")
                if humanoid and humanoid.Health > 0 then
                    local targetPart = mob:FindFirstChild(npcConfig.TargetPart) or mob:FindFirstChild("HumanoidRootPart")
                    if targetPart then
                        local distance = (Camera.CFrame.Position - targetPart.Position).Magnitude
                        if distance <= npcConfig.DistanceLimit then
                            table.insert(validTargets, {
                                Mob = mob,
                                TargetPart = targetPart,
                                Distance = distance,
                                Health = humanoid.Health
                            })
                        end
                    end
                end
            end
        end
    end

    if #validTargets > 0 and tick() - lastLog >= logInterval then
        Log("Found entities! (" .. #validTargets .. ")", "üõ°")
        lastLog = tick()
    end
    return validTargets
end

-- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è NPC (–∂–∏–≤/–º—ë—Ä—Ç–≤)
function EntityX:IsNPCAlive(mob)
    if not mob or not mob:FindFirstChild("Humanoid") then return false end
    return mob.Humanoid.Health > 0
end

-- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ NPC
function EntityX:GetDistanceToNPC(mob)
    if not mob or not mob:FindFirstChild(npcConfig.TargetPart) then return math.huge end
    return (Camera.CFrame.Position - mob[npcConfig.TargetPart].Position).Magnitude
end

return EntityX
